SET SQLBLANKLINES ON;


   CREATE SEQUENCE  /*"SYGAL".*/"ACTEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"API_LOG_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"ATTESTATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"DIFFUSION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"DOCTORANT_COMPL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"DOCTORANT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"DOMAINE_SCIENTIFIQUE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"ECOLE_DOCT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"ETABLISSEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"ETABLISSEMENT_RATTACH_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"FAQ_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"FICHIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"FICHIER_THESE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"FINANCEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"IMPORT_NOTIF_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"IMPORT_OBSERV_ETAB_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"IMPORT_OBSERV_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"IMPORT_OBSERV_RESULT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"INDICATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"INDIVIDU_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"INDIVIDU_ROLE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"INFORMATION_FICHIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"INFORMATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"MAIL_CONFIRMATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"METADONNEE_THESE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"NATURE_FICHIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"NOTIF_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"NOTIF_RESULT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"ORIGINE_FINANCEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"PRIVILEGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"PROFIL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"RDV_BU_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"ROLE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"STRUCTURE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"STRUCTURE_SUBSTIT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"SYNCHRO_LOG_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"SYNC_LOG_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"THESE_ANNEE_UNIV_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"THESE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"TITRE_ACCES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"UNITE_RECH_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"UTILISATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"VALIDATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"VALIDITE_FICHIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"VARIABLE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
   CREATE SEQUENCE  /*"SYGAL".*/"WF_ETAPE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1  /*CACHE 20*/ NOORDER  NOCYCLE ;
  CREATE TABLE /*"SYGAL".*/"ACTEUR" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"INDIVIDU_ID" NUMBER DEFAULT NULL NOT NULL ENABLE, 
	"THESE_ID" NUMBER DEFAULT NULL NOT NULL ENABLE, 
	"ROLE_ID" NUMBER DEFAULT NULL NOT NULL ENABLE, 
	"QUALITE" VARCHAR2(200 CHAR), 
	"LIB_ROLE_COMPL" VARCHAR2(200 CHAR), 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	"ACTEUR_ETABLISSEMENT_ID" NUMBER, 
	 CONSTRAINT "ACTEUR_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"API_LOG" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"REQ_URI" VARCHAR2(2000 CHAR) NOT NULL ENABLE, 
	"REQ_START_DATE" DATE NOT NULL ENABLE, 
	"REQ_END_DATE" DATE, 
	"REQ_STATUS" VARCHAR2(32 CHAR), 
	"REQ_RESPONSE" CLOB, 
	"REQ_ETABLISSEMENT" VARCHAR2(64), 
	"REQ_TABLE" VARCHAR2(64), 
	 CONSTRAINT "API_LOG_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"ATTESTATION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER NOT NULL ENABLE, 
	"VER_DEPO_EST_VER_REF" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"EX_IMPR_CONFORM_VER_DEPO" NUMBER(1,0) DEFAULT null, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"VERSION_CORRIGEE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT "ATTESTATION_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"BACKUP_FICHIER" 
   (	"ID" VARCHAR2(40 CHAR) NOT NULL ENABLE, 
	"NOM" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"TYPE_MIME" VARCHAR2(128 CHAR) NOT NULL ENABLE, 
	"TAILLE" NUMBER NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(256 CHAR), 
	"THESE_ID" NUMBER NOT NULL ENABLE, 
	"VERSION_FICHIER_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"EST_ANNEXE" NUMBER(1,0) NOT NULL ENABLE, 
	"NOM_ORIGINAL" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"EST_EXPURGE" NUMBER(1,0) NOT NULL ENABLE, 
	"EST_CONFORME" NUMBER(1,0), 
	"RETRAITEMENT" VARCHAR2(50 CHAR), 
	"NATURE_ID" NUMBER NOT NULL ENABLE, 
	"EST_PARTIEL" NUMBER(1,0) NOT NULL ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"CATEGORIE_PRIVILEGE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(150 CHAR) NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"ORDRE" NUMBER, 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"DIFFUSION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER NOT NULL ENABLE, 
	"DROIT_AUTEUR_OK" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"AUTORIS_MEL" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"AUTORIS_EMBARGO_DUREE" VARCHAR2(20 CHAR), 
	"AUTORIS_MOTIF" VARCHAR2(2000 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"CERTIF_CHARTE_DIFF" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"CONFIDENT" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"CONFIDENT_DATE_FIN" DATE, 
	"ORCID" VARCHAR2(200 CHAR), 
	"NNT" VARCHAR2(30), 
	"HAL_ID" VARCHAR2(100), 
	"VERSION_CORRIGEE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT "MISE_EN_LIGNE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"DOCTORANT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ETABLISSEMENT_ID" NUMBER DEFAULT NULL NOT NULL ENABLE, 
	"INDIVIDU_ID" NUMBER DEFAULT NULL NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	"INE" VARCHAR2(64), 
	 CONSTRAINT "DOCTORANT_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"DOCTORANT_COMPL" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"DOCTORANT_ID" NUMBER NOT NULL ENABLE, 
	"PERSOPASS" VARCHAR2(50 CHAR), 
	"EMAIL_PRO" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	 CONSTRAINT "THESARD_COMPL_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"DOMAINE_SCIENTIFIQUE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(128) NOT NULL ENABLE, 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"ECOLE_DOCT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"STRUCTURE_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "ECOLE_DOCT_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"ETABLISSEMENT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"STRUCTURE_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT sysdate NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"DOMAINE" VARCHAR2(50), 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"EST_MEMBRE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"EST_ASSOCIE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"EST_COMUE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT "ETAB_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"ETABLISSEMENT_RATTACH" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"UNITE_ID" NUMBER NOT NULL ENABLE, 
	"ETABLISSEMENT_ID" NUMBER NOT NULL ENABLE, 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"FAQ" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"QUESTION" VARCHAR2(2000 CHAR) NOT NULL ENABLE, 
	"REPONSE" VARCHAR2(2000 CHAR) NOT NULL ENABLE, 
	"ORDRE" NUMBER, 
	 CONSTRAINT "FAQ_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"FICHIER" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"UUID" VARCHAR2(60) NOT NULL ENABLE, 
	"NATURE_ID" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	"NOM" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"NOM_ORIGINAL" VARCHAR2(255 CHAR) DEFAULT NULL NOT NULL ENABLE, 
	"TYPE_MIME" VARCHAR2(128 CHAR) NOT NULL ENABLE, 
	"TAILLE" NUMBER NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(256 CHAR), 
	"VERSION_FICHIER_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	 CONSTRAINT "FICHIER_PK_NEW" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"FICHIER_THESE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"FICHIER_ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER NOT NULL ENABLE, 
	"EST_ANNEXE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"EST_EXPURGE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"EST_CONFORME" NUMBER(1,0), 
	"RETRAITEMENT" VARCHAR2(50 CHAR), 
	"EST_PARTIEL" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT "FICHIER_THESE_PK_NEW" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"FINANCEMENT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER, 
	"ANNEE" NUMBER NOT NULL ENABLE, 
	"ORIGINE_FINANCEMENT_ID" NUMBER NOT NULL ENABLE, 
	"COMPLEMENT_FINANCEMENT" VARCHAR2(256), 
	"QUOTITE_FINANCEMENT" VARCHAR2(8), 
	"DATE_DEBUT" DATE, 
	"DATE_FIN" DATE, 
	"SOURCE_CODE" VARCHAR2(64) DEFAULT NULL NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"CODE_TYPE_FINANCEMENT" VARCHAR2(8), 
	"LIBELLE_TYPE_FINANCEMENT" VARCHAR2(100), 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"IMPORT_NOTIF" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"TABLE_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"COLUMN_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"OPERATION" VARCHAR2(50 CHAR) DEFAULT 'UPDATE' NOT NULL ENABLE, 
	"TO_VALUE" VARCHAR2(1000 CHAR), 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"URL" VARCHAR2(1000 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "IMPORT_NOTIF_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "IMPORT_NOTIF_UN" UNIQUE ("TABLE_NAME", "COLUMN_NAME", "OPERATION") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"IMPORT_OBSERV" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"TABLE_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"COLUMN_NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"OPERATION" VARCHAR2(50 CHAR) DEFAULT 'UPDATE' NOT NULL ENABLE, 
	"TO_VALUE" VARCHAR2(1000 CHAR), 
	"DESCRIPTION" VARCHAR2(200 CHAR), 
	"ENABLED" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT "IMPORT_OBSERV_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "IMPORT_OBSERV_CODE_UN" UNIQUE ("CODE") ENABLE, 
	 CONSTRAINT "IMPORT_OBSERV_UN" UNIQUE ("TABLE_NAME", "COLUMN_NAME", "OPERATION", "TO_VALUE") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"IMPORT_OBSERV_ETAB" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"IMPORT_OBSERV_ID" NUMBER NOT NULL ENABLE, 
	"ETABLISSEMENT_ID" NUMBER NOT NULL ENABLE, 
	"ENABLED" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT "IMPORT_OBSERV_ETAB_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "IMPORT_OBSERV_ETAB_UN" UNIQUE ("IMPORT_OBSERV_ID", "ETABLISSEMENT_ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"IMPORT_OBSERV_RESULT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"IMPORT_OBSERV_ID" NUMBER NOT NULL ENABLE, 
	"DATE_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"RESULTAT" CLOB NOT NULL ENABLE, 
	"DATE_NOTIF" DATE, 
	"IMPORT_OBSERV_ETAB_ID" NUMBER, 
	"TOO_OLD" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	 CONSTRAINT "IMPORT_OBSERV_RESULT_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"IMPORT_OBS_NOTIF" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"IMPORT_OBSERV_ID" NUMBER NOT NULL ENABLE, 
	"NOTIF_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "IOND_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"IMPORT_OBS_RESULT_NOTIF" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"IMPORT_OBSERV_RESULT_ID" NUMBER NOT NULL ENABLE, 
	"NOTIF_RESULT_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "IORNR_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"INDICATEUR" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(128) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(1024), 
	"REQUETE" VARCHAR2(1024), 
	"ACTIF" NUMBER, 
	"DISPLAY_AS" VARCHAR2(128), 
	"CLASS" VARCHAR2(128), 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"INDIVIDU" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"TYPE" VARCHAR2(32), 
	"CIVILITE" VARCHAR2(5 CHAR) DEFAULT NULL, 
	"NOM_USUEL" VARCHAR2(60 CHAR) NOT NULL ENABLE, 
	"NOM_PATRONYMIQUE" VARCHAR2(60 CHAR) DEFAULT NULL, 
	"PRENOM1" VARCHAR2(60 CHAR) NOT NULL ENABLE, 
	"PRENOM2" VARCHAR2(60 CHAR), 
	"PRENOM3" VARCHAR2(60 CHAR), 
	"EMAIL" VARCHAR2(255 CHAR), 
	"DATE_NAISSANCE" DATE DEFAULT NULL, 
	"NATIONALITE" VARCHAR2(128 CHAR), 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	"SUPANN_ID" VARCHAR2(30), 
	"ETABLISSEMENT_ID" NUMBER, 
	 CONSTRAINT "INDIVIDU_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"INDIVIDU_RECH" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"HAYSTACK" CLOB, 
	 CONSTRAINT "INDIVIDU_RECH_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"INDIVIDU_ROLE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"INDIVIDU_ID" NUMBER, 
	"ROLE_ID" NUMBER, 
	 CONSTRAINT "INDIVIDU_ROLE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"INFORMATION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"TITRE" VARCHAR2(256) NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"CONTENU" CLOB NOT NULL ENABLE, 
	"PRIORITE" NUMBER DEFAULT 0 NOT NULL ENABLE, 
	"EST_VISIBLE" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT "INFORMATION_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"MAIL_CONFIRMATION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"INDIVIDU_ID" NUMBER NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(256) NOT NULL ENABLE, 
	"ETAT" VARCHAR2(1), 
	"CODE" VARCHAR2(19), 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"METADONNEE_THESE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER NOT NULL ENABLE, 
	"TITRE" VARCHAR2(2048 CHAR) NOT NULL ENABLE, 
	"LANGUE" VARCHAR2(40 CHAR) NOT NULL ENABLE, 
	"RESUME" CLOB DEFAULT NULL NOT NULL ENABLE, 
	"RESUME_ANGLAIS" CLOB DEFAULT NULL NOT NULL ENABLE, 
	"MOTS_CLES_LIBRES_FR" VARCHAR2(1024 CHAR) NOT NULL ENABLE, 
	"MOTS_CLES_RAMEAU" VARCHAR2(1024 CHAR), 
	"TITRE_AUTRE_LANGUE" VARCHAR2(2048 CHAR) NOT NULL ENABLE, 
	"MOTS_CLES_LIBRES_ANG" VARCHAR2(1024 CHAR), 
	 CONSTRAINT "METADONNEE_THESE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"NATURE_FICHIER" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(50 CHAR) DEFAULT NULL NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(100 CHAR) DEFAULT NULL, 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"NOTIF" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(100) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(255) NOT NULL ENABLE, 
	"RECIPIENTS" VARCHAR2(500) DEFAULT NULL, 
	"TEMPLATE" CLOB NOT NULL ENABLE, 
	"ENABLED" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT "NOTIF_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "NOTIF_UNIQ" UNIQUE ("CODE") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"NOTIF_RESULT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"NOTIF_ID" NUMBER NOT NULL ENABLE, 
	"SUBJECT" VARCHAR2(255) NOT NULL ENABLE, 
	"BODY" CLOB NOT NULL ENABLE, 
	"SENT_ON" DATE NOT NULL ENABLE, 
	"ERROR" CLOB, 
	 CONSTRAINT "NOTIF_RESULT_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"ORIGINE_FINANCEMENT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"LIBELLE_LONG" VARCHAR2(256) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER, 
	"LIBELLE_COURT" VARCHAR2(64), 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"PARAMETRE" 
   (	"ID" VARCHAR2(256) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(256) NOT NULL ENABLE, 
	"VALEUR" VARCHAR2(256) NOT NULL ENABLE, 
	 CONSTRAINT "PARAMETRE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"PRIVILEGE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CATEGORIE_ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(150 CHAR) NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"ORDRE" NUMBER, 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"PROFIL" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(100) NOT NULL ENABLE, 
	"ROLE_ID" VARCHAR2(100) NOT NULL ENABLE, 
	"STRUCTURE_TYPE" NUMBER DEFAULT NULL, 
	"DESCRIPTION" VARCHAR2(1024), 
	 PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"PROFIL_PRIVILEGE" 
   (	"PRIVILEGE_ID" NUMBER NOT NULL ENABLE, 
	"PROFIL_ID" NUMBER, 
	 CONSTRAINT "PROFIL_PRIVILEGE_PK" PRIMARY KEY ("PROFIL_ID", "PRIVILEGE_ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"PROFIL_TO_ROLE" 
   (	"PROFIL_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"ROLE_ID" NUMBER(*,0) NOT NULL ENABLE, 
	 CONSTRAINT "PROFIL_TO_ROLE_PK" PRIMARY KEY ("PROFIL_ID", "ROLE_ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"RDV_BU" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER NOT NULL ENABLE, 
	"COORD_DOCTORANT" VARCHAR2(2000 CHAR), 
	"DISPO_DOCTORANT" VARCHAR2(2000 CHAR), 
	"MOTS_CLES_RAMEAU" VARCHAR2(1024 CHAR), 
	"CONVENTION_MEL_SIGNEE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"EXEMPL_PAPIER_FOURNI" NUMBER(1,0) DEFAULT null, 
	"VERSION_ARCHIVABLE_FOURNIE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"DIVERS" CLOB, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	 CONSTRAINT "RDV_BU_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"ROLE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"ROLE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"IS_DEFAULT" NUMBER DEFAULT 0, 
	"LDAP_FILTER" VARCHAR2(255 CHAR), 
	"ATTRIB_AUTO" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"THESE_DEP" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	"STRUCTURE_ID" NUMBER, 
	"TYPE_STRUCTURE_DEPENDANT_ID" NUMBER, 
	"ORDRE_AFFICHAGE" VARCHAR2(32) DEFAULT 'zzz' NOT NULL ENABLE, 
	 CONSTRAINT "ROLE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"ROLE_PRIVILEGE" 
   (	"ROLE_ID" NUMBER NOT NULL ENABLE, 
	"PRIVILEGE_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "ROLE_PRIVILEGE_PK" PRIMARY KEY ("ROLE_ID", "PRIVILEGE_ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"SOURCE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(128 CHAR) NOT NULL ENABLE, 
	"IMPORTABLE" NUMBER(1,0) NOT NULL ENABLE, 
	"ETABLISSEMENT_ID" NUMBER, 
	 CONSTRAINT "SOURCE_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "SOURCE_CODE_UN" UNIQUE ("CODE") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"STRUCTURE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"SIGLE" VARCHAR2(40 CHAR), 
	"LIBELLE" VARCHAR2(300 CHAR) DEFAULT NULL NOT NULL ENABLE, 
	"CHEMIN_LOGO" VARCHAR2(200 CHAR), 
	"TYPE_STRUCTURE_ID" NUMBER, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"CODE" VARCHAR2(64) DEFAULT NULL NOT NULL ENABLE, 
	"EST_FERME" NUMBER(1,0) DEFAULT 0, 
	 CONSTRAINT "STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"STRUCTURE_SUBSTIT" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"FROM_STRUCTURE_ID" NUMBER NOT NULL ENABLE, 
	"TO_STRUCTURE_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_CREATEUR_ID" NUMBER, 
	"HISTO_MODIFICATEUR_ID" NUMBER, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	 CONSTRAINT "STR_SUBSTIT_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"SYNCHRO_LOG" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"LOG_DATE" DATE DEFAULT sysdate NOT NULL ENABLE, 
	"START_DATE" DATE NOT NULL ENABLE, 
	"FINISH_DATE" DATE NOT NULL ENABLE, 
	"STATUS" VARCHAR2(50) NOT NULL ENABLE, 
	"SQL" CLOB NOT NULL ENABLE, 
	"MESSAGE" CLOB, 
	 CONSTRAINT "SYNCHRO_LOG_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"SYNC_LOG" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"DATE_SYNC" TIMESTAMP (6) NOT NULL ENABLE, 
	"MESSAGE" CLOB NOT NULL ENABLE, 
	"TABLE_NAME" VARCHAR2(30 CHAR), 
	"SOURCE_CODE" VARCHAR2(200 CHAR), 
	 CONSTRAINT "SYNC_LOG_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"THESE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ETABLISSEMENT_ID" NUMBER DEFAULT 2, 
	"DOCTORANT_ID" NUMBER DEFAULT NULL NOT NULL ENABLE, 
	"ECOLE_DOCT_ID" NUMBER, 
	"UNITE_RECH_ID" NUMBER, 
	"BESOIN_EXPURGE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE, 
	"COD_UNIT_RECH" VARCHAR2(50 CHAR), 
	"CORREC_AUTORISEE" VARCHAR2(30 CHAR) DEFAULT NULL, 
	"DATE_AUTORIS_SOUTENANCE" DATE, 
	"DATE_FIN_CONFID" DATE, 
	"DATE_PREM_INSC" DATE, 
	"DATE_PREV_SOUTENANCE" DATE, 
	"DATE_SOUTENANCE" DATE, 
	"ETAT_THESE" VARCHAR2(20 CHAR), 
	"LIB_DISC" VARCHAR2(200 CHAR), 
	"LIB_ETAB_COTUT" VARCHAR2(60 CHAR), 
	"LIB_PAYS_COTUT" VARCHAR2(40 CHAR), 
	"LIB_UNIT_RECH" VARCHAR2(200 CHAR), 
	"RESULTAT" NUMBER(1,0), 
	"SOUTENANCE_AUTORIS" VARCHAR2(1 CHAR), 
	"TEM_AVENANT_COTUT" VARCHAR2(1 CHAR), 
	"TITRE" VARCHAR2(2048 CHAR), 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	"CORREC_AUTORISEE_FORCEE" VARCHAR2(30), 
	"ANNEE_UNIV_1ERE_INSC" NUMBER(*,0), 
	"DATE_ABANDON" DATE, 
	"DATE_TRANSFERT" DATE, 
	 CONSTRAINT "THESE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"THESE_ANNEE_UNIV" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER, 
	"ANNEE_UNIV" NUMBER(*,0), 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	 CONSTRAINT "THESE_ANNEE_UNIV_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"TITRE_ACCES" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER, 
	"TITRE_ACCES_INTERNE_EXTERNE" VARCHAR2(1), 
	"LIBELLE_TITRE_ACCES" VARCHAR2(200), 
	"TYPE_ETB_TITRE_ACCES" VARCHAR2(50), 
	"LIBELLE_ETB_TITRE_ACCES" VARCHAR2(200), 
	"CODE_DEPT_TITRE_ACCES" VARCHAR2(20), 
	"CODE_PAYS_TITRE_ACCES" VARCHAR2(20), 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	 CONSTRAINT "TITRE_ACCES_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_ACTEUR" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"INDIVIDU_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"THESE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"ROLE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"LIB_CPS" VARCHAR2(200 CHAR), 
	"COD_CPS" VARCHAR2(50 CHAR), 
	"COD_ROJ_COMPL" VARCHAR2(50 CHAR), 
	"LIB_ROJ_COMPL" VARCHAR2(200 CHAR), 
	"TEM_HAB_RCH_PER" VARCHAR2(1 CHAR), 
	"TEM_RAP_RECU" VARCHAR2(1 CHAR), 
	"ACTEUR_ETABLISSEMENT_ID" VARCHAR2(64 CHAR), 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_DOCTORANT" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"INDIVIDU_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"INE" VARCHAR2(64), 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_ECOLE_DOCT" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64) NOT NULL ENABLE, 
	"STRUCTURE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_ETABLISSEMENT" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64) NOT NULL ENABLE, 
	"STRUCTURE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_FINANCEMENT" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"THESE_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"ANNEE" VARCHAR2(50) NOT NULL ENABLE, 
	"ORIGINE_FINANCEMENT_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"COMPLEMENT_FINANCEMENT" VARCHAR2(200), 
	"QUOTITE_FINANCEMENT" VARCHAR2(50), 
	"DATE_DEBUT_FINANCEMENT" DATE, 
	"DATE_FIN_FINANCEMENT" DATE, 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate, 
	"CODE_TYPE_FINANCEMENT" VARCHAR2(8), 
	"LIBELLE_TYPE_FINANCEMENT" VARCHAR2(100)
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_INDIVIDU" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"TYPE" VARCHAR2(32), 
	"CIV" VARCHAR2(5), 
	"LIB_NOM_USU_IND" VARCHAR2(60 CHAR) NOT NULL ENABLE, 
	"LIB_NOM_PAT_IND" VARCHAR2(60 CHAR) NOT NULL ENABLE, 
	"LIB_PR1_IND" VARCHAR2(60 CHAR) NOT NULL ENABLE, 
	"LIB_PR2_IND" VARCHAR2(60 CHAR), 
	"LIB_PR3_IND" VARCHAR2(60 CHAR), 
	"EMAIL" VARCHAR2(255 CHAR), 
	"DAT_NAI_PER" DATE, 
	"LIB_NAT" VARCHAR2(128 CHAR), 
	"SUPANN_ID" VARCHAR2(30), 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_ORIGINE_FINANCEMENT" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"COD_OFI" VARCHAR2(50) NOT NULL ENABLE, 
	"LIC_OFI" VARCHAR2(50) NOT NULL ENABLE, 
	"LIB_OFI" VARCHAR2(200) NOT NULL ENABLE, 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_ROLE" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"LIB_ROJ" VARCHAR2(200 CHAR), 
	"LIC_ROJ" VARCHAR2(50 CHAR), 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_STRUCTURE" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"TYPE_STRUCTURE_ID" VARCHAR2(64) NOT NULL ENABLE, 
	"SIGLE" VARCHAR2(64), 
	"LIBELLE" VARCHAR2(200) NOT NULL ENABLE, 
	"CODE_PAYS" VARCHAR2(64), 
	"LIBELLE_PAYS" VARCHAR2(200), 
	"CODE" VARCHAR2(64), 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_THESE" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"DOCTORANT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"ECOLE_DOCT_ID" VARCHAR2(64 CHAR), 
	"UNITE_RECH_ID" VARCHAR2(64 CHAR), 
	"CORRECTION_POSSIBLE" VARCHAR2(30 CHAR), 
	"DAT_AUT_SOU_THS" DATE, 
	"DAT_FIN_CFD_THS" DATE, 
	"DAT_DEB_THS" DATE, 
	"DAT_PREV_SOU" DATE, 
	"DAT_SOU_THS" DATE, 
	"ETA_THS" VARCHAR2(20 CHAR), 
	"LIB_INT1_DIS" VARCHAR2(200 CHAR), 
	"LIB_ETAB_COTUT" VARCHAR2(60 CHAR), 
	"LIB_PAYS_COTUT" VARCHAR2(40 CHAR), 
	"COD_NEG_TRE" VARCHAR2(1 CHAR), 
	"TEM_SOU_AUT_THS" VARCHAR2(1 CHAR), 
	"TEM_AVENANT_COTUT" VARCHAR2(1 CHAR), 
	"LIB_THS" VARCHAR2(2048 CHAR), 
	"ANNEE_UNIV_1ERE_INSC" NUMBER(*,0), 
	"DAT_ABANDON" DATE, 
	"DAT_TRANSFERT_DEP" DATE, 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_THESE_ANNEE_UNIV" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"THESE_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"ANNEE_UNIV" NUMBER(*,0), 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_TITRE_ACCES" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"THESE_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"TITRE_ACCES_INTERNE_EXTERNE" VARCHAR2(1), 
	"LIBELLE_TITRE_ACCES" VARCHAR2(200), 
	"TYPE_ETB_TITRE_ACCES" VARCHAR2(50), 
	"LIBELLE_ETB_TITRE_ACCES" VARCHAR2(200), 
	"CODE_DEPT_TITRE_ACCES" VARCHAR2(20), 
	"CODE_PAYS_TITRE_ACCES" VARCHAR2(20), 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_UNITE_RECH" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64) NOT NULL ENABLE, 
	"STRUCTURE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TMP_VARIABLE" 
   (	"INSERT_DATE" DATE DEFAULT sysdate, 
	"ID" VARCHAR2(64), 
	"ETABLISSEMENT_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64) NOT NULL ENABLE, 
	"COD_VAP" VARCHAR2(50 CHAR), 
	"LIB_VAP" VARCHAR2(300 CHAR), 
	"PAR_VAP" VARCHAR2(200 CHAR), 
	"DATE_DEB_VALIDITE" DATE DEFAULT NULL NOT NULL ENABLE, 
	"DATE_FIN_VALIDITE" DATE DEFAULT NULL NOT NULL ENABLE, 
	"SOURCE_INSERT_DATE" DATE DEFAULT sysdate
   ) ;
  CREATE TABLE /*"SYGAL".*/"TYPE_STRUCTURE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(100 CHAR), 
	 CONSTRAINT "TYPE_STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"TYPE_VALIDATION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(100 CHAR), 
	 CONSTRAINT "TYPE_VALIDATION_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"UNITE_DOMAINE_LINKER" 
   (	"UNITE_ID" NUMBER NOT NULL ENABLE, 
	"DOMAINE_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "SYS_C0010859" PRIMARY KEY ("UNITE_ID", "DOMAINE_ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"UNITE_RECH" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ETAB_SUPPORT" VARCHAR2(500 CHAR), 
	"AUTRES_ETAB" VARCHAR2(500 CHAR), 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"STRUCTURE_ID" NUMBER NOT NULL ENABLE, 
	"RNSR_ID" VARCHAR2(128), 
	 CONSTRAINT "UNITE_RECH_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"UTILISATEUR" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(255 CHAR), 
	"EMAIL" VARCHAR2(255 CHAR), 
	"DISPLAY_NAME" VARCHAR2(100 CHAR), 
	"PASSWORD" VARCHAR2(128 CHAR) NOT NULL ENABLE, 
	"STATE" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	"LAST_ROLE_ID" NUMBER, 
	"INDIVIDU_ID" NUMBER, 
	"PASSWORD_RESET_TOKEN" VARCHAR2(256) DEFAULT null, 
	 CONSTRAINT "UTILISATEUR_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "UTILISATEUR_USERNAME_UN" UNIQUE ("USERNAME") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"VALIDATION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"TYPE_VALIDATION_ID" NUMBER NOT NULL ENABLE, 
	"THESE_ID" NUMBER NOT NULL ENABLE, 
	"INDIVIDU_ID" NUMBER DEFAULT NULL, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	 CONSTRAINT "VALIDATION_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"VALIDITE_FICHIER" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"FICHIER_ID" NUMBER NOT NULL ENABLE, 
	"EST_VALIDE" VARCHAR2(1 CHAR) DEFAULT NULL, 
	"MESSAGE" CLOB DEFAULT NULL, 
	"LOG" CLOB, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	 CONSTRAINT "VALIDITE_FICHIER_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"VARIABLE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ETABLISSEMENT_ID" NUMBER DEFAULT NULL NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(300 CHAR) NOT NULL ENABLE, 
	"VALEUR" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"SOURCE_CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE, 
	"SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER NOT NULL ENABLE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"DATE_DEB_VALIDITE" DATE DEFAULT sysdate NOT NULL ENABLE, 
	"DATE_FIN_VALIDITE" DATE DEFAULT to_date('9999-12-31', 'YYYY-MM-DD') NOT NULL ENABLE, 
	"CODE" VARCHAR2(64), 
	 CONSTRAINT "VARIABLE_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"VERSION_FICHIER" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(16 CHAR) NOT NULL ENABLE, 
	"LIBELLE" VARCHAR2(128 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "VERSION_FICHIER_PK" PRIMARY KEY ("ID") ENABLE
   ) ;
  CREATE TABLE /*"SYGAL".*/"WF_ETAPE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"CODE" VARCHAR2(128 CHAR) NOT NULL ENABLE, 
	"ORDRE" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	"CHEMIN" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	"OBLIGATOIRE" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE, 
	"ROUTE" VARCHAR2(200 CHAR) NOT NULL ENABLE, 
	"LIBELLE_ACTEUR" VARCHAR2(150 CHAR) NOT NULL ENABLE, 
	"LIBELLE_AUTRES" VARCHAR2(150 CHAR) NOT NULL ENABLE, 
	"DESC_NON_FRANCHIE" VARCHAR2(250 CHAR) NOT NULL ENABLE, 
	"DESC_SANS_OBJECTIF" VARCHAR2(250 CHAR), 
	 CONSTRAINT "WF_ETAPE_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "WF_ETAPE_CODE_UN" UNIQUE ("CODE") ENABLE, 
	 CONSTRAINT "WF_ETAPE_ORDRE_UN" UNIQUE ("ORDRE") ENABLE
   ) ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_ACTEUR_ETAB_ID_IDX" ON /*"SYGAL".*/"ACTEUR" ("ACTEUR_ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_DOCTORANT_ID_IDX" ON /*"SYGAL".*/"THESE" ("DOCTORANT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_ECOLE_DOCT_ID_IDX" ON /*"SYGAL".*/"THESE" ("ECOLE_DOCT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_ETABLISSEMENT_ID_IDX" ON /*"SYGAL".*/"THESE" ("ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_HISTO_DESTRUCT_ID_IDX" ON /*"SYGAL".*/"ACTEUR" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_HISTO_MODIF_ID_IDX" ON /*"SYGAL".*/"ACTEUR" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_INDIVIDU_ID_IDX" ON /*"SYGAL".*/"ACTEUR" ("INDIVIDU_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_ROLE_ID_IDX" ON /*"SYGAL".*/"ACTEUR" ("ROLE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"ACTEUR_SOURCE_CODE_UNIQ" ON /*"SYGAL".*/"ACTEUR" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_SOURCE_ID_IDX" ON /*"SYGAL".*/"ACTEUR" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_THESE_ID_IDX" ON /*"SYGAL".*/"ACTEUR" ("THESE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ACTEUR_UNITE_RECH_ID_IDX" ON /*"SYGAL".*/"THESE" ("UNITE_RECH_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ATTESTATION_HC_IDX" ON /*"SYGAL".*/"ATTESTATION" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ATTESTATION_HD_IDX" ON /*"SYGAL".*/"ATTESTATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ATTESTATION_HM_IDX" ON /*"SYGAL".*/"ATTESTATION" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ATTESTATION_THESE_IDX" ON /*"SYGAL".*/"ATTESTATION" ("THESE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"CATEGORIE_PRIVILEGE_UNIQUE" ON /*"SYGAL".*/"CATEGORIE_PRIVILEGE" ("CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"DIFFUSION_HC_IDX" ON /*"SYGAL".*/"DIFFUSION" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DIFFUSION_HD_IDX" ON /*"SYGAL".*/"DIFFUSION" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DIFFUSION_HM_IDX" ON /*"SYGAL".*/"DIFFUSION" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DIFFUSION_THESE_IDX" ON /*"SYGAL".*/"DIFFUSION" ("THESE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_COMPL_DOCTORANT_IDX" ON /*"SYGAL".*/"DOCTORANT_COMPL" ("DOCTORANT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_COMPL_HC_IDX" ON /*"SYGAL".*/"DOCTORANT_COMPL" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_COMPL_HD_IDX" ON /*"SYGAL".*/"DOCTORANT_COMPL" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_COMPL_HM_IDX" ON /*"SYGAL".*/"DOCTORANT_COMPL" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"DOCTORANT_COMPL_UN" ON /*"SYGAL".*/"DOCTORANT_COMPL" ("PERSOPASS", "HISTO_DESTRUCTION") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_ETABLISSEMENT_IDX" ON /*"SYGAL".*/"DOCTORANT" ("ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_HCFK_IDX" ON /*"SYGAL".*/"DOCTORANT" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_HDFK_IDX" ON /*"SYGAL".*/"DOCTORANT" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_HMFK_IDX" ON /*"SYGAL".*/"DOCTORANT" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_INDIVIDU_IDX" ON /*"SYGAL".*/"DOCTORANT" ("INDIVIDU_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"DOCTORANT_SOURCE_CODE_UNIQ" ON /*"SYGAL".*/"DOCTORANT" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"DOCTORANT_SRC_ID_INDEX" ON /*"SYGAL".*/"DOCTORANT" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ECOLE_DOCT_HC_IDX" ON /*"SYGAL".*/"ECOLE_DOCT" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ECOLE_DOCT_HD_IDX" ON /*"SYGAL".*/"ECOLE_DOCT" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ECOLE_DOCT_HM_IDX" ON /*"SYGAL".*/"ECOLE_DOCT" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"ECOLE_DOCT_SOURCE_CODE_UN" ON /*"SYGAL".*/"ECOLE_DOCT" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"ECOLE_DOCT_SOURCE_IDX" ON /*"SYGAL".*/"ECOLE_DOCT" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ECOLE_DOCT_STRUCT_ID_IDX" ON /*"SYGAL".*/"ECOLE_DOCT" ("STRUCTURE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"ETABLISSEMENT_DOMAINE_UINDEX" ON /*"SYGAL".*/"ETABLISSEMENT" ("DOMAINE") 
  ;
  CREATE INDEX /*"SYGAL".*/"ETABLISSEMENT_STRUCT_ID_IDX" ON /*"SYGAL".*/"ETABLISSEMENT" ("STRUCTURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"FICHIER_HCFK_IDX" ON /*"SYGAL".*/"FICHIER" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"FICHIER_HDFK_IDX" ON /*"SYGAL".*/"FICHIER" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"FICHIER_HMFK_IDX" ON /*"SYGAL".*/"FICHIER" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"FICHIER_NATURE_ID_INDEX" ON /*"SYGAL".*/"FICHIER" ("NATURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"FICHIER_THESE_FICH_ID_IDX" ON /*"SYGAL".*/"FICHIER_THESE" ("FICHIER_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"FICHIER_THESE_THESE_ID_IDX" ON /*"SYGAL".*/"FICHIER_THESE" ("THESE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"FICHIER_UUID_UN" ON /*"SYGAL".*/"FICHIER" ("UUID") 
  ;
  CREATE INDEX /*"SYGAL".*/"FICHIER_VERSION_FK_IDX" ON /*"SYGAL".*/"FICHIER" ("VERSION_FICHIER_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"FINANCEMENT_SOURCE_CODE_UN" ON /*"SYGAL".*/"FINANCEMENT" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"IMPORT_OBSERV_RESULT_IO_IDX" ON /*"SYGAL".*/"IMPORT_OBSERV_RESULT" ("IMPORT_OBSERV_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"IMPORT_OBS_NOTIF_IOR_IDX" ON /*"SYGAL".*/"IMPORT_OBS_RESULT_NOTIF" ("IMPORT_OBSERV_RESULT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"IMPORT_OBS_NOTIF_IO_IDX" ON /*"SYGAL".*/"IMPORT_OBS_NOTIF" ("IMPORT_OBSERV_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"IMPORT_OBS_NOTIF_NR_IDX" ON /*"SYGAL".*/"IMPORT_OBS_RESULT_NOTIF" ("NOTIF_RESULT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"IMPORT_OBS_NOTIF_N_IDX" ON /*"SYGAL".*/"IMPORT_OBS_NOTIF" ("NOTIF_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"INDIVIDU_HCFK_IDX" ON /*"SYGAL".*/"INDIVIDU" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"INDIVIDU_HDFK_IDX" ON /*"SYGAL".*/"INDIVIDU" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"INDIVIDU_HMFK_IDX" ON /*"SYGAL".*/"INDIVIDU" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"INDIVIDU_ROLE_INDIVIDU_IDX" ON /*"SYGAL".*/"INDIVIDU_ROLE" ("INDIVIDU_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"INDIVIDU_ROLE_ROLE_IDX" ON /*"SYGAL".*/"INDIVIDU_ROLE" ("ROLE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"INDIVIDU_ROLE_UNIQUE" ON /*"SYGAL".*/"INDIVIDU_ROLE" ("INDIVIDU_ID", "ROLE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"INDIVIDU_SOURCE_CODE_UNIQ" ON /*"SYGAL".*/"INDIVIDU" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
  CREATE INDEX /*"SYGAL".*/"INDIVIDU_SRC_ID_INDEX" ON /*"SYGAL".*/"INDIVIDU" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"MAIL_CONFIRMATION_CODE_UINDEX" ON /*"SYGAL".*/"MAIL_CONFIRMATION" ("CODE")
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"METADONNEE_THESE_UNIQ" ON /*"SYGAL".*/"METADONNEE_THESE" ("THESE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"NOTIF_RESULT_NOTIF_IDX" ON /*"SYGAL".*/"NOTIF_RESULT" ("NOTIF_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"ORIGINE_FIN_SOURCE_CODE_UN" ON /*"SYGAL".*/"ORIGINE_FINANCEMENT" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"PRIVILEGE_CATEG_IDX" ON /*"SYGAL".*/"PRIVILEGE" ("CATEGORIE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"PRIVILEGE_UNIQUE" ON /*"SYGAL".*/"PRIVILEGE" ("CATEGORIE_ID", "CODE") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"PROFIL_ROLE_ID_UINDEX" ON /*"SYGAL".*/"PROFIL" ("ROLE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"RDV_BU_HC_IDX" ON /*"SYGAL".*/"RDV_BU" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"RDV_BU_HD_IDX" ON /*"SYGAL".*/"RDV_BU" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"RDV_BU_HM_IDX" ON /*"SYGAL".*/"RDV_BU" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"RDV_BU_THESE_IDX" ON /*"SYGAL".*/"RDV_BU" ("THESE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ROLE_PRIVILEGE_PRIVILEGE_IDX" ON /*"SYGAL".*/"ROLE_PRIVILEGE" ("PRIVILEGE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ROLE_PRIVILEGE_ROLE_IDX" ON /*"SYGAL".*/"ROLE_PRIVILEGE" ("ROLE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"ROLE_SOURCE_CODE_UN" ON /*"SYGAL".*/"ROLE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"ROLE_STRUCTURE_ID_IDX" ON /*"SYGAL".*/"ROLE" ("STRUCTURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"ROLE_TYPE_STRUCTURE_ID_IDX" ON /*"SYGAL".*/"ROLE" ("TYPE_STRUCTURE_DEPENDANT_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"SOURCE_CODE_UNIQUE" ON /*"SYGAL".*/"ETABLISSEMENT" ("SOURCE_CODE") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"STRUCTURE_SOURCE_CODE_UN" ON /*"SYGAL".*/"STRUCTURE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"STRUCTURE_TYPE_STR_ID_IDX" ON /*"SYGAL".*/"STRUCTURE" ("TYPE_STRUCTURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"STR_SUBSTIT_STR_TO_IDX" ON /*"SYGAL".*/"STRUCTURE_SUBSTIT" ("TO_STRUCTURE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"STR_SUBSTIT_UNIQUE" ON /*"SYGAL".*/"STRUCTURE_SUBSTIT" ("FROM_STRUCTURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"THESE_ANNEE_UNIV_THESE_ID_IDX" ON /*"SYGAL".*/"THESE_ANNEE_UNIV" ("THESE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"THESE_AN_UNIV_SOURCE_CODE_UN" ON /*"SYGAL".*/"THESE_ANNEE_UNIV" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"THESE_ETAT_INDEX" ON /*"SYGAL".*/"THESE" ("ETAT_THESE") 
  ;
  CREATE INDEX /*"SYGAL".*/"THESE_HCFK_IDX" ON /*"SYGAL".*/"THESE" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"THESE_HDFK_IDX" ON /*"SYGAL".*/"THESE" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"THESE_HMFK_IDX" ON /*"SYGAL".*/"THESE" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"THESE_SOURCE_CODE_UNIQ" ON /*"SYGAL".*/"THESE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"THESE_SRC_ID_INDEX" ON /*"SYGAL".*/"THESE" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"THESE_TITRE_INDEX" ON /*"SYGAL".*/"THESE" ("TITRE") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TITRE_ACCES_SOURCE_CODE_UN" ON /*"SYGAL".*/"TITRE_ACCES" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TITRE_ACCES_THESE_ID_IDX" ON /*"SYGAL".*/"TITRE_ACCES" ("THESE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ACTEUR_SOURCE_CODE_INDEX" ON /*"SYGAL".*/"TMP_ACTEUR" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ACTEUR_SOURCE_ID_INDEX" ON /*"SYGAL".*/"TMP_ACTEUR" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_ACTEUR_UNIQ" ON /*"SYGAL".*/"TMP_ACTEUR" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_DOCTORANT_SOURCE_CODE_IDX" ON /*"SYGAL".*/"TMP_DOCTORANT" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_DOCTORANT_SOURCE_ID_IDX" ON /*"SYGAL".*/"TMP_DOCTORANT" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_DOCTORANT_UNIQ" ON /*"SYGAL".*/"TMP_DOCTORANT" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ECOLE_DOCT_SOURCE_CODE_IDX" ON /*"SYGAL".*/"TMP_ECOLE_DOCT" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ECOLE_DOCT_SOURCE_ID_IDX" ON /*"SYGAL".*/"TMP_ECOLE_DOCT" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ECOLE_DOCT_STRUCT_ID_IDX" ON /*"SYGAL".*/"TMP_ECOLE_DOCT" ("STRUCTURE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_ECOLE_DOCT_UNIQ" ON /*"SYGAL".*/"TMP_ECOLE_DOCT" ("ID", "STRUCTURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ETAB_SOURCE_CODE_IDX" ON /*"SYGAL".*/"TMP_ETABLISSEMENT" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ETAB_SOURCE_ID_IDX" ON /*"SYGAL".*/"TMP_ETABLISSEMENT" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ETAB_STRUCT_ID_IDX" ON /*"SYGAL".*/"TMP_ETABLISSEMENT" ("STRUCTURE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_ETAB_UNIQ" ON /*"SYGAL".*/"TMP_ETABLISSEMENT" ("ID", "STRUCTURE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_FINANCEMENT_UNIQ" ON /*"SYGAL".*/"TMP_FINANCEMENT" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_INDIVIDU_SOURCE_CODE_IDX" ON /*"SYGAL".*/"TMP_INDIVIDU" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_INDIVIDU_SOURCE_ID_IDX" ON /*"SYGAL".*/"TMP_INDIVIDU" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_INDIVIDU_UNIQ" ON /*"SYGAL".*/"TMP_INDIVIDU" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_ORIGINE_FINANCEMENT_UNIQ" ON /*"SYGAL".*/"TMP_ORIGINE_FINANCEMENT" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ROLE_SOURCE_CODE_INDEX" ON /*"SYGAL".*/"TMP_ROLE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_ROLE_SOURCE_ID_INDEX" ON /*"SYGAL".*/"TMP_ROLE" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_ROLE_UNIQ" ON /*"SYGAL".*/"TMP_ROLE" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_STRUCTURE_SOURCE_CODE_IDX" ON /*"SYGAL".*/"TMP_STRUCTURE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_STRUCTURE_SOURCE_ID_IDX" ON /*"SYGAL".*/"TMP_STRUCTURE" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_STRUCTURE_TYPE_ID_IDX" ON /*"SYGAL".*/"TMP_STRUCTURE" ("TYPE_STRUCTURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_THESE_ANNEE_U_SRC_COD_IDX" ON /*"SYGAL".*/"TMP_THESE_ANNEE_UNIV" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_THESE_ANNEE_U_SRC_ID_IDX" ON /*"SYGAL".*/"TMP_THESE_ANNEE_UNIV" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_THESE_ANNEE_U_UNIQ" ON /*"SYGAL".*/"TMP_THESE_ANNEE_UNIV" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_THESE_SOURCE_CODE_INDEX" ON /*"SYGAL".*/"TMP_THESE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_THESE_SOURCE_ID_INDEX" ON /*"SYGAL".*/"TMP_THESE" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_THESE_UNIQ" ON /*"SYGAL".*/"TMP_THESE" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_TITRE_ACCES_SOURCE_COD_IDX" ON /*"SYGAL".*/"TMP_TITRE_ACCES" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_TITRE_ACCES_SOURCE_ID_IDX" ON /*"SYGAL".*/"TMP_TITRE_ACCES" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_TITRE_ACCES_UNIQ" ON /*"SYGAL".*/"TMP_TITRE_ACCES" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_UNITE_RECH_SOURCE_CODE_IDX" ON /*"SYGAL".*/"TMP_UNITE_RECH" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_UNITE_RECH_SOURCE_ID_IDX" ON /*"SYGAL".*/"TMP_UNITE_RECH" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_UNITE_RECH_STRUCT_ID_IDX" ON /*"SYGAL".*/"TMP_UNITE_RECH" ("STRUCTURE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_UNITE_RECH_UNIQ" ON /*"SYGAL".*/"TMP_UNITE_RECH" ("ID", "STRUCTURE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_VARIABLE_SOURCE_CODE_INDEX" ON /*"SYGAL".*/"TMP_VARIABLE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"TMP_VARIABLE_SOURCE_ID_INDEX" ON /*"SYGAL".*/"TMP_VARIABLE" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TMP_VARIABLE_UNIQ" ON /*"SYGAL".*/"TMP_VARIABLE" ("ID", "ETABLISSEMENT_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TYPE_STRUCTURE_UN" ON /*"SYGAL".*/"TYPE_STRUCTURE" ("CODE") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"TYPE_VALIDATION_UN" ON /*"SYGAL".*/"TYPE_VALIDATION" ("CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"UNITE_RECH_HC_IDX" ON /*"SYGAL".*/"UNITE_RECH" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"UNITE_RECH_HD_IDX" ON /*"SYGAL".*/"UNITE_RECH" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"UNITE_RECH_HM_IDX" ON /*"SYGAL".*/"UNITE_RECH" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"UNITE_RECH_SOURCE_CODE_UN" ON /*"SYGAL".*/"UNITE_RECH" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"UNITE_RECH_SOURCE_IDX" ON /*"SYGAL".*/"UNITE_RECH" ("SOURCE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"UNITE_RECH_STRUCT_ID_IDX" ON /*"SYGAL".*/"UNITE_RECH" ("STRUCTURE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"UTILIS_PASSWORD_RESET_TOKEN_UN" ON /*"SYGAL".*/"UTILISATEUR" ("PASSWORD_RESET_TOKEN") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDATION_HCFK_IDX" ON /*"SYGAL".*/"VALIDATION" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDATION_HDFK_IDX" ON /*"SYGAL".*/"VALIDATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDATION_HMFK_IDX" ON /*"SYGAL".*/"VALIDATION" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDATION_INDIVIDU_IDX" ON /*"SYGAL".*/"VALIDATION" ("INDIVIDU_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDATION_THESE_IDX" ON /*"SYGAL".*/"VALIDATION" ("THESE_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDATION_TYPE_IDX" ON /*"SYGAL".*/"VALIDATION" ("TYPE_VALIDATION_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"VALIDATION_UN" ON /*"SYGAL".*/"VALIDATION" ("TYPE_VALIDATION_ID", "THESE_ID", "HISTO_DESTRUCTION", "INDIVIDU_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDITE_FICHIER_FICHIER_IDX" ON /*"SYGAL".*/"VALIDITE_FICHIER" ("FICHIER_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDITE_FICHIER_HCFK_IDX" ON /*"SYGAL".*/"VALIDITE_FICHIER" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDITE_FICHIER_HDFK_IDX" ON /*"SYGAL".*/"VALIDITE_FICHIER" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VALIDITE_FICHIER_HMFK_IDX" ON /*"SYGAL".*/"VALIDITE_FICHIER" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"VARIABLE_CODE_UNIQ" ON /*"SYGAL".*/"VARIABLE" ("CODE", "ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VARIABLE_ETABLISSEMENT_IDX" ON /*"SYGAL".*/"VARIABLE" ("ETABLISSEMENT_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VARIABLE_HC_IDX" ON /*"SYGAL".*/"VARIABLE" ("HISTO_CREATEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VARIABLE_HD_IDX" ON /*"SYGAL".*/"VARIABLE" ("HISTO_DESTRUCTEUR_ID") 
  ;
  CREATE INDEX /*"SYGAL".*/"VARIABLE_HM_IDX" ON /*"SYGAL".*/"VARIABLE" ("HISTO_MODIFICATEUR_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"VARIABLE_SOURCE_CODE_UNIQ" ON /*"SYGAL".*/"VARIABLE" ("SOURCE_CODE") 
  ;
  CREATE INDEX /*"SYGAL".*/"VARIABLE_SOURCE_IDX" ON /*"SYGAL".*/"VARIABLE" ("SOURCE_ID") 
  ;
  CREATE UNIQUE INDEX /*"SYGAL".*/"VERSION_FICHIER_UNIQ_CODE" ON /*"SYGAL".*/"VERSION_FICHIER" ("CODE") 
  ;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_ACTEUR" ("ID", "SOURCE_CODE", "SOURCE_ID", "INDIVIDU_ID", "THESE_ID", "ROLE_ID", "ACTEUR_ETABLISSEMENT_ID", "QUALITE", "LIB_ROLE_COMPL") AS 
  SELECT
  NULL                                     AS id,
  tmp.SOURCE_CODE,
  src.ID                                   AS SOURCE_ID,
  i.id                                     AS INDIVIDU_ID,
  t.id                                     AS THESE_ID,
  r.id                                     AS ROLE_ID,
  coalesce(etab_substit.id, eact.id)       AS ACTEUR_ETABLISSEMENT_ID,
  tmp.LIB_CPS                              AS QUALITE,
  tmp.LIB_ROJ_COMPL                        AS LIB_ROLE_COMPL
FROM TMP_ACTEUR tmp
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN INDIVIDU i ON i.SOURCE_CODE = tmp.INDIVIDU_ID
       JOIN THESE t ON t.SOURCE_CODE = tmp.THESE_ID
       JOIN ROLE r ON r.SOURCE_CODE = tmp.ROLE_ID
       LEFT JOIN ETABLISSEMENT eact ON eact.SOURCE_CODE = tmp.ACTEUR_ETABLISSEMENT_ID
       LEFT JOIN STRUCTURE_SUBSTIT ss_ed on ss_ed.FROM_STRUCTURE_ID = eact.STRUCTURE_ID
       LEFT JOIN ETABLISSEMENT etab_substit on etab_substit.STRUCTURE_ID = ss_ed.TO_STRUCTURE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_DOCTORANT" ("ID", "SOURCE_CODE", "INE", "SOURCE_ID", "INDIVIDU_ID", "ETABLISSEMENT_ID") AS 
  SELECT
    NULL                                     AS id,
    tmp.SOURCE_CODE,
    tmp.INE,
    src.id                                   AS source_id,
    i.id                                     AS individu_id,
    e.id                                     AS etablissement_id
FROM TMP_DOCTORANT tmp
         JOIN STRUCTURE s ON s.SOURCE_CODE = tmp.ETABLISSEMENT_ID
         JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
         JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
         JOIN INDIVIDU i ON i.SOURCE_CODE = tmp.INDIVIDU_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_ECOLE_DOCT" ("ID", "SOURCE_CODE", "SOURCE_ID", "STRUCTURE_ID") AS 
  SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  src.id            AS SOURCE_ID,
  s.ID              as STRUCTURE_ID
FROM TMP_ECOLE_DOCT tmp
       JOIN STRUCTURE s on s.SOURCE_CODE = tmp.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_ETABLISSEMENT" ("ID", "SOURCE_CODE", "SOURCE_ID", "STRUCTURE_ID") AS 
  SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  src.id            AS SOURCE_ID,
  s.ID              as STRUCTURE_ID
FROM TMP_ETABLISSEMENT tmp
       JOIN STRUCTURE s on s.SOURCE_CODE = tmp.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_FINANCEMENT" ("ID", "SOURCE_CODE", "SOURCE_ID", "THESE_ID", "ANNEE", "ORIGINE_FINANCEMENT_ID", "COMPLEMENT_FINANCEMENT", "QUOTITE_FINANCEMENT", "DATE_DEBUT", "DATE_FIN", "CODE_TYPE_FINANCEMENT", "LIBELLE_TYPE_FINANCEMENT") AS 
  SELECT
    NULL                  AS id,
    tmp.SOURCE_CODE       AS SOURCE_CODE,
    src.ID                AS source_id,
    --e.id                  AS etablissement_id,
    t.id                  AS THESE_ID,
    to_number(tmp.ANNEE)  AS ANNEE,
    ofi.id                AS ORIGINE_FINANCEMENT_ID,
    tmp.COMPLEMENT_FINANCEMENT,
    tmp.QUOTITE_FINANCEMENT,
    tmp.DATE_DEBUT_FINANCEMENT as DATE_DEBUT,
    tmp.DATE_FIN_FINANCEMENT as DATE_FIN,
    tmp.CODE_TYPE_FINANCEMENT,
    tmp.LIBELLE_TYPE_FINANCEMENT
FROM TMP_FINANCEMENT tmp
         JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
         JOIN THESE t on t.SOURCE_CODE = tmp.THESE_ID
         JOIN ORIGINE_FINANCEMENT ofi on ofi.SOURCE_CODE = tmp.ORIGINE_FINANCEMENT_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_INDIVIDU" ("ID", "SOURCE_CODE", "SOURCE_ID", "TYPE", "SUPANN_ID", "CIVILITE", "NOM_USUEL", "NOM_PATRONYMIQUE", "PRENOM1", "PRENOM2", "PRENOM3", "EMAIL", "DATE_NAISSANCE", "NATIONALITE") AS 
  SELECT
  NULL                                     AS id,
  tmp.SOURCE_CODE,
  src.id                                   AS SOURCE_ID,
  TYPE,
  SUPANN_ID,
  civ                                      AS CIVILITE,
  lib_nom_usu_ind                          AS NOM_USUEL,
  lib_nom_pat_ind                          AS NOM_PATRONYMIQUE,
  lib_pr1_ind                              AS PRENOM1,
  lib_pr2_ind                              AS PRENOM2,
  lib_pr3_ind                              AS PRENOM3,
  EMAIL,
  dat_nai_per                              AS DATE_NAISSANCE,
  lib_nat                                  AS NATIONALITE
FROM TMP_INDIVIDU tmp
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_ROLE" ("ID", "SOURCE_CODE", "SOURCE_ID", "LIBELLE", "CODE", "ROLE_ID", "THESE_DEP", "STRUCTURE_ID", "TYPE_STRUCTURE_DEPENDANT_ID") AS 
  SELECT
  NULL                       AS id,
  tmp.SOURCE_CODE            AS SOURCE_CODE,
  src.ID                     AS source_id,
  --e.id                       AS etablissement_id,
  tmp.LIB_ROJ                AS libelle,
  to_char(tmp.id)            AS code,
  tmp.LIB_ROJ||' '||s.CODE   AS role_id,
  1                          AS these_dep,
  s.ID                       AS STRUCTURE_ID,
  NULL                       AS TYPE_STRUCTURE_DEPENDANT_ID
FROM TMP_ROLE tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN STRUCTURE s ON s.id = e.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_STRUCTURE" ("ID", "SOURCE_CODE", "CODE", "SOURCE_ID", "TYPE_STRUCTURE_ID", "SIGLE", "LIBELLE", "CODE_PAYS", "LIBELLE_PAYS") AS 
  SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  tmp.id            as CODE,
  src.id            AS SOURCE_ID,
  ts.id             as TYPE_STRUCTURE_ID,
  tmp.SIGLE,
  tmp.LIBELLE,
  tmp.CODE_PAYS,
  tmp.LIBELLE_PAYS
FROM TMP_STRUCTURE tmp
       JOIN TYPE_STRUCTURE ts on ts.CODE = tmp.TYPE_STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_THESE" ("ID", "SOURCE_CODE", "SOURCE_ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "ECOLE_DOCT_ID_ORIG", "UNITE_RECH_ID_ORIG", "TITRE", "ETAT_THESE", "RESULTAT", "LIB_DISC", "DATE_PREM_INSC", "ANNEE_UNIV_1ERE_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "DATE_FIN_CONFID", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "CORREC_AUTORISEE", "SOUTENANCE_AUTORIS", "DATE_AUTORIS_SOUTENANCE", "TEM_AVENANT_COTUT", "DATE_ABANDON", "DATE_TRANSFERT") AS 
  select
    null                            as id,
    tmp.source_code                 as source_code,
    src.id                          as source_id,
    e.id                            as etablissement_id,
    d.id                            as doctorant_id,
    coalesce(ed_substit.id, ed.id)  as ecole_doct_id,
    coalesce(ur_substit.id, ur.id)  as unite_rech_id,
    ed.id                           as ecole_doct_id_orig,
    ur.id                           as unite_rech_id_orig,
    tmp.lib_ths                     as titre,
    tmp.eta_ths                     as etat_these,
    to_number(tmp.cod_neg_tre)      as resultat,
    tmp.lib_int1_dis                as lib_disc,
    tmp.dat_deb_ths                 as date_prem_insc,
    tmp.ANNEE_UNIV_1ERE_INSC        as annee_univ_1ere_insc, -- deprecated
    tmp.dat_prev_sou                as date_prev_soutenance,
    tmp.dat_sou_ths                 as date_soutenance,
    tmp.dat_fin_cfd_ths             as date_fin_confid,
    tmp.lib_etab_cotut              as lib_etab_cotut,
    tmp.lib_pays_cotut              as lib_pays_cotut,
    tmp.correction_possible         as correc_autorisee,
    tem_sou_aut_ths                 as soutenance_autoris,
    dat_aut_sou_ths                 as date_autoris_soutenance,
    tem_avenant_cotut               as tem_avenant_cotut,
    dat_abandon                     as date_abandon,
    dat_transfert_dep               as date_transfert
from tmp_these tmp
         JOIN STRUCTURE s ON s.SOURCE_CODE = tmp.ETABLISSEMENT_ID
         join etablissement e on e.structure_id = s.id
         join source src on src.code = tmp.source_id
         join doctorant d on d.source_code = tmp.doctorant_id
         left join ecole_doct ed on ed.source_code = tmp.ecole_doct_id
         left join unite_rech ur on ur.source_code = tmp.unite_rech_id
         left join structure_substit ss_ed on ss_ed.from_structure_id = ed.structure_id
         left join ecole_doct ed_substit on ed_substit.structure_id = ss_ed.to_structure_id
         left join structure_substit ss_ur on ss_ur.from_structure_id = ur.structure_id
         left join unite_rech ur_substit on ur_substit.structure_id = ss_ur.to_structure_id;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_THESE_ANNEE_UNIV" ("ID", "SOURCE_CODE", "SOURCE_ID", "THESE_ID", "ANNEE_UNIV") AS 
  SELECT
  NULL                 AS id,
  tmp.SOURCE_CODE   AS SOURCE_CODE,
  src.ID            AS source_id,
  --e.id              AS etablissement_id,
  t.id              AS these_id,
  tmp.ANNEE_UNIV
FROM TMP_THESE_ANNEE_UNIV tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN THESE t ON t.SOURCE_CODE = tmp.THESE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_TITRE_ACCES" ("ID", "SOURCE_CODE", "SOURCE_ID", "THESE_ID", "TITRE_ACCES_INTERNE_EXTERNE", "LIBELLE_TITRE_ACCES", "TYPE_ETB_TITRE_ACCES", "LIBELLE_ETB_TITRE_ACCES", "CODE_DEPT_TITRE_ACCES", "CODE_PAYS_TITRE_ACCES") AS 
  SELECT
  NULL                 AS id,
  tmp.SOURCE_CODE   AS SOURCE_CODE,
  src.ID            AS source_id,
  --e.id              AS etablissement_id,
  t.id              AS these_id,
  tmp.TITRE_ACCES_INTERNE_EXTERNE,
  tmp.LIBELLE_TITRE_ACCES,
  tmp.TYPE_ETB_TITRE_ACCES,
  tmp.LIBELLE_ETB_TITRE_ACCES,
  tmp.CODE_DEPT_TITRE_ACCES,
  tmp.CODE_PAYS_TITRE_ACCES
FROM TMP_TITRE_ACCES tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN THESE t ON t.SOURCE_CODE = tmp.THESE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_UNITE_RECH" ("ID", "SOURCE_CODE", "SOURCE_ID", "STRUCTURE_ID") AS 
  SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  src.id            AS SOURCE_ID,
  s.ID              as STRUCTURE_ID
FROM TMP_UNITE_RECH tmp
       JOIN STRUCTURE s on s.SOURCE_CODE = tmp.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"SRC_VARIABLE" ("ID", "SOURCE_CODE", "SOURCE_ID", "ETABLISSEMENT_ID", "CODE", "DESCRIPTION", "VALEUR", "DATE_DEB_VALIDITE", "DATE_FIN_VALIDITE") AS 
  SELECT
  NULL                   AS id,
  tmp.SOURCE_CODE,
  src.ID                 AS SOURCE_ID,
  e.id                   AS ETABLISSEMENT_ID,
  tmp.COD_VAP            AS CODE,
  tmp.lib_vap            AS DESCRIPTION,
  tmp.par_vap            AS VALEUR,
  tmp.DATE_DEB_VALIDITE,
  tmp.DATE_FIN_VALIDITE
FROM TMP_VARIABLE tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_ACTEUR" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ACTEUR_ETABLISSEMENT_ID", "INDIVIDU_ID", "LIB_ROLE_COMPL", "QUALITE", "ROLE_ID", "THESE_ID", "U_ACTEUR_ETABLISSEMENT_ID", "U_INDIVIDU_ID", "U_LIB_ROLE_COMPL", "U_QUALITE", "U_ROLE_ID", "U_THESE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ACTEUR_ETABLISSEMENT_ID",diff."INDIVIDU_ID",diff."LIB_ROLE_COMPL",diff."QUALITE",diff."ROLE_ID",diff."THESE_ID",diff."U_ACTEUR_ETABLISSEMENT_ID",diff."U_INDIVIDU_ID",diff."U_LIB_ROLE_COMPL",diff."U_QUALITE",diff."U_ROLE_ID",diff."U_THESE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ACTEUR_ETABLISSEMENT_ID ELSE S.ACTEUR_ETABLISSEMENT_ID END ACTEUR_ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INDIVIDU_ID ELSE S.INDIVIDU_ID END INDIVIDU_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_ROLE_COMPL ELSE S.LIB_ROLE_COMPL END LIB_ROLE_COMPL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.QUALITE ELSE S.QUALITE END QUALITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ROLE_ID ELSE S.ROLE_ID END ROLE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN D.ACTEUR_ETABLISSEMENT_ID <> S.ACTEUR_ETABLISSEMENT_ID OR (D.ACTEUR_ETABLISSEMENT_ID IS NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NOT NULL) OR (D.ACTEUR_ETABLISSEMENT_ID IS NOT NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ACTEUR_ETABLISSEMENT_ID,
    CASE WHEN D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL) THEN 1 ELSE 0 END U_INDIVIDU_ID,
    CASE WHEN D.LIB_ROLE_COMPL <> S.LIB_ROLE_COMPL OR (D.LIB_ROLE_COMPL IS NULL AND S.LIB_ROLE_COMPL IS NOT NULL) OR (D.LIB_ROLE_COMPL IS NOT NULL AND S.LIB_ROLE_COMPL IS NULL) THEN 1 ELSE 0 END U_LIB_ROLE_COMPL,
    CASE WHEN D.QUALITE <> S.QUALITE OR (D.QUALITE IS NULL AND S.QUALITE IS NOT NULL) OR (D.QUALITE IS NOT NULL AND S.QUALITE IS NULL) THEN 1 ELSE 0 END U_QUALITE,
    CASE WHEN D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL) THEN 1 ELSE 0 END U_ROLE_ID,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID
FROM
  ACTEUR D
  FULL JOIN SRC_ACTEUR S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ACTEUR_ETABLISSEMENT_ID <> S.ACTEUR_ETABLISSEMENT_ID OR (D.ACTEUR_ETABLISSEMENT_ID IS NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NOT NULL) OR (D.ACTEUR_ETABLISSEMENT_ID IS NOT NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NULL)
  OR D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL)
  OR D.LIB_ROLE_COMPL <> S.LIB_ROLE_COMPL OR (D.LIB_ROLE_COMPL IS NULL AND S.LIB_ROLE_COMPL IS NOT NULL) OR (D.LIB_ROLE_COMPL IS NOT NULL AND S.LIB_ROLE_COMPL IS NULL)
  OR D.QUALITE <> S.QUALITE OR (D.QUALITE IS NULL AND S.QUALITE IS NOT NULL) OR (D.QUALITE IS NOT NULL AND S.QUALITE IS NULL)
  OR D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_DOCTORANT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ETABLISSEMENT_ID", "INDIVIDU_ID", "INE", "U_ETABLISSEMENT_ID", "U_INDIVIDU_ID", "U_INE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ETABLISSEMENT_ID",diff."INDIVIDU_ID",diff."INE",diff."U_ETABLISSEMENT_ID",diff."U_INDIVIDU_ID",diff."U_INE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETABLISSEMENT_ID ELSE S.ETABLISSEMENT_ID END ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INDIVIDU_ID ELSE S.INDIVIDU_ID END INDIVIDU_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INE ELSE S.INE END INE,
    CASE WHEN D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ETABLISSEMENT_ID,
    CASE WHEN D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL) THEN 1 ELSE 0 END U_INDIVIDU_ID,
    CASE WHEN D.INE <> S.INE OR (D.INE IS NULL AND S.INE IS NOT NULL) OR (D.INE IS NOT NULL AND S.INE IS NULL) THEN 1 ELSE 0 END U_INE
FROM
  DOCTORANT D
  FULL JOIN SRC_DOCTORANT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL)
  OR D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL)
  OR D.INE <> S.INE OR (D.INE IS NULL AND S.INE IS NOT NULL) OR (D.INE IS NOT NULL AND S.INE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_ECOLE_DOCT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "STRUCTURE_ID", "U_STRUCTURE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."STRUCTURE_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  ECOLE_DOCT D
  FULL JOIN SRC_ECOLE_DOCT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_ETABLISSEMENT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "STRUCTURE_ID", "U_STRUCTURE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."STRUCTURE_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  ETABLISSEMENT D
  FULL JOIN SRC_ETABLISSEMENT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_FINANCEMENT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE", "CODE_TYPE_FINANCEMENT", "COMPLEMENT_FINANCEMENT", "DATE_DEBUT", "DATE_FIN", "LIBELLE_TYPE_FINANCEMENT", "ORIGINE_FINANCEMENT_ID", "QUOTITE_FINANCEMENT", "THESE_ID", "U_ANNEE", "U_CODE_TYPE_FINANCEMENT", "U_COMPLEMENT_FINANCEMENT", "U_DATE_DEBUT", "U_DATE_FIN", "U_LIBELLE_TYPE_FINANCEMENT", "U_ORIGINE_FINANCEMENT_ID", "U_QUOTITE_FINANCEMENT", "U_THESE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE",diff."CODE_TYPE_FINANCEMENT",diff."COMPLEMENT_FINANCEMENT",diff."DATE_DEBUT",diff."DATE_FIN",diff."LIBELLE_TYPE_FINANCEMENT",diff."ORIGINE_FINANCEMENT_ID",diff."QUOTITE_FINANCEMENT",diff."THESE_ID",diff."U_ANNEE",diff."U_CODE_TYPE_FINANCEMENT",diff."U_COMPLEMENT_FINANCEMENT",diff."U_DATE_DEBUT",diff."U_DATE_FIN",diff."U_LIBELLE_TYPE_FINANCEMENT",diff."U_ORIGINE_FINANCEMENT_ID",diff."U_QUOTITE_FINANCEMENT",diff."U_THESE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE ELSE S.ANNEE END ANNEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_TYPE_FINANCEMENT ELSE S.CODE_TYPE_FINANCEMENT END CODE_TYPE_FINANCEMENT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.COMPLEMENT_FINANCEMENT ELSE S.COMPLEMENT_FINANCEMENT END COMPLEMENT_FINANCEMENT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_DEBUT ELSE S.DATE_DEBUT END DATE_DEBUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_FIN ELSE S.DATE_FIN END DATE_FIN,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_TYPE_FINANCEMENT ELSE S.LIBELLE_TYPE_FINANCEMENT END LIBELLE_TYPE_FINANCEMENT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ORIGINE_FINANCEMENT_ID ELSE S.ORIGINE_FINANCEMENT_ID END ORIGINE_FINANCEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.QUOTITE_FINANCEMENT ELSE S.QUOTITE_FINANCEMENT END QUOTITE_FINANCEMENT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN D.ANNEE <> S.ANNEE OR (D.ANNEE IS NULL AND S.ANNEE IS NOT NULL) OR (D.ANNEE IS NOT NULL AND S.ANNEE IS NULL) THEN 1 ELSE 0 END U_ANNEE,
    CASE WHEN D.CODE_TYPE_FINANCEMENT <> S.CODE_TYPE_FINANCEMENT OR (D.CODE_TYPE_FINANCEMENT IS NULL AND S.CODE_TYPE_FINANCEMENT IS NOT NULL) OR (D.CODE_TYPE_FINANCEMENT IS NOT NULL AND S.CODE_TYPE_FINANCEMENT IS NULL) THEN 1 ELSE 0 END U_CODE_TYPE_FINANCEMENT,
    CASE WHEN D.COMPLEMENT_FINANCEMENT <> S.COMPLEMENT_FINANCEMENT OR (D.COMPLEMENT_FINANCEMENT IS NULL AND S.COMPLEMENT_FINANCEMENT IS NOT NULL) OR (D.COMPLEMENT_FINANCEMENT IS NOT NULL AND S.COMPLEMENT_FINANCEMENT IS NULL) THEN 1 ELSE 0 END U_COMPLEMENT_FINANCEMENT,
    CASE WHEN D.DATE_DEBUT <> S.DATE_DEBUT OR (D.DATE_DEBUT IS NULL AND S.DATE_DEBUT IS NOT NULL) OR (D.DATE_DEBUT IS NOT NULL AND S.DATE_DEBUT IS NULL) THEN 1 ELSE 0 END U_DATE_DEBUT,
    CASE WHEN D.DATE_FIN <> S.DATE_FIN OR (D.DATE_FIN IS NULL AND S.DATE_FIN IS NOT NULL) OR (D.DATE_FIN IS NOT NULL AND S.DATE_FIN IS NULL) THEN 1 ELSE 0 END U_DATE_FIN,
    CASE WHEN D.LIBELLE_TYPE_FINANCEMENT <> S.LIBELLE_TYPE_FINANCEMENT OR (D.LIBELLE_TYPE_FINANCEMENT IS NULL AND S.LIBELLE_TYPE_FINANCEMENT IS NOT NULL) OR (D.LIBELLE_TYPE_FINANCEMENT IS NOT NULL AND S.LIBELLE_TYPE_FINANCEMENT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_TYPE_FINANCEMENT,
    CASE WHEN D.ORIGINE_FINANCEMENT_ID <> S.ORIGINE_FINANCEMENT_ID OR (D.ORIGINE_FINANCEMENT_ID IS NULL AND S.ORIGINE_FINANCEMENT_ID IS NOT NULL) OR (D.ORIGINE_FINANCEMENT_ID IS NOT NULL AND S.ORIGINE_FINANCEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ORIGINE_FINANCEMENT_ID,
    CASE WHEN D.QUOTITE_FINANCEMENT <> S.QUOTITE_FINANCEMENT OR (D.QUOTITE_FINANCEMENT IS NULL AND S.QUOTITE_FINANCEMENT IS NOT NULL) OR (D.QUOTITE_FINANCEMENT IS NOT NULL AND S.QUOTITE_FINANCEMENT IS NULL) THEN 1 ELSE 0 END U_QUOTITE_FINANCEMENT,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID
FROM
  FINANCEMENT D
  FULL JOIN SRC_FINANCEMENT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE <> S.ANNEE OR (D.ANNEE IS NULL AND S.ANNEE IS NOT NULL) OR (D.ANNEE IS NOT NULL AND S.ANNEE IS NULL)
  OR D.CODE_TYPE_FINANCEMENT <> S.CODE_TYPE_FINANCEMENT OR (D.CODE_TYPE_FINANCEMENT IS NULL AND S.CODE_TYPE_FINANCEMENT IS NOT NULL) OR (D.CODE_TYPE_FINANCEMENT IS NOT NULL AND S.CODE_TYPE_FINANCEMENT IS NULL)
  OR D.COMPLEMENT_FINANCEMENT <> S.COMPLEMENT_FINANCEMENT OR (D.COMPLEMENT_FINANCEMENT IS NULL AND S.COMPLEMENT_FINANCEMENT IS NOT NULL) OR (D.COMPLEMENT_FINANCEMENT IS NOT NULL AND S.COMPLEMENT_FINANCEMENT IS NULL)
  OR D.DATE_DEBUT <> S.DATE_DEBUT OR (D.DATE_DEBUT IS NULL AND S.DATE_DEBUT IS NOT NULL) OR (D.DATE_DEBUT IS NOT NULL AND S.DATE_DEBUT IS NULL)
  OR D.DATE_FIN <> S.DATE_FIN OR (D.DATE_FIN IS NULL AND S.DATE_FIN IS NOT NULL) OR (D.DATE_FIN IS NOT NULL AND S.DATE_FIN IS NULL)
  OR D.LIBELLE_TYPE_FINANCEMENT <> S.LIBELLE_TYPE_FINANCEMENT OR (D.LIBELLE_TYPE_FINANCEMENT IS NULL AND S.LIBELLE_TYPE_FINANCEMENT IS NOT NULL) OR (D.LIBELLE_TYPE_FINANCEMENT IS NOT NULL AND S.LIBELLE_TYPE_FINANCEMENT IS NULL)
  OR D.ORIGINE_FINANCEMENT_ID <> S.ORIGINE_FINANCEMENT_ID OR (D.ORIGINE_FINANCEMENT_ID IS NULL AND S.ORIGINE_FINANCEMENT_ID IS NOT NULL) OR (D.ORIGINE_FINANCEMENT_ID IS NOT NULL AND S.ORIGINE_FINANCEMENT_ID IS NULL)
  OR D.QUOTITE_FINANCEMENT <> S.QUOTITE_FINANCEMENT OR (D.QUOTITE_FINANCEMENT IS NULL AND S.QUOTITE_FINANCEMENT IS NOT NULL) OR (D.QUOTITE_FINANCEMENT IS NOT NULL AND S.QUOTITE_FINANCEMENT IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_INDIVIDU" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CIVILITE", "DATE_NAISSANCE", "EMAIL", "NATIONALITE", "NOM_PATRONYMIQUE", "NOM_USUEL", "PRENOM1", "PRENOM2", "PRENOM3", "SUPANN_ID", "TYPE", "U_CIVILITE", "U_DATE_NAISSANCE", "U_EMAIL", "U_NATIONALITE", "U_NOM_PATRONYMIQUE", "U_NOM_USUEL", "U_PRENOM1", "U_PRENOM2", "U_PRENOM3", "U_SUPANN_ID", "U_TYPE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CIVILITE",diff."DATE_NAISSANCE",diff."EMAIL",diff."NATIONALITE",diff."NOM_PATRONYMIQUE",diff."NOM_USUEL",diff."PRENOM1",diff."PRENOM2",diff."PRENOM3",diff."SUPANN_ID",diff."TYPE",diff."U_CIVILITE",diff."U_DATE_NAISSANCE",diff."U_EMAIL",diff."U_NATIONALITE",diff."U_NOM_PATRONYMIQUE",diff."U_NOM_USUEL",diff."U_PRENOM1",diff."U_PRENOM2",diff."U_PRENOM3",diff."U_SUPANN_ID",diff."U_TYPE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CIVILITE ELSE S.CIVILITE END CIVILITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_NAISSANCE ELSE S.DATE_NAISSANCE END DATE_NAISSANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.EMAIL ELSE S.EMAIL END EMAIL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NATIONALITE ELSE S.NATIONALITE END NATIONALITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_PATRONYMIQUE ELSE S.NOM_PATRONYMIQUE END NOM_PATRONYMIQUE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_USUEL ELSE S.NOM_USUEL END NOM_USUEL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM1 ELSE S.PRENOM1 END PRENOM1,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM2 ELSE S.PRENOM2 END PRENOM2,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM3 ELSE S.PRENOM3 END PRENOM3,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SUPANN_ID ELSE S.SUPANN_ID END SUPANN_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE ELSE S.TYPE END TYPE,
    CASE WHEN D.CIVILITE <> S.CIVILITE OR (D.CIVILITE IS NULL AND S.CIVILITE IS NOT NULL) OR (D.CIVILITE IS NOT NULL AND S.CIVILITE IS NULL) THEN 1 ELSE 0 END U_CIVILITE,
    CASE WHEN D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL) THEN 1 ELSE 0 END U_DATE_NAISSANCE,
    CASE WHEN D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL) THEN 1 ELSE 0 END U_EMAIL,
    CASE WHEN D.NATIONALITE <> S.NATIONALITE OR (D.NATIONALITE IS NULL AND S.NATIONALITE IS NOT NULL) OR (D.NATIONALITE IS NOT NULL AND S.NATIONALITE IS NULL) THEN 1 ELSE 0 END U_NATIONALITE,
    CASE WHEN D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL) THEN 1 ELSE 0 END U_NOM_PATRONYMIQUE,
    CASE WHEN D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL) THEN 1 ELSE 0 END U_NOM_USUEL,
    CASE WHEN D.PRENOM1 <> S.PRENOM1 OR (D.PRENOM1 IS NULL AND S.PRENOM1 IS NOT NULL) OR (D.PRENOM1 IS NOT NULL AND S.PRENOM1 IS NULL) THEN 1 ELSE 0 END U_PRENOM1,
    CASE WHEN D.PRENOM2 <> S.PRENOM2 OR (D.PRENOM2 IS NULL AND S.PRENOM2 IS NOT NULL) OR (D.PRENOM2 IS NOT NULL AND S.PRENOM2 IS NULL) THEN 1 ELSE 0 END U_PRENOM2,
    CASE WHEN D.PRENOM3 <> S.PRENOM3 OR (D.PRENOM3 IS NULL AND S.PRENOM3 IS NOT NULL) OR (D.PRENOM3 IS NOT NULL AND S.PRENOM3 IS NULL) THEN 1 ELSE 0 END U_PRENOM3,
    CASE WHEN D.SUPANN_ID <> S.SUPANN_ID OR (D.SUPANN_ID IS NULL AND S.SUPANN_ID IS NOT NULL) OR (D.SUPANN_ID IS NOT NULL AND S.SUPANN_ID IS NULL) THEN 1 ELSE 0 END U_SUPANN_ID,
    CASE WHEN D.TYPE <> S.TYPE OR (D.TYPE IS NULL AND S.TYPE IS NOT NULL) OR (D.TYPE IS NOT NULL AND S.TYPE IS NULL) THEN 1 ELSE 0 END U_TYPE
FROM
  INDIVIDU D
  FULL JOIN SRC_INDIVIDU S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CIVILITE <> S.CIVILITE OR (D.CIVILITE IS NULL AND S.CIVILITE IS NOT NULL) OR (D.CIVILITE IS NOT NULL AND S.CIVILITE IS NULL)
  OR D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL)
  OR D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL)
  OR D.NATIONALITE <> S.NATIONALITE OR (D.NATIONALITE IS NULL AND S.NATIONALITE IS NOT NULL) OR (D.NATIONALITE IS NOT NULL AND S.NATIONALITE IS NULL)
  OR D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL)
  OR D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL)
  OR D.PRENOM1 <> S.PRENOM1 OR (D.PRENOM1 IS NULL AND S.PRENOM1 IS NOT NULL) OR (D.PRENOM1 IS NOT NULL AND S.PRENOM1 IS NULL)
  OR D.PRENOM2 <> S.PRENOM2 OR (D.PRENOM2 IS NULL AND S.PRENOM2 IS NOT NULL) OR (D.PRENOM2 IS NOT NULL AND S.PRENOM2 IS NULL)
  OR D.PRENOM3 <> S.PRENOM3 OR (D.PRENOM3 IS NULL AND S.PRENOM3 IS NOT NULL) OR (D.PRENOM3 IS NOT NULL AND S.PRENOM3 IS NULL)
  OR D.SUPANN_ID <> S.SUPANN_ID OR (D.SUPANN_ID IS NULL AND S.SUPANN_ID IS NOT NULL) OR (D.SUPANN_ID IS NOT NULL AND S.SUPANN_ID IS NULL)
  OR D.TYPE <> S.TYPE OR (D.TYPE IS NULL AND S.TYPE IS NOT NULL) OR (D.TYPE IS NOT NULL AND S.TYPE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_ROLE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE", "LIBELLE", "ROLE_ID", "STRUCTURE_ID", "THESE_DEP", "TYPE_STRUCTURE_DEPENDANT_ID", "U_CODE", "U_LIBELLE", "U_ROLE_ID", "U_STRUCTURE_ID", "U_THESE_DEP", "U_TYPE_STRUCTURE_DEPENDANT_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE",diff."LIBELLE",diff."ROLE_ID",diff."STRUCTURE_ID",diff."THESE_DEP",diff."TYPE_STRUCTURE_DEPENDANT_ID",diff."U_CODE",diff."U_LIBELLE",diff."U_ROLE_ID",diff."U_STRUCTURE_ID",diff."U_THESE_DEP",diff."U_TYPE_STRUCTURE_DEPENDANT_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ROLE_ID ELSE S.ROLE_ID END ROLE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_DEP ELSE S.THESE_DEP END THESE_DEP,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_STRUCTURE_DEPENDANT_ID ELSE S.TYPE_STRUCTURE_DEPENDANT_ID END TYPE_STRUCTURE_DEPENDANT_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL) THEN 1 ELSE 0 END U_ROLE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.THESE_DEP <> S.THESE_DEP OR (D.THESE_DEP IS NULL AND S.THESE_DEP IS NOT NULL) OR (D.THESE_DEP IS NOT NULL AND S.THESE_DEP IS NULL) THEN 1 ELSE 0 END U_THESE_DEP,
    CASE WHEN D.TYPE_STRUCTURE_DEPENDANT_ID <> S.TYPE_STRUCTURE_DEPENDANT_ID OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_STRUCTURE_DEPENDANT_ID
FROM
  ROLE D
  FULL JOIN SRC_ROLE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.THESE_DEP <> S.THESE_DEP OR (D.THESE_DEP IS NULL AND S.THESE_DEP IS NOT NULL) OR (D.THESE_DEP IS NOT NULL AND S.THESE_DEP IS NULL)
  OR D.TYPE_STRUCTURE_DEPENDANT_ID <> S.TYPE_STRUCTURE_DEPENDANT_ID OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_STRUCTURE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE", "LIBELLE", "SIGLE", "TYPE_STRUCTURE_ID", "U_CODE", "U_LIBELLE", "U_SIGLE", "U_TYPE_STRUCTURE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE",diff."LIBELLE",diff."SIGLE",diff."TYPE_STRUCTURE_ID",diff."U_CODE",diff."U_LIBELLE",diff."U_SIGLE",diff."U_TYPE_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SIGLE ELSE S.SIGLE END SIGLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_STRUCTURE_ID ELSE S.TYPE_STRUCTURE_ID END TYPE_STRUCTURE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.SIGLE <> S.SIGLE OR (D.SIGLE IS NULL AND S.SIGLE IS NOT NULL) OR (D.SIGLE IS NOT NULL AND S.SIGLE IS NULL) THEN 1 ELSE 0 END U_SIGLE,
    CASE WHEN D.TYPE_STRUCTURE_ID <> S.TYPE_STRUCTURE_ID OR (D.TYPE_STRUCTURE_ID IS NULL AND S.TYPE_STRUCTURE_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_ID IS NOT NULL AND S.TYPE_STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_STRUCTURE_ID
FROM
  STRUCTURE D
  FULL JOIN SRC_STRUCTURE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.SIGLE <> S.SIGLE OR (D.SIGLE IS NULL AND S.SIGLE IS NOT NULL) OR (D.SIGLE IS NOT NULL AND S.SIGLE IS NULL)
  OR D.TYPE_STRUCTURE_ID <> S.TYPE_STRUCTURE_ID OR (D.TYPE_STRUCTURE_ID IS NULL AND S.TYPE_STRUCTURE_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_ID IS NOT NULL AND S.TYPE_STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_THESE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_UNIV_1ERE_INSC", "CORREC_AUTORISEE", "DATE_ABANDON", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "DATE_TRANSFERT", "DOCTORANT_ID", "ECOLE_DOCT_ID", "ETABLISSEMENT_ID", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "UNITE_RECH_ID", "U_ANNEE_UNIV_1ERE_INSC", "U_CORREC_AUTORISEE", "U_DATE_ABANDON", "U_DATE_AUTORIS_SOUTENANCE", "U_DATE_FIN_CONFID", "U_DATE_PREM_INSC", "U_DATE_PREV_SOUTENANCE", "U_DATE_SOUTENANCE", "U_DATE_TRANSFERT", "U_DOCTORANT_ID", "U_ECOLE_DOCT_ID", "U_ETABLISSEMENT_ID", "U_ETAT_THESE", "U_LIB_DISC", "U_LIB_ETAB_COTUT", "U_LIB_PAYS_COTUT", "U_RESULTAT", "U_SOUTENANCE_AUTORIS", "U_TEM_AVENANT_COTUT", "U_TITRE", "U_UNITE_RECH_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_UNIV_1ERE_INSC",diff."CORREC_AUTORISEE",diff."DATE_ABANDON",diff."DATE_AUTORIS_SOUTENANCE",diff."DATE_FIN_CONFID",diff."DATE_PREM_INSC",diff."DATE_PREV_SOUTENANCE",diff."DATE_SOUTENANCE",diff."DATE_TRANSFERT",diff."DOCTORANT_ID",diff."ECOLE_DOCT_ID",diff."ETABLISSEMENT_ID",diff."ETAT_THESE",diff."LIB_DISC",diff."LIB_ETAB_COTUT",diff."LIB_PAYS_COTUT",diff."RESULTAT",diff."SOUTENANCE_AUTORIS",diff."TEM_AVENANT_COTUT",diff."TITRE",diff."UNITE_RECH_ID",diff."U_ANNEE_UNIV_1ERE_INSC",diff."U_CORREC_AUTORISEE",diff."U_DATE_ABANDON",diff."U_DATE_AUTORIS_SOUTENANCE",diff."U_DATE_FIN_CONFID",diff."U_DATE_PREM_INSC",diff."U_DATE_PREV_SOUTENANCE",diff."U_DATE_SOUTENANCE",diff."U_DATE_TRANSFERT",diff."U_DOCTORANT_ID",diff."U_ECOLE_DOCT_ID",diff."U_ETABLISSEMENT_ID",diff."U_ETAT_THESE",diff."U_LIB_DISC",diff."U_LIB_ETAB_COTUT",diff."U_LIB_PAYS_COTUT",diff."U_RESULTAT",diff."U_SOUTENANCE_AUTORIS",diff."U_TEM_AVENANT_COTUT",diff."U_TITRE",diff."U_UNITE_RECH_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_UNIV_1ERE_INSC ELSE S.ANNEE_UNIV_1ERE_INSC END ANNEE_UNIV_1ERE_INSC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CORREC_AUTORISEE ELSE S.CORREC_AUTORISEE END CORREC_AUTORISEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_ABANDON ELSE S.DATE_ABANDON END DATE_ABANDON,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_AUTORIS_SOUTENANCE ELSE S.DATE_AUTORIS_SOUTENANCE END DATE_AUTORIS_SOUTENANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_FIN_CONFID ELSE S.DATE_FIN_CONFID END DATE_FIN_CONFID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_PREM_INSC ELSE S.DATE_PREM_INSC END DATE_PREM_INSC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_PREV_SOUTENANCE ELSE S.DATE_PREV_SOUTENANCE END DATE_PREV_SOUTENANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_SOUTENANCE ELSE S.DATE_SOUTENANCE END DATE_SOUTENANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_TRANSFERT ELSE S.DATE_TRANSFERT END DATE_TRANSFERT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DOCTORANT_ID ELSE S.DOCTORANT_ID END DOCTORANT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ECOLE_DOCT_ID ELSE S.ECOLE_DOCT_ID END ECOLE_DOCT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETABLISSEMENT_ID ELSE S.ETABLISSEMENT_ID END ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAT_THESE ELSE S.ETAT_THESE END ETAT_THESE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_DISC ELSE S.LIB_DISC END LIB_DISC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_ETAB_COTUT ELSE S.LIB_ETAB_COTUT END LIB_ETAB_COTUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_PAYS_COTUT ELSE S.LIB_PAYS_COTUT END LIB_PAYS_COTUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.RESULTAT ELSE S.RESULTAT END RESULTAT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SOUTENANCE_AUTORIS ELSE S.SOUTENANCE_AUTORIS END SOUTENANCE_AUTORIS,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEM_AVENANT_COTUT ELSE S.TEM_AVENANT_COTUT END TEM_AVENANT_COTUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TITRE ELSE S.TITRE END TITRE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.UNITE_RECH_ID ELSE S.UNITE_RECH_ID END UNITE_RECH_ID,
    CASE WHEN D.ANNEE_UNIV_1ERE_INSC <> S.ANNEE_UNIV_1ERE_INSC OR (D.ANNEE_UNIV_1ERE_INSC IS NULL AND S.ANNEE_UNIV_1ERE_INSC IS NOT NULL) OR (D.ANNEE_UNIV_1ERE_INSC IS NOT NULL AND S.ANNEE_UNIV_1ERE_INSC IS NULL) THEN 1 ELSE 0 END U_ANNEE_UNIV_1ERE_INSC,
    CASE WHEN D.CORREC_AUTORISEE <> S.CORREC_AUTORISEE OR (D.CORREC_AUTORISEE IS NULL AND S.CORREC_AUTORISEE IS NOT NULL) OR (D.CORREC_AUTORISEE IS NOT NULL AND S.CORREC_AUTORISEE IS NULL) THEN 1 ELSE 0 END U_CORREC_AUTORISEE,
    CASE WHEN D.DATE_ABANDON <> S.DATE_ABANDON OR (D.DATE_ABANDON IS NULL AND S.DATE_ABANDON IS NOT NULL) OR (D.DATE_ABANDON IS NOT NULL AND S.DATE_ABANDON IS NULL) THEN 1 ELSE 0 END U_DATE_ABANDON,
    CASE WHEN D.DATE_AUTORIS_SOUTENANCE <> S.DATE_AUTORIS_SOUTENANCE OR (D.DATE_AUTORIS_SOUTENANCE IS NULL AND S.DATE_AUTORIS_SOUTENANCE IS NOT NULL) OR (D.DATE_AUTORIS_SOUTENANCE IS NOT NULL AND S.DATE_AUTORIS_SOUTENANCE IS NULL) THEN 1 ELSE 0 END U_DATE_AUTORIS_SOUTENANCE,
    CASE WHEN D.DATE_FIN_CONFID <> S.DATE_FIN_CONFID OR (D.DATE_FIN_CONFID IS NULL AND S.DATE_FIN_CONFID IS NOT NULL) OR (D.DATE_FIN_CONFID IS NOT NULL AND S.DATE_FIN_CONFID IS NULL) THEN 1 ELSE 0 END U_DATE_FIN_CONFID,
    CASE WHEN D.DATE_PREM_INSC <> S.DATE_PREM_INSC OR (D.DATE_PREM_INSC IS NULL AND S.DATE_PREM_INSC IS NOT NULL) OR (D.DATE_PREM_INSC IS NOT NULL AND S.DATE_PREM_INSC IS NULL) THEN 1 ELSE 0 END U_DATE_PREM_INSC,
    CASE WHEN D.DATE_PREV_SOUTENANCE <> S.DATE_PREV_SOUTENANCE OR (D.DATE_PREV_SOUTENANCE IS NULL AND S.DATE_PREV_SOUTENANCE IS NOT NULL) OR (D.DATE_PREV_SOUTENANCE IS NOT NULL AND S.DATE_PREV_SOUTENANCE IS NULL) THEN 1 ELSE 0 END U_DATE_PREV_SOUTENANCE,
    CASE WHEN D.DATE_SOUTENANCE <> S.DATE_SOUTENANCE OR (D.DATE_SOUTENANCE IS NULL AND S.DATE_SOUTENANCE IS NOT NULL) OR (D.DATE_SOUTENANCE IS NOT NULL AND S.DATE_SOUTENANCE IS NULL) THEN 1 ELSE 0 END U_DATE_SOUTENANCE,
    CASE WHEN D.DATE_TRANSFERT <> S.DATE_TRANSFERT OR (D.DATE_TRANSFERT IS NULL AND S.DATE_TRANSFERT IS NOT NULL) OR (D.DATE_TRANSFERT IS NOT NULL AND S.DATE_TRANSFERT IS NULL) THEN 1 ELSE 0 END U_DATE_TRANSFERT,
    CASE WHEN D.DOCTORANT_ID <> S.DOCTORANT_ID OR (D.DOCTORANT_ID IS NULL AND S.DOCTORANT_ID IS NOT NULL) OR (D.DOCTORANT_ID IS NOT NULL AND S.DOCTORANT_ID IS NULL) THEN 1 ELSE 0 END U_DOCTORANT_ID,
    CASE WHEN D.ECOLE_DOCT_ID <> S.ECOLE_DOCT_ID OR (D.ECOLE_DOCT_ID IS NULL AND S.ECOLE_DOCT_ID IS NOT NULL) OR (D.ECOLE_DOCT_ID IS NOT NULL AND S.ECOLE_DOCT_ID IS NULL) THEN 1 ELSE 0 END U_ECOLE_DOCT_ID,
    CASE WHEN D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ETABLISSEMENT_ID,
    CASE WHEN D.ETAT_THESE <> S.ETAT_THESE OR (D.ETAT_THESE IS NULL AND S.ETAT_THESE IS NOT NULL) OR (D.ETAT_THESE IS NOT NULL AND S.ETAT_THESE IS NULL) THEN 1 ELSE 0 END U_ETAT_THESE,
    CASE WHEN D.LIB_DISC <> S.LIB_DISC OR (D.LIB_DISC IS NULL AND S.LIB_DISC IS NOT NULL) OR (D.LIB_DISC IS NOT NULL AND S.LIB_DISC IS NULL) THEN 1 ELSE 0 END U_LIB_DISC,
    CASE WHEN D.LIB_ETAB_COTUT <> S.LIB_ETAB_COTUT OR (D.LIB_ETAB_COTUT IS NULL AND S.LIB_ETAB_COTUT IS NOT NULL) OR (D.LIB_ETAB_COTUT IS NOT NULL AND S.LIB_ETAB_COTUT IS NULL) THEN 1 ELSE 0 END U_LIB_ETAB_COTUT,
    CASE WHEN D.LIB_PAYS_COTUT <> S.LIB_PAYS_COTUT OR (D.LIB_PAYS_COTUT IS NULL AND S.LIB_PAYS_COTUT IS NOT NULL) OR (D.LIB_PAYS_COTUT IS NOT NULL AND S.LIB_PAYS_COTUT IS NULL) THEN 1 ELSE 0 END U_LIB_PAYS_COTUT,
    CASE WHEN D.RESULTAT <> S.RESULTAT OR (D.RESULTAT IS NULL AND S.RESULTAT IS NOT NULL) OR (D.RESULTAT IS NOT NULL AND S.RESULTAT IS NULL) THEN 1 ELSE 0 END U_RESULTAT,
    CASE WHEN D.SOUTENANCE_AUTORIS <> S.SOUTENANCE_AUTORIS OR (D.SOUTENANCE_AUTORIS IS NULL AND S.SOUTENANCE_AUTORIS IS NOT NULL) OR (D.SOUTENANCE_AUTORIS IS NOT NULL AND S.SOUTENANCE_AUTORIS IS NULL) THEN 1 ELSE 0 END U_SOUTENANCE_AUTORIS,
    CASE WHEN D.TEM_AVENANT_COTUT <> S.TEM_AVENANT_COTUT OR (D.TEM_AVENANT_COTUT IS NULL AND S.TEM_AVENANT_COTUT IS NOT NULL) OR (D.TEM_AVENANT_COTUT IS NOT NULL AND S.TEM_AVENANT_COTUT IS NULL) THEN 1 ELSE 0 END U_TEM_AVENANT_COTUT,
    CASE WHEN D.TITRE <> S.TITRE OR (D.TITRE IS NULL AND S.TITRE IS NOT NULL) OR (D.TITRE IS NOT NULL AND S.TITRE IS NULL) THEN 1 ELSE 0 END U_TITRE,
    CASE WHEN D.UNITE_RECH_ID <> S.UNITE_RECH_ID OR (D.UNITE_RECH_ID IS NULL AND S.UNITE_RECH_ID IS NOT NULL) OR (D.UNITE_RECH_ID IS NOT NULL AND S.UNITE_RECH_ID IS NULL) THEN 1 ELSE 0 END U_UNITE_RECH_ID
FROM
  THESE D
  FULL JOIN SRC_THESE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_UNIV_1ERE_INSC <> S.ANNEE_UNIV_1ERE_INSC OR (D.ANNEE_UNIV_1ERE_INSC IS NULL AND S.ANNEE_UNIV_1ERE_INSC IS NOT NULL) OR (D.ANNEE_UNIV_1ERE_INSC IS NOT NULL AND S.ANNEE_UNIV_1ERE_INSC IS NULL)
  OR D.CORREC_AUTORISEE <> S.CORREC_AUTORISEE OR (D.CORREC_AUTORISEE IS NULL AND S.CORREC_AUTORISEE IS NOT NULL) OR (D.CORREC_AUTORISEE IS NOT NULL AND S.CORREC_AUTORISEE IS NULL)
  OR D.DATE_ABANDON <> S.DATE_ABANDON OR (D.DATE_ABANDON IS NULL AND S.DATE_ABANDON IS NOT NULL) OR (D.DATE_ABANDON IS NOT NULL AND S.DATE_ABANDON IS NULL)
  OR D.DATE_AUTORIS_SOUTENANCE <> S.DATE_AUTORIS_SOUTENANCE OR (D.DATE_AUTORIS_SOUTENANCE IS NULL AND S.DATE_AUTORIS_SOUTENANCE IS NOT NULL) OR (D.DATE_AUTORIS_SOUTENANCE IS NOT NULL AND S.DATE_AUTORIS_SOUTENANCE IS NULL)
  OR D.DATE_FIN_CONFID <> S.DATE_FIN_CONFID OR (D.DATE_FIN_CONFID IS NULL AND S.DATE_FIN_CONFID IS NOT NULL) OR (D.DATE_FIN_CONFID IS NOT NULL AND S.DATE_FIN_CONFID IS NULL)
  OR D.DATE_PREM_INSC <> S.DATE_PREM_INSC OR (D.DATE_PREM_INSC IS NULL AND S.DATE_PREM_INSC IS NOT NULL) OR (D.DATE_PREM_INSC IS NOT NULL AND S.DATE_PREM_INSC IS NULL)
  OR D.DATE_PREV_SOUTENANCE <> S.DATE_PREV_SOUTENANCE OR (D.DATE_PREV_SOUTENANCE IS NULL AND S.DATE_PREV_SOUTENANCE IS NOT NULL) OR (D.DATE_PREV_SOUTENANCE IS NOT NULL AND S.DATE_PREV_SOUTENANCE IS NULL)
  OR D.DATE_SOUTENANCE <> S.DATE_SOUTENANCE OR (D.DATE_SOUTENANCE IS NULL AND S.DATE_SOUTENANCE IS NOT NULL) OR (D.DATE_SOUTENANCE IS NOT NULL AND S.DATE_SOUTENANCE IS NULL)
  OR D.DATE_TRANSFERT <> S.DATE_TRANSFERT OR (D.DATE_TRANSFERT IS NULL AND S.DATE_TRANSFERT IS NOT NULL) OR (D.DATE_TRANSFERT IS NOT NULL AND S.DATE_TRANSFERT IS NULL)
  OR D.DOCTORANT_ID <> S.DOCTORANT_ID OR (D.DOCTORANT_ID IS NULL AND S.DOCTORANT_ID IS NOT NULL) OR (D.DOCTORANT_ID IS NOT NULL AND S.DOCTORANT_ID IS NULL)
  OR D.ECOLE_DOCT_ID <> S.ECOLE_DOCT_ID OR (D.ECOLE_DOCT_ID IS NULL AND S.ECOLE_DOCT_ID IS NOT NULL) OR (D.ECOLE_DOCT_ID IS NOT NULL AND S.ECOLE_DOCT_ID IS NULL)
  OR D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL)
  OR D.ETAT_THESE <> S.ETAT_THESE OR (D.ETAT_THESE IS NULL AND S.ETAT_THESE IS NOT NULL) OR (D.ETAT_THESE IS NOT NULL AND S.ETAT_THESE IS NULL)
  OR D.LIB_DISC <> S.LIB_DISC OR (D.LIB_DISC IS NULL AND S.LIB_DISC IS NOT NULL) OR (D.LIB_DISC IS NOT NULL AND S.LIB_DISC IS NULL)
  OR D.LIB_ETAB_COTUT <> S.LIB_ETAB_COTUT OR (D.LIB_ETAB_COTUT IS NULL AND S.LIB_ETAB_COTUT IS NOT NULL) OR (D.LIB_ETAB_COTUT IS NOT NULL AND S.LIB_ETAB_COTUT IS NULL)
  OR D.LIB_PAYS_COTUT <> S.LIB_PAYS_COTUT OR (D.LIB_PAYS_COTUT IS NULL AND S.LIB_PAYS_COTUT IS NOT NULL) OR (D.LIB_PAYS_COTUT IS NOT NULL AND S.LIB_PAYS_COTUT IS NULL)
  OR D.RESULTAT <> S.RESULTAT OR (D.RESULTAT IS NULL AND S.RESULTAT IS NOT NULL) OR (D.RESULTAT IS NOT NULL AND S.RESULTAT IS NULL)
  OR D.SOUTENANCE_AUTORIS <> S.SOUTENANCE_AUTORIS OR (D.SOUTENANCE_AUTORIS IS NULL AND S.SOUTENANCE_AUTORIS IS NOT NULL) OR (D.SOUTENANCE_AUTORIS IS NOT NULL AND S.SOUTENANCE_AUTORIS IS NULL)
  OR D.TEM_AVENANT_COTUT <> S.TEM_AVENANT_COTUT OR (D.TEM_AVENANT_COTUT IS NULL AND S.TEM_AVENANT_COTUT IS NOT NULL) OR (D.TEM_AVENANT_COTUT IS NOT NULL AND S.TEM_AVENANT_COTUT IS NULL)
  OR D.TITRE <> S.TITRE OR (D.TITRE IS NULL AND S.TITRE IS NOT NULL) OR (D.TITRE IS NOT NULL AND S.TITRE IS NULL)
  OR D.UNITE_RECH_ID <> S.UNITE_RECH_ID OR (D.UNITE_RECH_ID IS NULL AND S.UNITE_RECH_ID IS NOT NULL) OR (D.UNITE_RECH_ID IS NOT NULL AND S.UNITE_RECH_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_THESE_ANNEE_UNIV" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_UNIV", "THESE_ID", "U_ANNEE_UNIV", "U_THESE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_UNIV",diff."THESE_ID",diff."U_ANNEE_UNIV",diff."U_THESE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_UNIV ELSE S.ANNEE_UNIV END ANNEE_UNIV,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN D.ANNEE_UNIV <> S.ANNEE_UNIV OR (D.ANNEE_UNIV IS NULL AND S.ANNEE_UNIV IS NOT NULL) OR (D.ANNEE_UNIV IS NOT NULL AND S.ANNEE_UNIV IS NULL) THEN 1 ELSE 0 END U_ANNEE_UNIV,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID
FROM
  THESE_ANNEE_UNIV D
  FULL JOIN SRC_THESE_ANNEE_UNIV S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_UNIV <> S.ANNEE_UNIV OR (D.ANNEE_UNIV IS NULL AND S.ANNEE_UNIV IS NOT NULL) OR (D.ANNEE_UNIV IS NOT NULL AND S.ANNEE_UNIV IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_TITRE_ACCES" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE_DEPT_TITRE_ACCES", "CODE_PAYS_TITRE_ACCES", "LIBELLE_ETB_TITRE_ACCES", "LIBELLE_TITRE_ACCES", "THESE_ID", "TITRE_ACCES_INTERNE_EXTERNE", "TYPE_ETB_TITRE_ACCES", "U_CODE_DEPT_TITRE_ACCES", "U_CODE_PAYS_TITRE_ACCES", "U_LIBELLE_ETB_TITRE_ACCES", "U_LIBELLE_TITRE_ACCES", "U_THESE_ID", "U_TITRE_ACCES_INTERNE_EXTERNE", "U_TYPE_ETB_TITRE_ACCES") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE_DEPT_TITRE_ACCES",diff."CODE_PAYS_TITRE_ACCES",diff."LIBELLE_ETB_TITRE_ACCES",diff."LIBELLE_TITRE_ACCES",diff."THESE_ID",diff."TITRE_ACCES_INTERNE_EXTERNE",diff."TYPE_ETB_TITRE_ACCES",diff."U_CODE_DEPT_TITRE_ACCES",diff."U_CODE_PAYS_TITRE_ACCES",diff."U_LIBELLE_ETB_TITRE_ACCES",diff."U_LIBELLE_TITRE_ACCES",diff."U_THESE_ID",diff."U_TITRE_ACCES_INTERNE_EXTERNE",diff."U_TYPE_ETB_TITRE_ACCES" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_DEPT_TITRE_ACCES ELSE S.CODE_DEPT_TITRE_ACCES END CODE_DEPT_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_PAYS_TITRE_ACCES ELSE S.CODE_PAYS_TITRE_ACCES END CODE_PAYS_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_ETB_TITRE_ACCES ELSE S.LIBELLE_ETB_TITRE_ACCES END LIBELLE_ETB_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_TITRE_ACCES ELSE S.LIBELLE_TITRE_ACCES END LIBELLE_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TITRE_ACCES_INTERNE_EXTERNE ELSE S.TITRE_ACCES_INTERNE_EXTERNE END TITRE_ACCES_INTERNE_EXTERNE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_ETB_TITRE_ACCES ELSE S.TYPE_ETB_TITRE_ACCES END TYPE_ETB_TITRE_ACCES,
    CASE WHEN D.CODE_DEPT_TITRE_ACCES <> S.CODE_DEPT_TITRE_ACCES OR (D.CODE_DEPT_TITRE_ACCES IS NULL AND S.CODE_DEPT_TITRE_ACCES IS NOT NULL) OR (D.CODE_DEPT_TITRE_ACCES IS NOT NULL AND S.CODE_DEPT_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_CODE_DEPT_TITRE_ACCES,
    CASE WHEN D.CODE_PAYS_TITRE_ACCES <> S.CODE_PAYS_TITRE_ACCES OR (D.CODE_PAYS_TITRE_ACCES IS NULL AND S.CODE_PAYS_TITRE_ACCES IS NOT NULL) OR (D.CODE_PAYS_TITRE_ACCES IS NOT NULL AND S.CODE_PAYS_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_CODE_PAYS_TITRE_ACCES,
    CASE WHEN D.LIBELLE_ETB_TITRE_ACCES <> S.LIBELLE_ETB_TITRE_ACCES OR (D.LIBELLE_ETB_TITRE_ACCES IS NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_ETB_TITRE_ACCES IS NOT NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_LIBELLE_ETB_TITRE_ACCES,
    CASE WHEN D.LIBELLE_TITRE_ACCES <> S.LIBELLE_TITRE_ACCES OR (D.LIBELLE_TITRE_ACCES IS NULL AND S.LIBELLE_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_TITRE_ACCES IS NOT NULL AND S.LIBELLE_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_LIBELLE_TITRE_ACCES,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID,
    CASE WHEN D.TITRE_ACCES_INTERNE_EXTERNE <> S.TITRE_ACCES_INTERNE_EXTERNE OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL) OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NULL) THEN 1 ELSE 0 END U_TITRE_ACCES_INTERNE_EXTERNE,
    CASE WHEN D.TYPE_ETB_TITRE_ACCES <> S.TYPE_ETB_TITRE_ACCES OR (D.TYPE_ETB_TITRE_ACCES IS NULL AND S.TYPE_ETB_TITRE_ACCES IS NOT NULL) OR (D.TYPE_ETB_TITRE_ACCES IS NOT NULL AND S.TYPE_ETB_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_TYPE_ETB_TITRE_ACCES
FROM
  TITRE_ACCES D
  FULL JOIN SRC_TITRE_ACCES S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE_DEPT_TITRE_ACCES <> S.CODE_DEPT_TITRE_ACCES OR (D.CODE_DEPT_TITRE_ACCES IS NULL AND S.CODE_DEPT_TITRE_ACCES IS NOT NULL) OR (D.CODE_DEPT_TITRE_ACCES IS NOT NULL AND S.CODE_DEPT_TITRE_ACCES IS NULL)
  OR D.CODE_PAYS_TITRE_ACCES <> S.CODE_PAYS_TITRE_ACCES OR (D.CODE_PAYS_TITRE_ACCES IS NULL AND S.CODE_PAYS_TITRE_ACCES IS NOT NULL) OR (D.CODE_PAYS_TITRE_ACCES IS NOT NULL AND S.CODE_PAYS_TITRE_ACCES IS NULL)
  OR D.LIBELLE_ETB_TITRE_ACCES <> S.LIBELLE_ETB_TITRE_ACCES OR (D.LIBELLE_ETB_TITRE_ACCES IS NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_ETB_TITRE_ACCES IS NOT NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NULL)
  OR D.LIBELLE_TITRE_ACCES <> S.LIBELLE_TITRE_ACCES OR (D.LIBELLE_TITRE_ACCES IS NULL AND S.LIBELLE_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_TITRE_ACCES IS NOT NULL AND S.LIBELLE_TITRE_ACCES IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
  OR D.TITRE_ACCES_INTERNE_EXTERNE <> S.TITRE_ACCES_INTERNE_EXTERNE OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL) OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NULL)
  OR D.TYPE_ETB_TITRE_ACCES <> S.TYPE_ETB_TITRE_ACCES OR (D.TYPE_ETB_TITRE_ACCES IS NULL AND S.TYPE_ETB_TITRE_ACCES IS NOT NULL) OR (D.TYPE_ETB_TITRE_ACCES IS NOT NULL AND S.TYPE_ETB_TITRE_ACCES IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_UNITE_RECH" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "STRUCTURE_ID", "U_STRUCTURE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."STRUCTURE_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  UNITE_RECH D
  FULL JOIN SRC_UNITE_RECH S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_DIFF_VARIABLE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE", "DATE_DEB_VALIDITE", "DATE_FIN_VALIDITE", "DESCRIPTION", "ETABLISSEMENT_ID", "VALEUR", "U_CODE", "U_DATE_DEB_VALIDITE", "U_DATE_FIN_VALIDITE", "U_DESCRIPTION", "U_ETABLISSEMENT_ID", "U_VALEUR") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE",diff."DATE_DEB_VALIDITE",diff."DATE_FIN_VALIDITE",diff."DESCRIPTION",diff."ETABLISSEMENT_ID",diff."VALEUR",diff."U_CODE",diff."U_DATE_DEB_VALIDITE",diff."U_DATE_FIN_VALIDITE",diff."U_DESCRIPTION",diff."U_ETABLISSEMENT_ID",diff."U_VALEUR" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_DEB_VALIDITE ELSE S.DATE_DEB_VALIDITE END DATE_DEB_VALIDITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_FIN_VALIDITE ELSE S.DATE_FIN_VALIDITE END DATE_FIN_VALIDITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DESCRIPTION ELSE S.DESCRIPTION END DESCRIPTION,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETABLISSEMENT_ID ELSE S.ETABLISSEMENT_ID END ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VALEUR ELSE S.VALEUR END VALEUR,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.DATE_DEB_VALIDITE <> S.DATE_DEB_VALIDITE OR (D.DATE_DEB_VALIDITE IS NULL AND S.DATE_DEB_VALIDITE IS NOT NULL) OR (D.DATE_DEB_VALIDITE IS NOT NULL AND S.DATE_DEB_VALIDITE IS NULL) THEN 1 ELSE 0 END U_DATE_DEB_VALIDITE,
    CASE WHEN D.DATE_FIN_VALIDITE <> S.DATE_FIN_VALIDITE OR (D.DATE_FIN_VALIDITE IS NULL AND S.DATE_FIN_VALIDITE IS NOT NULL) OR (D.DATE_FIN_VALIDITE IS NOT NULL AND S.DATE_FIN_VALIDITE IS NULL) THEN 1 ELSE 0 END U_DATE_FIN_VALIDITE,
    CASE WHEN D.DESCRIPTION <> S.DESCRIPTION OR (D.DESCRIPTION IS NULL AND S.DESCRIPTION IS NOT NULL) OR (D.DESCRIPTION IS NOT NULL AND S.DESCRIPTION IS NULL) THEN 1 ELSE 0 END U_DESCRIPTION,
    CASE WHEN D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ETABLISSEMENT_ID,
    CASE WHEN D.VALEUR <> S.VALEUR OR (D.VALEUR IS NULL AND S.VALEUR IS NOT NULL) OR (D.VALEUR IS NOT NULL AND S.VALEUR IS NULL) THEN 1 ELSE 0 END U_VALEUR
FROM
  VARIABLE D
  FULL JOIN SRC_VARIABLE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.DATE_DEB_VALIDITE <> S.DATE_DEB_VALIDITE OR (D.DATE_DEB_VALIDITE IS NULL AND S.DATE_DEB_VALIDITE IS NOT NULL) OR (D.DATE_DEB_VALIDITE IS NOT NULL AND S.DATE_DEB_VALIDITE IS NULL)
  OR D.DATE_FIN_VALIDITE <> S.DATE_FIN_VALIDITE OR (D.DATE_FIN_VALIDITE IS NULL AND S.DATE_FIN_VALIDITE IS NOT NULL) OR (D.DATE_FIN_VALIDITE IS NOT NULL AND S.DATE_FIN_VALIDITE IS NULL)
  OR D.DESCRIPTION <> S.DESCRIPTION OR (D.DESCRIPTION IS NULL AND S.DESCRIPTION IS NOT NULL) OR (D.DESCRIPTION IS NOT NULL AND S.DESCRIPTION IS NULL)
  OR D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL)
  OR D.VALEUR <> S.VALEUR OR (D.VALEUR IS NULL AND S.VALEUR IS NOT NULL) OR (D.VALEUR IS NOT NULL AND S.VALEUR IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_IMPORT_TAB_COLS" ("TABLE_NAME", "COLUMN_NAME", "DATA_TYPE", "LENGTH", "NULLABLE", "HAS_DEFAULT", "C_TABLE_NAME", "C_COLUMN_NAME", "IMPORT_ACTIF") AS 
  WITH importable_tables (table_name )AS (
    SELECT
      t.table_name
    FROM
      user_tab_cols c
      join user_tables t on t.table_name = c.table_name
    WHERE
      c.column_name = 'SOURCE_CODE'

    MINUS

    SELECT
      mview_name table_name
    FROM
      USER_MVIEWS
  ), c_values (table_name, column_name, c_table_name, c_column_name) AS (
      SELECT
        tc.table_name,
        tc.column_name,
        pcc.table_name c_table_name,
        pcc.column_name c_column_name
      FROM
        user_tab_cols tc
        JOIN USER_CONS_COLUMNS cc ON cc.table_name = tc.table_name AND cc.column_name = tc.column_name
        JOIN USER_CONSTRAINTS c ON c.constraint_name = cc.constraint_name
        JOIN USER_CONSTRAINTS pc ON pc.constraint_name = c.r_constraint_name
        JOIN USER_CONS_COLUMNS pcc ON pcc.constraint_name = pc.constraint_name
      WHERE
        c.constraint_type = 'R' AND pc.constraint_type = 'P'
  )
  SELECT
    tc.table_name,
    tc.column_name,
    tc.data_type,
    CASE WHEN tc.char_length = 0 THEN NULL ELSE tc.char_length END length,
    CASE WHEN tc.nullable = 'Y' THEN 1 ELSE 0 END nullable,
    CASE WHEN tc.data_default IS NOT NULL THEN 1 ELSE 0 END has_default,
    cv.c_table_name,
    cv.c_column_name,
    CASE WHEN stc.table_name IS NULL THEN 0 ELSE 1 END AS import_actif
  FROM
    user_tab_cols tc
    JOIN importable_tables t ON t.table_name = tc.table_name
    LEFT JOIN c_values cv ON cv.table_name = tc.table_name AND cv.column_name = tc.column_name
    LEFT JOIN user_tab_cols stc ON stc.table_name = 'SRC_' || tc.table_name AND stc.column_name = tc.column_name
  WHERE
    tc.column_name not like 'HISTO_%'
  ORDER BY
    tc.table_name, tc.column_id;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_INDIVIDU_ROLE" ("UTILISATEUR_ID", "NOM_USUEL", "PRENOM1", "EMAIL", "SOURCE_CODE", "ROLE_ID", "ID") AS 
  select
    i.id utilisateur_id, i.NOM_USUEL, i.PRENOM1, i.EMAIL, i.SOURCE_CODE,
    r.ROLE_ID, r.id
  from INDIVIDU_ROLE ir
    join INDIVIDU i on i.id = ir.INDIVIDU_ID
    join role r on r.id = ir.ROLE_ID
  order by NOM_USUEL, PRENOM1, r.ROLE_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_ARCHIVAB_VA" ("THESE_ID", "RETRAITEMENT", "EST_VALIDE") AS 
  SELECT
    ft.these_id,
    ft.RETRAITEMENT,
    vf.EST_VALIDE
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VA'
         JOIN VALIDITE_FICHIER vf ON vf.FICHIER_ID = f.id
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_ARCHIVAB_VAC" ("THESE_ID", "RETRAITEMENT", "EST_VALIDE") AS 
  SELECT
    ft.these_id,
    ft.RETRAITEMENT,
    vf.EST_VALIDE
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VAC'
         JOIN VALIDITE_FICHIER vf ON vf.FICHIER_ID = f.id
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_ARCHIVAB_VO" ("THESE_ID", "EST_VALIDE") AS 
  SELECT
    ft.these_id,
    vf.EST_VALIDE
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VO'
         JOIN VALIDITE_FICHIER vf ON vf.FICHIER_ID = f.id
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_ARCHIVAB_VOC" ("THESE_ID", "EST_VALIDE") AS 
  SELECT
    ft.these_id,
    vf.EST_VALIDE
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VOC'
         JOIN VALIDITE_FICHIER vf ON vf.FICHIER_ID = f.id
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_ATTESTATIONS" ("THESE_ID", "ATTESTATION_ID") AS 
  SELECT
    a.these_id,
    a.id AS attestation_id
FROM ATTESTATION a
where a.VERSION_CORRIGEE = 0 and a.HISTO_DESTRUCTEUR_ID is null;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_ATTESTATIONS_VOC" ("THESE_ID", "ATTESTATION_ID") AS 
  SELECT
    a.these_id,
    a.id AS attestation_id
FROM ATTESTATION a
         -- NB: on se base sur l'existence d'une version corrigée et pas sur t.CORRECTION_AUTORISEE qui peut revenir à null
         JOIN FICHIER_THESE ft ON ft.THESE_ID = a.THESE_ID AND EST_ANNEXE = 0 AND EST_EXPURGE = 0
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VOC'
where a.VERSION_CORRIGEE = 1 and a.HISTO_DESTRUCTEUR_ID is null;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_AUTORIS_DIFF_THESE" ("THESE_ID", "DIFFUSION_ID") AS 
  SELECT
    d.these_id,
    d.id AS diffusion_id
FROM DIFFUSION d
where d.VERSION_CORRIGEE = 0 and d.HISTO_DESTRUCTEUR_ID is null;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_AUTORIS_DIFF_THESE_VOC" ("THESE_ID", "DIFFUSION_ID") AS 
  SELECT
    d.these_id,
    d.id AS diffusion_id
FROM DIFFUSION d
         -- NB: on se base sur l'existence d'une version corrigée et pas sur t.CORRECTION_AUTORISEE qui peut revenir à null
         JOIN FICHIER_THESE ft ON ft.THESE_ID = d.THESE_ID AND EST_ANNEXE = 0 AND EST_EXPURGE = 0
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VOC'
where d.VERSION_CORRIGEE = 1 and d.HISTO_DESTRUCTEUR_ID is null;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_PV_SOUT" ("THESE_ID", "FICHIER_ID") AS 
  SELECT
    ft.these_id,
    f.id AS fichier_id
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN NATURE_FICHIER nf on f.NATURE_ID = nf.id and nf.CODE = 'PV_SOUTENANCE';
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_RAPPORT_SOUT" ("THESE_ID", "FICHIER_ID") AS 
  SELECT
    ft.these_id,
    f.id AS fichier_id
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN NATURE_FICHIER nf on f.NATURE_ID = nf.id and nf.CODE = 'RAPPORT_SOUTENANCE';
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_VA" ("THESE_ID", "FICHIER_ID") AS 
  SELECT
    ft.these_id,
    f.id AS fichier_id
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN NATURE_FICHIER nf ON f.NATURE_ID = nf.id AND nf.CODE = 'THESE_PDF'
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VA'
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_VAC" ("THESE_ID", "FICHIER_ID") AS 
  SELECT
    ft.these_id,
    f.id AS fichier_id
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN NATURE_FICHIER nf ON f.NATURE_ID = nf.id AND nf.CODE = 'THESE_PDF'
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VAC'
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_VC_VALID_DIR" ("ID", "THESE_ID", "INDIVIDU_ID", "VALIDE") AS 
  WITH validations_attendues AS (
    SELECT a.THESE_ID, a.INDIVIDU_ID, tv.ID as TYPE_VALIDATION_ID
    FROM ACTEUR a
             JOIN ROLE r on a.ROLE_ID = r.ID and r.CODE = 'D' -- directeur de thèse
             JOIN TYPE_VALIDATION tv on tv.code = 'CORRECTION_THESE'
    where a.HISTO_DESTRUCTION is null
)
SELECT
    ROWNUM as id,
    va.these_id,
    va.INDIVIDU_ID,
    CASE WHEN v.id is not null THEN 1 ELSE 0 END valide
FROM validations_attendues va
         LEFT JOIN VALIDATION v ON
            v.THESE_ID = va.THESE_ID and
            v.INDIVIDU_ID = va.INDIVIDU_ID and -- suppose que l'INDIVIDU_ID soit enregistré lors de la validation
            v.HISTO_DESTRUCTEUR_ID is null and
            v.TYPE_VALIDATION_ID = va.TYPE_VALIDATION_ID;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_VC_VALID_DOCT" ("THESE_ID", "VALIDE") AS 
  SELECT
    v.these_id,
    CASE WHEN v.id is not null THEN 1 ELSE 0 END valide
FROM VALIDATION v
         JOIN TYPE_VALIDATION tv on v.TYPE_VALIDATION_ID = tv.id and tv.code = 'DEPOT_THESE_CORRIGEE'
where v.HISTO_DESTRUCTEUR_ID is null;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_VO" ("THESE_ID", "FICHIER_ID") AS 
  SELECT
    ft.these_id,
    f.id AS fichier_id
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN NATURE_FICHIER nf ON f.NATURE_ID = nf.id AND nf.CODE = 'THESE_PDF'
         JOIN VERSION_FICHIER vf ON f.VERSION_FICHIER_ID = vf.ID AND vf.CODE = 'VO'
where EST_ANNEXE = 0 AND EST_EXPURGE = 0 AND RETRAITEMENT IS NULL;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_DEPOT_VOC" ("THESE_ID", "FICHIER_ID") AS 
  SELECT
    ft.these_id,
    f.id AS fichier_id
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN NATURE_FICHIER nf ON f.NATURE_ID = nf.id AND nf.CODE = 'THESE_PDF'
         JOIN VERSION_FICHIER vf ON f.VERSION_FICHIER_ID = vf.ID AND vf.CODE = 'VOC'
where EST_ANNEXE = 0 AND EST_EXPURGE = 0 AND RETRAITEMENT IS NULL;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_RDV_BU_SAISIE_BU" ("THESE_ID", "OK") AS 
  SELECT
    r.these_id,
    CASE WHEN r.VERSION_ARCHIVABLE_FOURNIE = 1 and r.CONVENTION_MEL_SIGNEE = 1 and r.EXEMPL_PAPIER_FOURNI = 1
        and r.MOTS_CLES_RAMEAU is not null
             THEN 1 ELSE 0 END ok
FROM RDV_BU r;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_RDV_BU_SAISIE_DOCT" ("THESE_ID", "OK") AS 
  SELECT
    r.these_id,
    CASE WHEN r.COORD_DOCTORANT IS NOT NULL AND r.DISPO_DOCTORANT IS NOT NULL
             THEN 1 ELSE 0 END ok
FROM RDV_BU r;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_RDV_BU_VALIDATION_BU" ("THESE_ID", "VALIDE") AS 
  SELECT
    v.these_id,
    CASE WHEN v.id is not null THEN 1 ELSE 0 END valide
FROM VALIDATION v
         JOIN TYPE_VALIDATION tv on v.TYPE_VALIDATION_ID = tv.id and tv.code = 'RDV_BU'
where v.HISTO_DESTRUCTEUR_ID is null;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_SIGNALEMENT_THESE" ("THESE_ID", "DESCRIPTION_ID") AS 
  SELECT
    d.these_id,
    d.id AS description_id
FROM METADONNEE_THESE d;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_VALIDATION_PAGE_COUV" ("THESE_ID", "VALIDE") AS 
  SELECT
    v.these_id,
    CASE WHEN v.id is not null THEN 1 ELSE 0 END valide
FROM VALIDATION v
         JOIN TYPE_VALIDATION tv on v.TYPE_VALIDATION_ID = tv.id and tv.code = 'PAGE_DE_COUVERTURE'
where v.HISTO_DESTRUCTEUR_ID is null;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_VERIF_VA" ("THESE_ID", "EST_CONFORME") AS 
  SELECT
    ft.these_id,
    ft.EST_CONFORME
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VA'
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_VERIF_VAC" ("THESE_ID", "EST_CONFORME") AS 
  SELECT
    ft.these_id,
    ft.EST_CONFORME
FROM FICHIER_THESE ft
         JOIN FICHIER f ON ft.FICHIER_ID = f.id and f.HISTO_DESTRUCTION is null
         JOIN VERSION_FICHIER v ON f.VERSION_FICHIER_ID = v.id AND v.CODE = 'VAC'
where EST_ANNEXE = 0 AND EST_EXPURGE = 0;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_SITU_VERSION_PAPIER_CORRIGEE" ("THESE_ID", "VALIDATION_ID") AS 
  SELECT
    v.these_id,
    v.id as validation_id
FROM VALIDATION v
         JOIN TYPE_VALIDATION tv ON tv.ID = v.TYPE_VALIDATION_ID
WHERE tv.CODE='VERSION_PAPIER_CORRIGEE';
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_THESE_ANNEE_UNIV_FIRST" ("ID", "SOURCE_CODE", "SOURCE_ID", "THESE_ID", "ANNEE_UNIV", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION") AS 
  with firsts(SOURCE_CODE) as (
    select distinct first_value(SOURCE_CODE) OVER (PARTITION BY THESE_ID ORDER BY ANNEE_UNIV)
    from THESE_ANNEE_UNIV
    )
    select au."ID",au."SOURCE_CODE",au."SOURCE_ID",au."THESE_ID",au."ANNEE_UNIV",au."HISTO_CREATEUR_ID",au."HISTO_CREATION",au."HISTO_MODIFICATEUR_ID",au."HISTO_MODIFICATION",au."HISTO_DESTRUCTEUR_ID",au."HISTO_DESTRUCTION"
    from THESE_ANNEE_UNIV au
           join firsts fi on au.SOURCE_CODE = fi.SOURCE_CODE;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_TMP_ANOMALIE" ("ID", "ETABLISSEMENT_ID", "TABLE_NAME", "SOURCE_CODE", "TABLE_COLUMN", "COLUMN_VALUE", "DESCRIPTION") AS 
  with ds(ETABLISSEMENT_ID, TABLE_NAME, SOURCE_CODE, TABLE_COLUMN, COLUMN_VALUE, DESCRIPTION) as (
    --
    -- TMP_ACTEUR
    --
    select
      ETABLISSEMENT_ID,
      'TMP_ACTEUR',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_ACTEUR tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ACTEUR',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_ACTEUR tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ACTEUR',
      SOURCE_CODE,
      'INDIVIDU_ID',
      INDIVIDU_ID,
      'Aucun enregistrement existant dans TMP_INDIVIDU avec SOURCE_CODE = ' || INDIVIDU_ID
    from TMP_ACTEUR tmp
    where not exists(select *
                     from TMP_INDIVIDU t
                     where t.SOURCE_CODE = tmp.INDIVIDU_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ACTEUR',
      SOURCE_CODE,
      'THESE_ID',
      THESE_ID,
      'Aucun enregistrement existant dans TMP_THESE avec SOURCE_CODE = ' || THESE_ID
    from TMP_ACTEUR tmp
    where not exists(select *
                     from TMP_THESE t
                     where t.SOURCE_CODE = tmp.THESE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ACTEUR',
      SOURCE_CODE,
      'ROLE_ID',
      ROLE_ID,
      'Aucun enregistrement existant dans TMP_ROLE avec SOURCE_CODE = ' || ROLE_ID
    from TMP_ACTEUR tmp
    where not exists(select *
                     from TMP_ROLE t
                     where t.SOURCE_CODE = tmp.ROLE_ID)
    union all

    --
    -- TMP_DOCTORANT
    --
    select
      ETABLISSEMENT_ID,
      'TMP_DOCTORANT',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_DOCTORANT tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_DOCTORANT',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_DOCTORANT tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_DOCTORANT',
      SOURCE_CODE,
      'INDIVIDU_ID',
      INDIVIDU_ID,
      'Aucun enregistrement existant dans TMP_INDIVIDU avec SOURCE_CODE = ' || INDIVIDU_ID
    from TMP_DOCTORANT tmp
    where not exists(select *
                     from TMP_INDIVIDU t
                     where t.SOURCE_CODE = tmp.INDIVIDU_ID)
    union all

    --
    -- TMP_ECOLE_DOCT
    --
    select
      ETABLISSEMENT_ID,
      'TMP_ECOLE_DOCT',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_ECOLE_DOCT tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ECOLE_DOCT',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_ECOLE_DOCT tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ECOLE_DOCT',
      SOURCE_CODE,
      'STRUCTURE_ID',
      STRUCTURE_ID,
      'Aucun enregistrement existant dans TMP_STRUCTURE avec SOURCE_CODE = ' || STRUCTURE_ID
    from TMP_ECOLE_DOCT tmp
    where not exists(select *
                     from TMP_STRUCTURE t
                     where t.SOURCE_CODE = tmp.STRUCTURE_ID)
    union all

    --
    -- TMP_ETABLISSEMENT
    --
    select
      ETABLISSEMENT_ID,
      'TMP_ETABLISSEMENT',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_STRUCTURE tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ETABLISSEMENT',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_ETABLISSEMENT tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ETABLISSEMENT',
      SOURCE_CODE,
      'STRUCTURE_ID',
      STRUCTURE_ID,
      'Aucun enregistrement existant dans TMP_STRUCTURE avec SOURCE_CODE = ' || STRUCTURE_ID
    from TMP_ETABLISSEMENT tmp
    where not exists(select *
                     from TMP_ETABLISSEMENT t
                     where t.SOURCE_CODE = tmp.STRUCTURE_ID)
    union all

    --
    -- TMP_INDIVIDU
    --
    select
      ETABLISSEMENT_ID,
      'TMP_INDIVIDU',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_INDIVIDU tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_INDIVIDU',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_INDIVIDU tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all

    --
    -- TMP_ROLE
    --
    select
      ETABLISSEMENT_ID,
      'TMP_ROLE',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_ROLE tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_ROLE',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_ROLE tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all

    --
    -- TMP_STRUCTURE
    --
    select
      ETABLISSEMENT_ID,
      'TMP_STRUCTURE',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_STRUCTURE tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_STRUCTURE',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_STRUCTURE tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_STRUCTURE',
      SOURCE_CODE,
      'TYPE_STRUCTURE_ID',
      TYPE_STRUCTURE_ID,
      'Aucun enregistrement existant dans TYPE_STRUCTURE avec CODE = ' || TYPE_STRUCTURE_ID
    from TMP_STRUCTURE tmp
    where not exists(select *
                     from TYPE_STRUCTURE t
                     where t.CODE = tmp.TYPE_STRUCTURE_ID)
    union all

    --
    -- TMP_THESE
    --
    select
      ETABLISSEMENT_ID,
      'TMP_THESE',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_THESE tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_THESE',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_THESE tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_THESE',
      SOURCE_CODE,
      'DOCTORANT_ID',
      DOCTORANT_ID,
      'Aucun enregistrement existant dans TMP_DOCTORANT avec SOURCE_CODE = ' || DOCTORANT_ID
    from TMP_THESE tmp
    where not exists(select *
                     from TMP_DOCTORANT t
                     where t.SOURCE_CODE = tmp.DOCTORANT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_THESE',
      SOURCE_CODE,
      'ECOLE_DOCT_ID',
      ECOLE_DOCT_ID,
      'Aucun enregistrement existant dans TMP_ECOLE_DOCT avec SOURCE_CODE = ' || ECOLE_DOCT_ID
    from TMP_THESE tmp
    where not exists(select *
                     from TMP_ECOLE_DOCT t
                     where t.SOURCE_CODE = tmp.ECOLE_DOCT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_THESE',
      SOURCE_CODE,
      'UNITE_RECH_ID',
      UNITE_RECH_ID,
      'Aucun enregistrement existant dans TMP_UNITE_RECH avec SOURCE_CODE = ' || UNITE_RECH_ID
    from TMP_THESE tmp
    where not exists(select *
                     from TMP_UNITE_RECH t
                     where t.SOURCE_CODE = tmp.UNITE_RECH_ID)
    union all

    --
    -- TMP_UNITE_RECH
    --
    select
      ETABLISSEMENT_ID,
      'TMP_UNITE_RECH',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_UNITE_RECH tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_UNITE_RECH',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_UNITE_RECH tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_UNITE_RECH',
      SOURCE_CODE,
      'STRUCTURE_ID',
      STRUCTURE_ID,
      'Aucun enregistrement existant dans TMP_STRUCTURE avec SOURCE_CODE = ' || STRUCTURE_ID
    from TMP_UNITE_RECH tmp
    where not exists(select *
                     from TMP_STRUCTURE t
                     where t.SOURCE_CODE = tmp.STRUCTURE_ID)
    union all

    --
    -- TMP_VARIABLE
    --
    select
      ETABLISSEMENT_ID,
      'TMP_VARIABLE',
      SOURCE_CODE,
      'ETABLISSEMENT_ID',
      ETABLISSEMENT_ID,
      'Aucun enregistrement existant dans ETABLISSEMENT avec CODE = ' || ETABLISSEMENT_ID
    from TMP_VARIABLE tmp
    where not exists(select *
                     from STRUCTURE t
                     where t.CODE = tmp.ETABLISSEMENT_ID)
    union all
    select
      ETABLISSEMENT_ID,
      'TMP_VARIABLE',
      SOURCE_CODE,
      'SOURCE_ID',
      SOURCE_ID,
      'Aucun enregistrement existant dans SOURCE avec CODE = ' || SOURCE_ID
    from TMP_VARIABLE tmp
    where not exists(select *
                     from SOURCE t
                     where t.CODE = tmp.SOURCE_ID)
  )

  select rownum as id, ETABLISSEMENT_ID, TABLE_NAME, SOURCE_CODE, TABLE_COLUMN, COLUMN_VALUE, DESCRIPTION
  from ds;
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_WF_ETAPE_PERTIN" ("THESE_ID", "ETAPE_ID", "CODE", "ORDRE", "ID") AS 
  select
    to_number(these_id) these_id,
    to_number(etape_id) etape_id,
    code,
    ordre,
    rownum id
from (
         --
         -- validation_page_de_couverture
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'VALIDATION_PAGE_DE_COUVERTURE'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- depot_version_originale
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'DEPOT_VERSION_ORIGINALE'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- autorisation_diffusion_these
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'AUTORISATION_DIFFUSION_THESE'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- attestations
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'ATTESTATIONS'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- signalement_these
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'SIGNALEMENT_THESE'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- archivabilite_version_originale
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'ARCHIVABILITE_VERSION_ORIGINALE'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- depot_version_archivage
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'DEPOT_VERSION_ARCHIVAGE'
                  join v_situ_archivab_vo situ on situ.these_id = t.id and situ.est_valide = 0 -- VO non archivable
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- archivabilite_version_archivage
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'ARCHIVABILITE_VERSION_ARCHIVAGE'
                  join v_situ_archivab_vo situ on situ.these_id = t.id and situ.est_valide = 0 -- VO non archivable
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- verification_version_archivage
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'VERIFICATION_VERSION_ARCHIVAGE'
                  join v_situ_archivab_va situ on situ.these_id = t.id and situ.est_valide = 1 -- VA archivable
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- rdv_bu_saisie_doctorant
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'RDV_BU_SAISIE_DOCTORANT'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- rdv_bu_saisie_bu
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'RDV_BU_SAISIE_BU'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- rdv_bu_validation_bu
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'RDV_BU_VALIDATION_BU'
         where t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues



         union all



         --
         -- depot_version_originale_corrigee
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'DEPOT_VERSION_ORIGINALE_CORRIGEE'
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- autorisation_diffusion_these_version_corrigee
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'AUTORISATION_DIFFUSION_THESE_VERSION_CORRIGEE'
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- attestations_version_corrigee
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'ATTESTATIONS_VERSION_CORRIGEE'
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- archivabilite_version_originale_corrigee
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'ARCHIVABILITE_VERSION_ORIGINALE_CORRIGEE'
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- depot_version_archivage_corrigee
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'DEPOT_VERSION_ARCHIVAGE_CORRIGEE'
                  join v_situ_archivab_voc situ on situ.these_id = t.id and situ.est_valide = 0 -- VOC non archivable
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- archivabilite_version_archivage_corrigee
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'ARCHIVABILITE_VERSION_ARCHIVAGE_CORRIGEE'
                  join v_situ_archivab_voc situ on situ.these_id = t.id and situ.est_valide = 0 -- VOC non archivable
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- verification_version_archivage_corrigee
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'VERIFICATION_VERSION_ARCHIVAGE_CORRIGEE'
                  join v_situ_archivab_vac situ on situ.these_id = t.id and situ.est_valide = 1 -- VAC archivable
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- depot_version_corrigee_validation_doctorant
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'DEPOT_VERSION_CORRIGEE_VALIDATION_DOCTORANT'
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- depot_version_corrigee_validation_directeur
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'DEPOT_VERSION_CORRIGEE_VALIDATION_DIRECTEUR'
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

         union all

         --
         -- REMISE_EXEMPLAIRE_PAPIER_THESE_CORRIGEE
         --
         select
             t.id as these_id,
             e.id as etape_id,
             e.code,
             e.ordre
         from these t
                  join wf_etape e on e.code = 'REMISE_EXEMPLAIRE_PAPIER_THESE_CORRIGEE'
                  join DIFFUSION d on d.VERSION_CORRIGEE = 1 and d.AUTORIS_MEL in (0/*Non*/, 1/*Oui+embargo*/) -- exemplaire papier requis
         where (t.correc_autorisee is not null or t.CORREC_AUTORISEE_FORCEE is not null) -- correction attendue
           and t.ETAT_THESE in ('E', 'S') -- thèses en cours ou soutenues

     );
  CREATE OR REPLACE FORCE VIEW /*"SYGAL".*/"V_WORKFLOW" ("ID", "THESE_ID", "ETAPE_ID", "CODE", "ORDRE", "FRANCHIE", "RESULTAT", "OBJECTIF", "DENSE_RANK", "ATTEIGNABLE", "COURANTE") AS 
  SELECT
    ROWNUM as id,
    t.THESE_ID,
    t.ETAPE_ID,
    t.CODE,
    t.ORDRE,
    t.FRANCHIE,
    t.RESULTAT,
    t.OBJECTIF,
    -- NB: dans les 3 lignes suivantes, c'est la même expression 'dense_rank() over(...)' qui est répétée :
    (dense_rank() over(partition by t.THESE_ID, t.FRANCHIE order by t.ORDRE)) dense_rank,
    case when t.FRANCHIE = 1 or (dense_rank() over(partition by t.THESE_ID, t.FRANCHIE order by t.ORDRE)) = 1 then 1 else 0 end atteignable,
    case when (dense_rank() over(partition by t.THESE_ID, t.FRANCHIE order by t.ORDRE)) = 1 and t.FRANCHIE = 0 then 1 else 0 end courante
FROM (

         --
         -- VALIDATION_PAGE_DE_COUVERTURE : franchie si version page de couverture validée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.valide IS NULL THEN 0 ELSE 1 END franchie,
             CASE WHEN v.valide IS NULL THEN 0 ELSE 1 END resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'VALIDATION_PAGE_DE_COUVERTURE'
                  LEFT JOIN V_SITU_VALIDATION_PAGE_COUV v ON v.these_id = t.id

         UNION ALL

         --
         -- DEPOT_VERSION_ORIGINALE : franchie si version originale déposée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'DEPOT_VERSION_ORIGINALE'
                  LEFT JOIN V_SITU_DEPOT_VO v ON v.these_id = t.id

         UNION ALL

         --
         -- AUTORISATION_DIFFUSION_THESE : franchie si données saisies
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.diffusion_id IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.diffusion_id IS NULL
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'AUTORISATION_DIFFUSION_THESE'
                  LEFT JOIN V_SITU_AUTORIS_DIFF_THESE v ON v.these_id = t.id

         UNION ALL

         --
         -- ATTESTATIONS : franchie si données saisies
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.attestation_id IS NULL THEN 0 ELSE 1 END franchie,
             CASE WHEN v.attestation_id IS NULL THEN 0 ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'ATTESTATIONS'
                  LEFT JOIN V_SITU_ATTESTATIONS v ON v.these_id = t.id

         UNION ALL

         --
         -- SIGNALEMENT_THESE : franchie si données saisies
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.description_id IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.description_id IS NULL
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'SIGNALEMENT_THESE'
                  LEFT JOIN V_SITU_SIGNALEMENT_THESE v ON v.these_id = t.id

         UNION ALL

         --
         -- ARCHIVABILITE_VERSION_ORIGINALE : franchie si l'archivabilité de la version originale a été testée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.THESE_ID IS NULL THEN 0 ELSE 1 END franchie,
             -- CASE WHEN v.THESE_ID IS NULL THEN
             --   0 -- test d'archivabilité inexistant
             -- ELSE
             --   CASE WHEN v.EST_VALIDE IS NULL THEN
             --     1 -- test d'archivabilité existant mais résultat indéterminé (plantage)
             --   ELSE
             --     CASE WHEN v.EST_VALIDE = 1 THEN
             --       1 -- test d'archivabilité réussi
             --     ELSE
             --       0 -- test d'archivabilité échoué
             --     END
             --   END
             -- END franchie,
             CASE WHEN v.EST_VALIDE IS NULL OR v.EST_VALIDE = 0 THEN 0 ELSE 1 END resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'ARCHIVABILITE_VERSION_ORIGINALE'
                  LEFT JOIN V_SITU_ARCHIVAB_VO v ON v.these_id = t.id

         UNION ALL

         --
         -- DEPOT_VERSION_ARCHIVAGE : franchie si version d'archivage déposée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'DEPOT_VERSION_ARCHIVAGE'
                  LEFT JOIN V_SITU_DEPOT_VA v ON v.these_id = t.id
                  LEFT JOIN fichier f ON f.id = v.fichier_id

         UNION ALL

         --
         -- ARCHIVABILITE_VERSION_ARCHIVAGE : franchie si l'archivabilité de la version d'archivage a été testée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.EST_VALIDE IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.EST_VALIDE IS NULL OR v.EST_VALIDE = 0
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'ARCHIVABILITE_VERSION_ARCHIVAGE'
                  LEFT JOIN V_SITU_ARCHIVAB_VA v ON v.these_id = t.id

         UNION ALL

         --
         -- VERIFICATION_VERSION_ARCHIVAGE : franchie si vérification de la version originale effectuée (peu importe la réponse)
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.EST_CONFORME IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.EST_CONFORME IS NULL OR v.EST_CONFORME = 0
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'VERIFICATION_VERSION_ARCHIVAGE'
                  LEFT JOIN V_SITU_VERIF_VA v ON v.these_id = t.id

         UNION ALL

         --
         -- RDV_BU_SAISIE_DOCTORANT : franchie si données doctorant saisies
         --
         SELECT
             t.id AS                      these_id,
             e.id AS                      etape_id,
             e.code,
             e.ORDRE,
             coalesce(v.ok, 0)            franchie,
             (CASE WHEN rdv.COORD_DOCTORANT IS NULL THEN 0 ELSE 1 END +
              CASE WHEN rdv.DISPO_DOCTORANT IS NULL THEN 0 ELSE 1 END) resultat,
             2                            objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'RDV_BU_SAISIE_DOCTORANT'
                  LEFT JOIN V_SITU_RDV_BU_SAISIE_DOCT v ON v.these_id = t.id
                  LEFT JOIN RDV_BU rdv ON rdv.THESE_ID = t.id

         UNION ALL

         --
         -- RDV_BU_VALIDATION_BU : franchie si /*données BU saisies ET*/ une validation BU existe
         --
         SELECT
             t.id AS               these_id,
             e.id AS               etape_id,
             e.code,
             e.ORDRE,
             /*coalesce(vs.ok, 0) **/ coalesce(v.valide, 0) franchie,
             /*coalesce(vs.ok, 0) +*/ coalesce(v.valide, 0) resultat,
             /*2*/1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'RDV_BU_VALIDATION_BU'
             --LEFT JOIN V_SITU_RDV_BU_SAISIE_BU vs ON vs.these_id = t.id
                  LEFT JOIN V_SITU_RDV_BU_VALIDATION_BU v ON v.these_id = t.id

         UNION ALL

         --
         -- DEPOT_VERSION_ORIGINALE_CORRIGEE : franchie si version originale corrigée déposée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'DEPOT_VERSION_ORIGINALE_CORRIGEE'
                  LEFT JOIN V_SITU_DEPOT_VOC v ON v.these_id = t.id

         UNION ALL

         --
         -- AUTORISATION_DIFFUSION_THESE_VERSION_CORRIGEE : franchie si données saisies
         --
         SELECT
             t.id AS these_id,
             e.id AS etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.diffusion_id IS NULL THEN 0 ELSE 1 END franchie,
             CASE WHEN v.diffusion_id IS NULL THEN 0 ELSE 1 END resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'AUTORISATION_DIFFUSION_THESE_VERSION_CORRIGEE'
                  LEFT JOIN V_SITU_AUTORIS_DIFF_THESE_VOC v ON v.these_id = t.id

         UNION ALL

         --
         -- ATTESTATIONS_VERSION_CORRIGEE : franchie si données saisies
         --
         SELECT
             t.id AS these_id,
             e.id AS etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.attestation_id IS NULL THEN 0 ELSE 1 END franchie,
             CASE WHEN v.attestation_id IS NULL THEN 0 ELSE 1 END resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'ATTESTATIONS_VERSION_CORRIGEE'
                  LEFT JOIN V_SITU_ATTESTATIONS_VOC v ON v.these_id = t.id

         UNION ALL

         --
         -- ARCHIVABILITE_VERSION_ORIGINALE_CORRIGEE : franchie si l'archivabilité de la version originale corrigée a été testée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.THESE_ID IS NULL THEN 0 ELSE 1 END franchie,
             CASE WHEN v.EST_VALIDE IS NULL OR v.EST_VALIDE = 0 THEN 0 ELSE 1 END resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'ARCHIVABILITE_VERSION_ORIGINALE_CORRIGEE'
                  LEFT JOIN V_SITU_ARCHIVAB_VOC v ON v.these_id = t.id

         UNION ALL

         --
         -- DEPOT_VERSION_ARCHIVAGE_CORRIGEE : franchie si version d'archivage corrigée déposée
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END franchie,
             CASE WHEN v.fichier_id IS NULL
                      THEN 0
                  ELSE 1 END resultat,
             1          objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'DEPOT_VERSION_ARCHIVAGE_CORRIGEE'
                  LEFT JOIN V_SITU_DEPOT_VAC v ON v.these_id = t.id
                  LEFT JOIN fichier f ON f.id = v.fichier_id

         UNION ALL

         --
         -- ARCHIVABILITE_VERSION_ARCHIVAGE_CORRIGEE : franchie si la version d'archivage corrigée est archivable
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.EST_VALIDE = 1 THEN 1 ELSE 0 END franchie,
             CASE WHEN v.EST_VALIDE = 1 THEN 1 ELSE 0 END resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'ARCHIVABILITE_VERSION_ARCHIVAGE_CORRIGEE'
                  LEFT JOIN V_SITU_ARCHIVAB_VAC v ON v.these_id = t.id

         UNION ALL

         --
         -- VERIFICATION_VERSION_ARCHIVAGE_CORRIGEE : franchie si la version corrigée est certifiée conforme
         --
         SELECT
             t.id AS    these_id,
             e.id AS    etape_id,
             e.code,
             e.ORDRE,
             CASE WHEN v.EST_CONFORME = 1 THEN 1 ELSE 0 END franchie,
             CASE WHEN v.EST_CONFORME = 1 THEN 1 ELSE 0 END resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'VERIFICATION_VERSION_ARCHIVAGE_CORRIGEE'
                  LEFT JOIN V_SITU_VERIF_VAC v ON v.these_id = t.id

         UNION ALL

         --
         -- DEPOT_VERSION_CORRIGEE_VALIDATION_DOCTORANT : franchie si la validation attendue existe
         --
         SELECT
             t.id AS               these_id,
             e.id AS               etape_id,
             e.code,
             e.ORDRE,
             coalesce(v.valide, 0) franchie,
             coalesce(v.valide, 0) resultat,
             1 objectif
         FROM these t
                  JOIN WF_ETAPE e ON e.code = 'DEPOT_VERSION_CORRIGEE_VALIDATION_DOCTORANT'
                  LEFT JOIN V_SITU_DEPOT_VC_VALID_DOCT v ON v.these_id = t.id

         UNION ALL

         --
         -- DEPOT_VERSION_CORRIGEE_VALIDATION_DIRECTEUR : franchie si toutes les validations attendues existent
         --
         select * from (
                           WITH tmp AS (
                               SELECT
                                   these_id,
                                   sum(valide)   AS resultat,
                                   count(valide) AS objectif
                               FROM V_SITU_DEPOT_VC_VALID_DIR
                               GROUP BY these_id
                           )
                           SELECT
                               t.id AS                 these_id,
                               e.id AS                 etape_id,
                               e.code,
                               e.ORDRE,
                               case when coalesce(v.resultat, 0) = v.objectif then 1 else 0 end franchie,
                               coalesce(v.resultat, 0) resultat,
                               v.objectif
                           FROM these t
                                    JOIN WF_ETAPE e ON e.code = 'DEPOT_VERSION_CORRIGEE_VALIDATION_DIRECTEUR'
                                    LEFT JOIN tmp v ON v.these_id = t.id
                       )

         UNION ALL

         --
         -- REMISE_EXEMPLAIRE_PAPIER_THESE_CORRIGEE  : franchie pas pour le moment
         --
         select * from (
                           WITH tmp_last AS (
                               SELECT
                                   THESE_ID as these_id,
                                   count(THESE_ID) AS resultat
                               FROM V_SITU_VERSION_PAPIER_CORRIGEE
                               GROUP BY THESE_ID
                           )
                           SELECT
                               t.id AS                 these_id,
                               e.id AS                 etape_id,
                               e.code,
                               e.ORDRE,
                               coalesce(tl.resultat, 0) franchie,
                               0,
                               1
                           FROM these t
                                    JOIN WF_ETAPE e ON e.code = 'REMISE_EXEMPLAIRE_PAPIER_THESE_CORRIGEE'
                                    LEFT JOIN tmp_last tl ON tl.these_id = t.id
                       )

     ) t
         JOIN V_WF_ETAPE_PERTIN v ON t.these_id = v.these_id AND t.etape_id = v.etape_id;
  CREATE OR REPLACE PACKAGE /*"SYGAL".*/"APP_IMPORT" IS

  PROCEDURE REFRESH_MV( mview_name VARCHAR2 );
  PROCEDURE SYNC_TABLES;
  PROCEDURE SYNCHRONISATION;

  PROCEDURE STORE_OBSERV_RESULTS;

END APP_IMPORT;
/
  CREATE OR REPLACE PACKAGE /*"SYGAL".*/"APP_WORKFLOW" AS

    /**
     * @deprecated depuis l'utilisation de 'dense_rank' pour calculer les témoins 'attegnable' et 'courant'
     * dans la vue V_WORKFLOW.
     */
    function atteignable(p_etape_id NUMERIC, p_these_id NUMERIC) return NUMERIC;

END APP_WORKFLOW;
/
  CREATE OR REPLACE PACKAGE /*"SYGAL".*/"UNICAEN_IMPORT" AS

  PROCEDURE set_current_user(p_current_user IN INTEGER);
  FUNCTION get_current_user return INTEGER;

  FUNCTION get_current_annee RETURN INTEGER;
  PROCEDURE set_current_annee (p_current_annee INTEGER);

  FUNCTION get_sql_criterion( table_name varchar2, sql_criterion VARCHAR2 ) RETURN CLOB;
  PROCEDURE SYNC_LOG( message CLOB, table_name VARCHAR2 DEFAULT NULL, source_code VARCHAR2 DEFAULT NULL );

  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ECOLE_DOCT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_UNITE_RECH(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_INDIVIDU(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_DOCTORANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_THESE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ROLE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ACTEUR(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_VARIABLE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TITRE_ACCES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_THESE_ANNEE_UNIV(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_FINANCEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');

  -- END OF AUTOMATIC GENERATION --
END UNICAEN_IMPORT;
/
  CREATE OR REPLACE PACKAGE /*"SYGAL".*/"UNICAEN_ORACLE" AS

  FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2;

  FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB;

  FUNCTION STR_FIND( haystack CLOB, needle VARCHAR2 ) RETURN NUMERIC;

  FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC;

  FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE, date_obs DATE DEFAULT NULL, inclusif NUMERIC DEFAULT 0 ) RETURN NUMERIC;

END UNICAEN_ORACLE;
/
  CREATE OR REPLACE FUNCTION /*"SYGAL".*/"GEN_TABLE_INSERTS" (V_TABLE_NAME VARCHAR2) RETURN clob
AS
  v_column_list     clob;
  v_insert_list     clob;
  v_ref_cur_columns clob;
  v_ref_cur_query   clob;
  v_ref_cur_output  clob;
  v_column_name     clob;
  v_result          clob;
  cursor c1 is select column_name, data_type from all_tab_columns where table_name = v_table_name
               order by column_id;
  refcur            sys_refcursor;
begin
  for i in c1 loop
    v_column_list := v_column_list||','||i.column_name;
    if i.data_type = 'NUMBER' then
      v_column_name := i.column_name;
    elsif i.data_type = 'DATE' then
      v_column_name :=
      chr(39)||'to_date('||chr(39)||'||chr(39)'||'||to_char('||i.column_name||','||chr(39)||'dd/mm/yyyy
hh:mi:ss'||chr(39)||')||chr(39)||'||chr(39)||', '||chr(39)||'||chr(39)||'||chr(39)||'dd/mm/rrrr
hh:mi:ss'||chr(39)||'||chr(39)||'||chr(39)||')'||chr(39);
    elsif i.data_type = 'VARCHAR2' then
      v_column_name := 'chr(39)||'||i.column_name||'||chr(39)';
    end if;
    v_ref_cur_columns := v_ref_cur_columns||'||'||chr(39)||','||chr(39)||'||'||v_column_name;
  end loop;
  v_column_list     := ltrim(v_column_list,',');
  v_ref_cur_columns := substr(v_ref_cur_columns,8);

  v_insert_list     := 'INSERT INTO '||v_table_name||' ('||v_column_list||') VALUES ';
  v_ref_cur_query   := 'SELECT '||v_ref_cur_columns||' FROM '||v_table_name;

  open refcur for v_ref_cur_query;
  loop
    fetch refcur into v_ref_cur_output;
    exit when refcur%notfound;
    v_ref_cur_output := '('||v_ref_cur_output||');';
    v_ref_cur_output := replace(v_ref_cur_output,',,',',null,');
    v_ref_cur_output := replace(v_ref_cur_output,'(,','(null,');
    v_ref_cur_output := replace(v_ref_cur_output,',,)',',null)');
    v_ref_cur_output := replace(v_ref_cur_output,'null,)','null,null)');
    v_ref_cur_output := v_insert_list||v_ref_cur_output;
    dbms_output.put_line (v_ref_cur_output);

    v_result := v_result||v_ref_cur_output || chr(10);
  end loop;

  return v_result;
end;
/
  CREATE OR REPLACE FUNCTION /*"SYGAL".*/"INDIVIDU_HAYSTACK" (
  NOM_USUEL varchar2,
  NOM_PATRONYMIQUE varchar2,
  PRENOM1 varchar2,
  EMAIL varchar2,
  SOURCE_CODE varchar2) RETURN VARCHAR2
AS
  BEGIN
    return trim(UNICAEN_ORACLE.str_reduce(
                    NOM_USUEL || ' ' || PRENOM1 || ' ' || NOM_PATRONYMIQUE || ' ' || PRENOM1 || ' ' ||
                    PRENOM1 || ' ' || NOM_USUEL || ' ' || PRENOM1 || ' ' || NOM_PATRONYMIQUE || ' ' ||
                    EMAIL || ' ' ||
                    SOURCE_CODE
                ));
  END;
/
  CREATE OR REPLACE PACKAGE BODY /*"SYGAL".*/"APP_IMPORT" 
IS
  PROCEDURE REFRESH_MV( mview_name VARCHAR2 ) IS
  BEGIN
    DBMS_MVIEW.REFRESH(mview_name, 'C');
    EXCEPTION WHEN OTHERS THEN
      UNICAEN_IMPORT.SYNC_LOG( SQLERRM, mview_name );
  END;

  PROCEDURE SYNC_TABLES
  IS
  BEGIN
    -- mise à jour des tables à partir des vues sources
    -- NB: l'ordre importe !
    UNICAEN_IMPORT.MAJ_STRUCTURE();
    UNICAEN_IMPORT.MAJ_ETABLISSEMENT();
    UNICAEN_IMPORT.MAJ_ECOLE_DOCT();
    UNICAEN_IMPORT.MAJ_UNITE_RECH();
    UNICAEN_IMPORT.MAJ_INDIVIDU();
    UNICAEN_IMPORT.MAJ_DOCTORANT();
    UNICAEN_IMPORT.MAJ_THESE();
    UNICAEN_IMPORT.MAJ_THESE_ANNEE_UNIV();
    UNICAEN_IMPORT.MAJ_ROLE();
    UNICAEN_IMPORT.MAJ_ACTEUR();
    UNICAEN_IMPORT.MAJ_VARIABLE();
    UNICAEN_IMPORT.MAJ_FINANCEMENT();
    UNICAEN_IMPORT.MAJ_TITRE_ACCES();
    REFRESH_MV('MV_RECHERCHE_THESE'); -- NB: à faire en dernier
  END;

  --
  -- Recherche des changements de type UPDATE concernant la colonne de table observée et
  -- enregistrement de ces changements dans une table.
  --
  PROCEDURE STORE_UPDATE_OBSERV_RESULT(observ IMPORT_OBSERV%ROWTYPE)
  IS
    u_col_name VARCHAR2(50) := 'U_' || observ.column_name;
    where_to_value CLOB := 'v.' || observ.column_name || case when observ.to_value is null then ' is null' else ' = ''' || observ.to_value || '''' end;
    i_query clob := 'select v.source_code, t.' || observ.column_name || ' || ''>'' || v.' || observ.column_name || ' detail ' ||
                    'from v_diff_' || observ.table_name || ' v join ' || observ.table_name || ' t on t.source_code = v.source_code where ' || u_col_name || ' = 1 and ' || where_to_value || ' order by v.source_code';

    TYPE r_cursor is REF CURSOR;
    rc r_cursor;
    l_id CLOB;
    l_detail CLOB;
  BEGIN
    --DBMS_OUTPUT.PUT_LINE(i_query);
    OPEN rc FOR i_query;
    LOOP
      FETCH rc INTO l_id, l_detail;
      EXIT WHEN rc%NOTFOUND;
      --DBMS_OUTPUT.PUT_LINE(l_id); DBMS_OUTPUT.PUT_LINE(l_detail);
      insert into IMPORT_OBSERV_RESULT(ID, IMPORT_OBSERV_ID, DATE_CREATION, SOURCE_CODE, RESULTAT) values
      (IMPORT_OBSERV_RESULT_ID_SEQ.nextval, observ.id, sysdate, l_id, l_detail);
    END LOOP;
  END;

  PROCEDURE STORE_OBSERV_RESULTS
  IS
  BEGIN
    for observ in (select * from IMPORT_OBSERV where enabled = 1) loop
      if (observ.operation = 'UPDATE') then
        STORE_UPDATE_OBSERV_RESULT(observ);
      end if;
    end loop;
  END;

  PROCEDURE SYNCHRONISATION
  IS
  BEGIN
    STORE_OBSERV_RESULTS;
    SYNC_TABLES;
  END;

END APP_IMPORT;
/
  CREATE OR REPLACE PACKAGE BODY /*"SYGAL".*/"APP_WORKFLOW" 
AS

    /**
     * @deprecated depuis l'utilisation de 'dense_rank' pour calculer les témoins 'attegnable' et 'courant'
     * dans la vue V_WORKFLOW.
     */
    function atteignable(p_etape_id NUMERIC, p_these_id NUMERIC) return NUMERIC AS
        v_ordre numeric;
    BEGIN
        select ordre into v_ordre from wf_etape where id = p_etape_id;
        --DBMS_OUTPUT.PUT_LINE('ordre ' || v_ordre);
        for row in (
            select code, ORDRE, franchie, resultat, objectif
            from V_WORKFLOW v
            where v.these_id = p_these_id and v.ordre < v_ordre
            order by v.ordre
            ) loop
            --DBMS_OUTPUT.PUT_LINE(rpad(row.ordre, 5) || ' ' || row.code || ' : ' || row.franchie);
            if row.franchie = 0 then
                return 0;
            end if;
        end loop;

        RETURN 1;
    END atteignable;

END APP_WORKFLOW;
/
  CREATE OR REPLACE PACKAGE BODY /*"SYGAL".*/"UNICAEN_IMPORT" AS

  v_current_user INTEGER;
  v_current_annee INTEGER;



  FUNCTION get_current_user RETURN INTEGER IS
    BEGIN
      IF v_current_user IS NULL THEN
        v_current_user := 1; -- A remplacer par l'utilisateur (ID de la table USER) qui sera le créateur ou le modificateur des données
      END IF;
      RETURN v_current_user;
    END get_current_user;

  PROCEDURE set_current_user (p_current_user INTEGER) is
    BEGIN
      v_current_user := p_current_user;
    END set_current_user;



  FUNCTION get_current_annee RETURN INTEGER IS
    BEGIN
      IF v_current_annee IS NULL THEN
        v_current_annee := NULL; -- A remplacer par l'année d'import souhaitée (si vous avez de l'annualisation de prévue dans votre BDD)
      END IF;
      RETURN v_current_annee;
    END get_current_annee;

  PROCEDURE set_current_annee (p_current_annee INTEGER) IS
    BEGIN
      v_current_annee := p_current_annee;
    END set_current_annee;



  FUNCTION get_sql_criterion( table_name varchar2, sql_criterion VARCHAR2 ) RETURN CLOB IS
    BEGIN
      IF sql_criterion <> '' OR sql_criterion IS NOT NULL THEN
        RETURN sql_criterion;
      END IF;
      RETURN '';
      /* Exemple d'usage :

      RETURN CASE table_name
        WHEN 'INTERVENANT' THEN -- Met à jour toutes les données sauf le statut, qui sera traité à part
          'WHERE IMPORT_ACTION IN (''delete'',''update'',''undelete'')'

        WHEN 'AFFECTATION_RECHERCHE' THEN
          'WHERE INTERVENANT_ID IS NOT NULL'

        WHEN 'ADRESSE_INTERVENANT' THEN
          'WHERE INTERVENANT_ID IS NOT NULL'

        WHEN 'ELEMENT_TAUX_REGIMES' THEN
          'WHERE IMPORT_ACTION IN (''delete'',''insert'',''undelete'')'

        ELSE
          ''
      END;*/
    END;



  PROCEDURE SYNC_LOG( message CLOB, table_name VARCHAR2 DEFAULT NULL, source_code VARCHAR2 DEFAULT NULL ) IS
    BEGIN
      INSERT INTO SYNC_LOG("ID","DATE_SYNC","MESSAGE","TABLE_NAME","SOURCE_CODE") VALUES (SYNC_LOG_ID_SEQ.NEXTVAL, SYSDATE, message,table_name,source_code);
    END SYNC_LOG;



  FUNCTION IN_COLUMN_LIST( VALEUR VARCHAR2, CHAMPS CLOB ) RETURN NUMERIC IS
    BEGIN
      IF REGEXP_LIKE(CHAMPS, '(^|,)[ \t\r\n\v\f]*' || VALEUR || '[ \t\r\n\v\f]*(,|$)') THEN RETURN 1; END IF;
      RETURN 0;
    END;


  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_STRUCTURE.* FROM V_DIFF_STRUCTURE ' || get_sql_criterion('STRUCTURE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO STRUCTURE
              ( id, CODE,LIBELLE,SIGLE,TYPE_STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,STRUCTURE_ID_SEQ.NEXTVAL), diff_row.CODE,diff_row.LIBELLE,diff_row.SIGLE,diff_row.TYPE_STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SIGLE = 1 AND IN_COLUMN_LIST('SIGLE',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET SIGLE = diff_row.SIGLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('TYPE_STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET TYPE_STRUCTURE_ID = diff_row.TYPE_STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SIGLE = 1 AND IN_COLUMN_LIST('SIGLE',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET SIGLE = diff_row.SIGLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('TYPE_STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET TYPE_STRUCTURE_ID = diff_row.TYPE_STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'STRUCTURE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_STRUCTURE;



  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ETABLISSEMENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ETABLISSEMENT.* FROM V_DIFF_ETABLISSEMENT ' || get_sql_criterion('ETABLISSEMENT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ETABLISSEMENT
              ( id, STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ETABLISSEMENT_ID_SEQ.NEXTVAL), diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ETABLISSEMENT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE ETABLISSEMENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ETABLISSEMENT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ETABLISSEMENT;



  PROCEDURE MAJ_ECOLE_DOCT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ECOLE_DOCT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ECOLE_DOCT.* FROM V_DIFF_ECOLE_DOCT ' || get_sql_criterion('ECOLE_DOCT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ECOLE_DOCT
              ( id, STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ECOLE_DOCT_ID_SEQ.NEXTVAL), diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ECOLE_DOCT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ECOLE_DOCT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ECOLE_DOCT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE ECOLE_DOCT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ECOLE_DOCT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ECOLE_DOCT;



  PROCEDURE MAJ_UNITE_RECH(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_UNITE_RECH%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_UNITE_RECH.* FROM V_DIFF_UNITE_RECH ' || get_sql_criterion('UNITE_RECH',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO UNITE_RECH
              ( id, STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,UNITE_RECH_ID_SEQ.NEXTVAL), diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE UNITE_RECH SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE UNITE_RECH SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE UNITE_RECH SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE UNITE_RECH SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'UNITE_RECH', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_UNITE_RECH;



  PROCEDURE MAJ_INDIVIDU(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_INDIVIDU%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_INDIVIDU.* FROM V_DIFF_INDIVIDU ' || get_sql_criterion('INDIVIDU',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO INDIVIDU
              ( id, CIVILITE,DATE_NAISSANCE,EMAIL,NATIONALITE,NOM_PATRONYMIQUE,NOM_USUEL,PRENOM1,PRENOM2,PRENOM3,SUPANN_ID,TYPE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,INDIVIDU_ID_SEQ.NEXTVAL), diff_row.CIVILITE,diff_row.DATE_NAISSANCE,diff_row.EMAIL,diff_row.NATIONALITE,diff_row.NOM_PATRONYMIQUE,diff_row.NOM_USUEL,diff_row.PRENOM1,diff_row.PRENOM2,diff_row.PRENOM3,diff_row.SUPANN_ID,diff_row.TYPE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CIVILITE = 1 AND IN_COLUMN_LIST('CIVILITE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET CIVILITE = diff_row.CIVILITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NATIONALITE = 1 AND IN_COLUMN_LIST('NATIONALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET NATIONALITE = diff_row.NATIONALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM1 = 1 AND IN_COLUMN_LIST('PRENOM1',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET PRENOM1 = diff_row.PRENOM1 WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM2 = 1 AND IN_COLUMN_LIST('PRENOM2',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET PRENOM2 = diff_row.PRENOM2 WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM3 = 1 AND IN_COLUMN_LIST('PRENOM3',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET PRENOM3 = diff_row.PRENOM3 WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_ID = 1 AND IN_COLUMN_LIST('SUPANN_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET SUPANN_ID = diff_row.SUPANN_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE = 1 AND IN_COLUMN_LIST('TYPE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET TYPE = diff_row.TYPE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE INDIVIDU SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CIVILITE = 1 AND IN_COLUMN_LIST('CIVILITE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET CIVILITE = diff_row.CIVILITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NATIONALITE = 1 AND IN_COLUMN_LIST('NATIONALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET NATIONALITE = diff_row.NATIONALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM1 = 1 AND IN_COLUMN_LIST('PRENOM1',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET PRENOM1 = diff_row.PRENOM1 WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM2 = 1 AND IN_COLUMN_LIST('PRENOM2',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET PRENOM2 = diff_row.PRENOM2 WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM3 = 1 AND IN_COLUMN_LIST('PRENOM3',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET PRENOM3 = diff_row.PRENOM3 WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_ID = 1 AND IN_COLUMN_LIST('SUPANN_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET SUPANN_ID = diff_row.SUPANN_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE = 1 AND IN_COLUMN_LIST('TYPE',IGNORE_UPD_COLS) = 0) THEN UPDATE INDIVIDU SET TYPE = diff_row.TYPE WHERE ID = diff_row.id; END IF;
            UPDATE INDIVIDU SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'INDIVIDU', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_INDIVIDU;



  PROCEDURE MAJ_DOCTORANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_DOCTORANT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_DOCTORANT.* FROM V_DIFF_DOCTORANT ' || get_sql_criterion('DOCTORANT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO DOCTORANT
              ( id, ETABLISSEMENT_ID,INDIVIDU_ID,INE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,DOCTORANT_ID_SEQ.NEXTVAL), diff_row.ETABLISSEMENT_ID,diff_row.INDIVIDU_ID,diff_row.INE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE DOCTORANT SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INDIVIDU_ID = 1 AND IN_COLUMN_LIST('INDIVIDU_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE DOCTORANT SET INDIVIDU_ID = diff_row.INDIVIDU_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INE = 1 AND IN_COLUMN_LIST('INE',IGNORE_UPD_COLS) = 0) THEN UPDATE DOCTORANT SET INE = diff_row.INE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE DOCTORANT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE DOCTORANT SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INDIVIDU_ID = 1 AND IN_COLUMN_LIST('INDIVIDU_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE DOCTORANT SET INDIVIDU_ID = diff_row.INDIVIDU_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INE = 1 AND IN_COLUMN_LIST('INE',IGNORE_UPD_COLS) = 0) THEN UPDATE DOCTORANT SET INE = diff_row.INE WHERE ID = diff_row.id; END IF;
            UPDATE DOCTORANT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'DOCTORANT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_DOCTORANT;



  PROCEDURE MAJ_THESE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_THESE_sav%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_THESE.* FROM V_DIFF_THESE ' || get_sql_criterion('THESE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO THESE
              ( id, ANNEE_UNIV_1ERE_INSC,CORREC_AUTORISEE,DATE_ABANDON,DATE_AUTORIS_SOUTENANCE,DATE_FIN_CONFID,DATE_PREM_INSC,DATE_PREV_SOUTENANCE,DATE_SOUTENANCE,DATE_TRANSFERT,DOCTORANT_ID,ECOLE_DOCT_ID,ETABLISSEMENT_ID,ETAT_THESE,LIB_DISC,LIB_ETAB_COTUT,LIB_PAYS_COTUT,RESULTAT,SOUTENANCE_AUTORIS,TEM_AVENANT_COTUT,TITRE,UNITE_RECH_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,THESE_ID_SEQ.NEXTVAL), diff_row.ANNEE_UNIV_1ERE_INSC,diff_row.CORREC_AUTORISEE,diff_row.DATE_ABANDON,diff_row.DATE_AUTORIS_SOUTENANCE,diff_row.DATE_FIN_CONFID,diff_row.DATE_PREM_INSC,diff_row.DATE_PREV_SOUTENANCE,diff_row.DATE_SOUTENANCE,diff_row.DATE_TRANSFERT,diff_row.DOCTORANT_ID,diff_row.ECOLE_DOCT_ID,diff_row.ETABLISSEMENT_ID,diff_row.ETAT_THESE,diff_row.LIB_DISC,diff_row.LIB_ETAB_COTUT,diff_row.LIB_PAYS_COTUT,diff_row.RESULTAT,diff_row.SOUTENANCE_AUTORIS,diff_row.TEM_AVENANT_COTUT,diff_row.TITRE,diff_row.UNITE_RECH_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_UNIV_1ERE_INSC = 1 AND IN_COLUMN_LIST('ANNEE_UNIV_1ERE_INSC',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ANNEE_UNIV_1ERE_INSC = diff_row.ANNEE_UNIV_1ERE_INSC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CORREC_AUTORISEE = 1 AND IN_COLUMN_LIST('CORREC_AUTORISEE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET CORREC_AUTORISEE = diff_row.CORREC_AUTORISEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_ABANDON = 1 AND IN_COLUMN_LIST('DATE_ABANDON',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_ABANDON = diff_row.DATE_ABANDON WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_AUTORIS_SOUTENANCE = 1 AND IN_COLUMN_LIST('DATE_AUTORIS_SOUTENANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_AUTORIS_SOUTENANCE = diff_row.DATE_AUTORIS_SOUTENANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_FIN_CONFID = 1 AND IN_COLUMN_LIST('DATE_FIN_CONFID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_FIN_CONFID = diff_row.DATE_FIN_CONFID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_PREM_INSC = 1 AND IN_COLUMN_LIST('DATE_PREM_INSC',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_PREM_INSC = diff_row.DATE_PREM_INSC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_PREV_SOUTENANCE = 1 AND IN_COLUMN_LIST('DATE_PREV_SOUTENANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_PREV_SOUTENANCE = diff_row.DATE_PREV_SOUTENANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_SOUTENANCE = 1 AND IN_COLUMN_LIST('DATE_SOUTENANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_SOUTENANCE = diff_row.DATE_SOUTENANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_TRANSFERT = 1 AND IN_COLUMN_LIST('DATE_TRANSFERT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_TRANSFERT = diff_row.DATE_TRANSFERT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DOCTORANT_ID = 1 AND IN_COLUMN_LIST('DOCTORANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DOCTORANT_ID = diff_row.DOCTORANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ECOLE_DOCT_ID = 1 AND IN_COLUMN_LIST('ECOLE_DOCT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ECOLE_DOCT_ID = diff_row.ECOLE_DOCT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAT_THESE = 1 AND IN_COLUMN_LIST('ETAT_THESE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ETAT_THESE = diff_row.ETAT_THESE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_DISC = 1 AND IN_COLUMN_LIST('LIB_DISC',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET LIB_DISC = diff_row.LIB_DISC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_ETAB_COTUT = 1 AND IN_COLUMN_LIST('LIB_ETAB_COTUT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET LIB_ETAB_COTUT = diff_row.LIB_ETAB_COTUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_PAYS_COTUT = 1 AND IN_COLUMN_LIST('LIB_PAYS_COTUT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET LIB_PAYS_COTUT = diff_row.LIB_PAYS_COTUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_RESULTAT = 1 AND IN_COLUMN_LIST('RESULTAT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET RESULTAT = diff_row.RESULTAT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SOUTENANCE_AUTORIS = 1 AND IN_COLUMN_LIST('SOUTENANCE_AUTORIS',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET SOUTENANCE_AUTORIS = diff_row.SOUTENANCE_AUTORIS WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEM_AVENANT_COTUT = 1 AND IN_COLUMN_LIST('TEM_AVENANT_COTUT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET TEM_AVENANT_COTUT = diff_row.TEM_AVENANT_COTUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TITRE = 1 AND IN_COLUMN_LIST('TITRE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET TITRE = diff_row.TITRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_UNITE_RECH_ID = 1 AND IN_COLUMN_LIST('UNITE_RECH_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET UNITE_RECH_ID = diff_row.UNITE_RECH_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE THESE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_UNIV_1ERE_INSC = 1 AND IN_COLUMN_LIST('ANNEE_UNIV_1ERE_INSC',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ANNEE_UNIV_1ERE_INSC = diff_row.ANNEE_UNIV_1ERE_INSC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CORREC_AUTORISEE = 1 AND IN_COLUMN_LIST('CORREC_AUTORISEE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET CORREC_AUTORISEE = diff_row.CORREC_AUTORISEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_ABANDON = 1 AND IN_COLUMN_LIST('DATE_ABANDON',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_ABANDON = diff_row.DATE_ABANDON WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_AUTORIS_SOUTENANCE = 1 AND IN_COLUMN_LIST('DATE_AUTORIS_SOUTENANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_AUTORIS_SOUTENANCE = diff_row.DATE_AUTORIS_SOUTENANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_FIN_CONFID = 1 AND IN_COLUMN_LIST('DATE_FIN_CONFID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_FIN_CONFID = diff_row.DATE_FIN_CONFID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_PREM_INSC = 1 AND IN_COLUMN_LIST('DATE_PREM_INSC',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_PREM_INSC = diff_row.DATE_PREM_INSC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_PREV_SOUTENANCE = 1 AND IN_COLUMN_LIST('DATE_PREV_SOUTENANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_PREV_SOUTENANCE = diff_row.DATE_PREV_SOUTENANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_SOUTENANCE = 1 AND IN_COLUMN_LIST('DATE_SOUTENANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_SOUTENANCE = diff_row.DATE_SOUTENANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_TRANSFERT = 1 AND IN_COLUMN_LIST('DATE_TRANSFERT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DATE_TRANSFERT = diff_row.DATE_TRANSFERT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DOCTORANT_ID = 1 AND IN_COLUMN_LIST('DOCTORANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET DOCTORANT_ID = diff_row.DOCTORANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ECOLE_DOCT_ID = 1 AND IN_COLUMN_LIST('ECOLE_DOCT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ECOLE_DOCT_ID = diff_row.ECOLE_DOCT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAT_THESE = 1 AND IN_COLUMN_LIST('ETAT_THESE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET ETAT_THESE = diff_row.ETAT_THESE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_DISC = 1 AND IN_COLUMN_LIST('LIB_DISC',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET LIB_DISC = diff_row.LIB_DISC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_ETAB_COTUT = 1 AND IN_COLUMN_LIST('LIB_ETAB_COTUT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET LIB_ETAB_COTUT = diff_row.LIB_ETAB_COTUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_PAYS_COTUT = 1 AND IN_COLUMN_LIST('LIB_PAYS_COTUT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET LIB_PAYS_COTUT = diff_row.LIB_PAYS_COTUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_RESULTAT = 1 AND IN_COLUMN_LIST('RESULTAT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET RESULTAT = diff_row.RESULTAT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SOUTENANCE_AUTORIS = 1 AND IN_COLUMN_LIST('SOUTENANCE_AUTORIS',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET SOUTENANCE_AUTORIS = diff_row.SOUTENANCE_AUTORIS WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEM_AVENANT_COTUT = 1 AND IN_COLUMN_LIST('TEM_AVENANT_COTUT',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET TEM_AVENANT_COTUT = diff_row.TEM_AVENANT_COTUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TITRE = 1 AND IN_COLUMN_LIST('TITRE',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET TITRE = diff_row.TITRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_UNITE_RECH_ID = 1 AND IN_COLUMN_LIST('UNITE_RECH_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE SET UNITE_RECH_ID = diff_row.UNITE_RECH_ID WHERE ID = diff_row.id; END IF;
            UPDATE THESE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'THESE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_THESE;



  PROCEDURE MAJ_ROLE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ROLE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ROLE.* FROM V_DIFF_ROLE ' || get_sql_criterion('ROLE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ROLE
              ( id, CODE,LIBELLE,ROLE_ID,STRUCTURE_ID,THESE_DEP,TYPE_STRUCTURE_DEPENDANT_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ROLE_ID_SEQ.NEXTVAL), diff_row.CODE,diff_row.LIBELLE,diff_row.ROLE_ID,diff_row.STRUCTURE_ID,diff_row.THESE_DEP,diff_row.TYPE_STRUCTURE_DEPENDANT_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_DEP = 1 AND IN_COLUMN_LIST('THESE_DEP',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET THESE_DEP = diff_row.THESE_DEP WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_STRUCTURE_DEPENDANT_ID = 1 AND IN_COLUMN_LIST('TYPE_STRUCTURE_DEPENDANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET TYPE_STRUCTURE_DEPENDANT_ID = diff_row.TYPE_STRUCTURE_DEPENDANT_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ROLE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_DEP = 1 AND IN_COLUMN_LIST('THESE_DEP',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET THESE_DEP = diff_row.THESE_DEP WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_STRUCTURE_DEPENDANT_ID = 1 AND IN_COLUMN_LIST('TYPE_STRUCTURE_DEPENDANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ROLE SET TYPE_STRUCTURE_DEPENDANT_ID = diff_row.TYPE_STRUCTURE_DEPENDANT_ID WHERE ID = diff_row.id; END IF;
            UPDATE ROLE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ROLE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ROLE;



  PROCEDURE MAJ_ACTEUR(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ACTEUR%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ACTEUR.* FROM V_DIFF_ACTEUR ' || get_sql_criterion('ACTEUR',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ACTEUR
              ( id, ACTEUR_ETABLISSEMENT_ID,INDIVIDU_ID,LIB_ROLE_COMPL,QUALITE,ROLE_ID,THESE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ACTEUR_ID_SEQ.NEXTVAL), diff_row.ACTEUR_ETABLISSEMENT_ID,diff_row.INDIVIDU_ID,diff_row.LIB_ROLE_COMPL,diff_row.QUALITE,diff_row.ROLE_ID,diff_row.THESE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ACTEUR_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ACTEUR_ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET ACTEUR_ETABLISSEMENT_ID = diff_row.ACTEUR_ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INDIVIDU_ID = 1 AND IN_COLUMN_LIST('INDIVIDU_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET INDIVIDU_ID = diff_row.INDIVIDU_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_ROLE_COMPL = 1 AND IN_COLUMN_LIST('LIB_ROLE_COMPL',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET LIB_ROLE_COMPL = diff_row.LIB_ROLE_COMPL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_QUALITE = 1 AND IN_COLUMN_LIST('QUALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET QUALITE = diff_row.QUALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ACTEUR SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ACTEUR_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ACTEUR_ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET ACTEUR_ETABLISSEMENT_ID = diff_row.ACTEUR_ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INDIVIDU_ID = 1 AND IN_COLUMN_LIST('INDIVIDU_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET INDIVIDU_ID = diff_row.INDIVIDU_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIB_ROLE_COMPL = 1 AND IN_COLUMN_LIST('LIB_ROLE_COMPL',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET LIB_ROLE_COMPL = diff_row.LIB_ROLE_COMPL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_QUALITE = 1 AND IN_COLUMN_LIST('QUALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET QUALITE = diff_row.QUALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ACTEUR SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;
            UPDATE ACTEUR SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ACTEUR', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ACTEUR;



  PROCEDURE MAJ_VARIABLE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_VARIABLE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_VARIABLE.* FROM V_DIFF_VARIABLE ' || get_sql_criterion('VARIABLE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO VARIABLE
              ( id, CODE,DATE_DEB_VALIDITE,DATE_FIN_VALIDITE,DESCRIPTION,ETABLISSEMENT_ID,VALEUR, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,VARIABLE_ID_SEQ.NEXTVAL), diff_row.CODE,diff_row.DATE_DEB_VALIDITE,diff_row.DATE_FIN_VALIDITE,diff_row.DESCRIPTION,diff_row.ETABLISSEMENT_ID,diff_row.VALEUR, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_DEB_VALIDITE = 1 AND IN_COLUMN_LIST('DATE_DEB_VALIDITE',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET DATE_DEB_VALIDITE = diff_row.DATE_DEB_VALIDITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_FIN_VALIDITE = 1 AND IN_COLUMN_LIST('DATE_FIN_VALIDITE',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET DATE_FIN_VALIDITE = diff_row.DATE_FIN_VALIDITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DESCRIPTION = 1 AND IN_COLUMN_LIST('DESCRIPTION',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET DESCRIPTION = diff_row.DESCRIPTION WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALEUR = 1 AND IN_COLUMN_LIST('VALEUR',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET VALEUR = diff_row.VALEUR WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE VARIABLE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_DEB_VALIDITE = 1 AND IN_COLUMN_LIST('DATE_DEB_VALIDITE',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET DATE_DEB_VALIDITE = diff_row.DATE_DEB_VALIDITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_FIN_VALIDITE = 1 AND IN_COLUMN_LIST('DATE_FIN_VALIDITE',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET DATE_FIN_VALIDITE = diff_row.DATE_FIN_VALIDITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DESCRIPTION = 1 AND IN_COLUMN_LIST('DESCRIPTION',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET DESCRIPTION = diff_row.DESCRIPTION WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALEUR = 1 AND IN_COLUMN_LIST('VALEUR',IGNORE_UPD_COLS) = 0) THEN UPDATE VARIABLE SET VALEUR = diff_row.VALEUR WHERE ID = diff_row.id; END IF;
            UPDATE VARIABLE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'VARIABLE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_VARIABLE;



  PROCEDURE MAJ_TITRE_ACCES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TITRE_ACCES%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TITRE_ACCES.* FROM V_DIFF_TITRE_ACCES ' || get_sql_criterion('TITRE_ACCES',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO TITRE_ACCES
              ( id, CODE_DEPT_TITRE_ACCES,CODE_PAYS_TITRE_ACCES,LIBELLE_ETB_TITRE_ACCES,LIBELLE_TITRE_ACCES,THESE_ID,TITRE_ACCES_INTERNE_EXTERNE,TYPE_ETB_TITRE_ACCES, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,TITRE_ACCES_ID_SEQ.NEXTVAL), diff_row.CODE_DEPT_TITRE_ACCES,diff_row.CODE_PAYS_TITRE_ACCES,diff_row.LIBELLE_ETB_TITRE_ACCES,diff_row.LIBELLE_TITRE_ACCES,diff_row.THESE_ID,diff_row.TITRE_ACCES_INTERNE_EXTERNE,diff_row.TYPE_ETB_TITRE_ACCES, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE_DEPT_TITRE_ACCES = 1 AND IN_COLUMN_LIST('CODE_DEPT_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET CODE_DEPT_TITRE_ACCES = diff_row.CODE_DEPT_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE_PAYS_TITRE_ACCES = 1 AND IN_COLUMN_LIST('CODE_PAYS_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET CODE_PAYS_TITRE_ACCES = diff_row.CODE_PAYS_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_ETB_TITRE_ACCES = 1 AND IN_COLUMN_LIST('LIBELLE_ETB_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET LIBELLE_ETB_TITRE_ACCES = diff_row.LIBELLE_ETB_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_TITRE_ACCES = 1 AND IN_COLUMN_LIST('LIBELLE_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET LIBELLE_TITRE_ACCES = diff_row.LIBELLE_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TITRE_ACCES_INTERNE_EXTERNE = 1 AND IN_COLUMN_LIST('TITRE_ACCES_INTERNE_EXTERNE',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET TITRE_ACCES_INTERNE_EXTERNE = diff_row.TITRE_ACCES_INTERNE_EXTERNE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ETB_TITRE_ACCES = 1 AND IN_COLUMN_LIST('TYPE_ETB_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET TYPE_ETB_TITRE_ACCES = diff_row.TYPE_ETB_TITRE_ACCES WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE TITRE_ACCES SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE_DEPT_TITRE_ACCES = 1 AND IN_COLUMN_LIST('CODE_DEPT_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET CODE_DEPT_TITRE_ACCES = diff_row.CODE_DEPT_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE_PAYS_TITRE_ACCES = 1 AND IN_COLUMN_LIST('CODE_PAYS_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET CODE_PAYS_TITRE_ACCES = diff_row.CODE_PAYS_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_ETB_TITRE_ACCES = 1 AND IN_COLUMN_LIST('LIBELLE_ETB_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET LIBELLE_ETB_TITRE_ACCES = diff_row.LIBELLE_ETB_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_TITRE_ACCES = 1 AND IN_COLUMN_LIST('LIBELLE_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET LIBELLE_TITRE_ACCES = diff_row.LIBELLE_TITRE_ACCES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TITRE_ACCES_INTERNE_EXTERNE = 1 AND IN_COLUMN_LIST('TITRE_ACCES_INTERNE_EXTERNE',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET TITRE_ACCES_INTERNE_EXTERNE = diff_row.TITRE_ACCES_INTERNE_EXTERNE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ETB_TITRE_ACCES = 1 AND IN_COLUMN_LIST('TYPE_ETB_TITRE_ACCES',IGNORE_UPD_COLS) = 0) THEN UPDATE TITRE_ACCES SET TYPE_ETB_TITRE_ACCES = diff_row.TYPE_ETB_TITRE_ACCES WHERE ID = diff_row.id; END IF;
            UPDATE TITRE_ACCES SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'TITRE_ACCES', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_TITRE_ACCES;



  PROCEDURE MAJ_THESE_ANNEE_UNIV(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_THESE_ANNEE_UNIV%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_THESE_ANNEE_UNIV.* FROM V_DIFF_THESE_ANNEE_UNIV ' || get_sql_criterion('THESE_ANNEE_UNIV',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO THESE_ANNEE_UNIV
              ( id, ANNEE_UNIV,THESE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,THESE_ANNEE_UNIV_ID_SEQ.NEXTVAL), diff_row.ANNEE_UNIV,diff_row.THESE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_UNIV = 1 AND IN_COLUMN_LIST('ANNEE_UNIV',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE_ANNEE_UNIV SET ANNEE_UNIV = diff_row.ANNEE_UNIV WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE_ANNEE_UNIV SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE THESE_ANNEE_UNIV SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_UNIV = 1 AND IN_COLUMN_LIST('ANNEE_UNIV',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE_ANNEE_UNIV SET ANNEE_UNIV = diff_row.ANNEE_UNIV WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE THESE_ANNEE_UNIV SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;
            UPDATE THESE_ANNEE_UNIV SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'THESE_ANNEE_UNIV', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_THESE_ANNEE_UNIV;



  PROCEDURE MAJ_FINANCEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_FINANCEMENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_FINANCEMENT.* FROM V_DIFF_FINANCEMENT ' || get_sql_criterion('FINANCEMENT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO FINANCEMENT
              ( id, ANNEE,CODE_TYPE_FINANCEMENT,COMPLEMENT_FINANCEMENT,DATE_DEBUT,DATE_FIN,LIBELLE_TYPE_FINANCEMENT,ORIGINE_FINANCEMENT_ID,QUOTITE_FINANCEMENT,THESE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,FINANCEMENT_ID_SEQ.NEXTVAL), diff_row.ANNEE,diff_row.CODE_TYPE_FINANCEMENT,diff_row.COMPLEMENT_FINANCEMENT,diff_row.DATE_DEBUT,diff_row.DATE_FIN,diff_row.LIBELLE_TYPE_FINANCEMENT,diff_row.ORIGINE_FINANCEMENT_ID,diff_row.QUOTITE_FINANCEMENT,diff_row.THESE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE = 1 AND IN_COLUMN_LIST('ANNEE',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET ANNEE = diff_row.ANNEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE_TYPE_FINANCEMENT = 1 AND IN_COLUMN_LIST('CODE_TYPE_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET CODE_TYPE_FINANCEMENT = diff_row.CODE_TYPE_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_COMPLEMENT_FINANCEMENT = 1 AND IN_COLUMN_LIST('COMPLEMENT_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET COMPLEMENT_FINANCEMENT = diff_row.COMPLEMENT_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_DEBUT = 1 AND IN_COLUMN_LIST('DATE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET DATE_DEBUT = diff_row.DATE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_FIN = 1 AND IN_COLUMN_LIST('DATE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET DATE_FIN = diff_row.DATE_FIN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_TYPE_FINANCEMENT = 1 AND IN_COLUMN_LIST('LIBELLE_TYPE_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET LIBELLE_TYPE_FINANCEMENT = diff_row.LIBELLE_TYPE_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORIGINE_FINANCEMENT_ID = 1 AND IN_COLUMN_LIST('ORIGINE_FINANCEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET ORIGINE_FINANCEMENT_ID = diff_row.ORIGINE_FINANCEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_QUOTITE_FINANCEMENT = 1 AND IN_COLUMN_LIST('QUOTITE_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET QUOTITE_FINANCEMENT = diff_row.QUOTITE_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE FINANCEMENT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE = 1 AND IN_COLUMN_LIST('ANNEE',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET ANNEE = diff_row.ANNEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE_TYPE_FINANCEMENT = 1 AND IN_COLUMN_LIST('CODE_TYPE_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET CODE_TYPE_FINANCEMENT = diff_row.CODE_TYPE_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_COMPLEMENT_FINANCEMENT = 1 AND IN_COLUMN_LIST('COMPLEMENT_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET COMPLEMENT_FINANCEMENT = diff_row.COMPLEMENT_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_DEBUT = 1 AND IN_COLUMN_LIST('DATE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET DATE_DEBUT = diff_row.DATE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_FIN = 1 AND IN_COLUMN_LIST('DATE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET DATE_FIN = diff_row.DATE_FIN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_TYPE_FINANCEMENT = 1 AND IN_COLUMN_LIST('LIBELLE_TYPE_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET LIBELLE_TYPE_FINANCEMENT = diff_row.LIBELLE_TYPE_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORIGINE_FINANCEMENT_ID = 1 AND IN_COLUMN_LIST('ORIGINE_FINANCEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET ORIGINE_FINANCEMENT_ID = diff_row.ORIGINE_FINANCEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_QUOTITE_FINANCEMENT = 1 AND IN_COLUMN_LIST('QUOTITE_FINANCEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET QUOTITE_FINANCEMENT = diff_row.QUOTITE_FINANCEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_THESE_ID = 1 AND IN_COLUMN_LIST('THESE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE FINANCEMENT SET THESE_ID = diff_row.THESE_ID WHERE ID = diff_row.id; END IF;
            UPDATE FINANCEMENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'FINANCEMENT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_FINANCEMENT;

  -- END OF AUTOMATIC GENERATION --
END UNICAEN_IMPORT;
/
  CREATE OR REPLACE PACKAGE BODY /*"SYGAL".*/"UNICAEN_ORACLE" AS

  FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2 AS
    l_return CLOB:='';
    l_temp CLOB;
    TYPE r_cursor is REF CURSOR;
    rc r_cursor;
    BEGIN
      OPEN rc FOR i_query;
      LOOP
        FETCH rc INTO L_TEMP;
        EXIT WHEN RC%NOTFOUND;
        l_return:=l_return||L_TEMP||i_seperator;
      END LOOP;
      RETURN RTRIM(l_return,i_seperator);
    END;

  FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB IS
    BEGIN
      RETURN utl_raw.cast_to_varchar2((nlssort(str, 'nls_sort=binary_ai')));
    END;

  FUNCTION STR_FIND( haystack CLOB, needle VARCHAR2 ) RETURN NUMERIC IS
    BEGIN
      IF STR_REDUCE( haystack ) LIKE STR_REDUCE( '%' || needle || '%' ) THEN RETURN 1; END IF;
      RETURN 0;
    END;

  FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC IS
    BEGIN
      RETURN CASE WHEN STR_REDUCE(haystack) LIKE STR_REDUCE(needle) THEN 1 ELSE 0 END;
    END;

  FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE, date_obs DATE DEFAULT NULL, inclusif NUMERIC DEFAULT 0 ) RETURN NUMERIC IS
    d_deb DATE;
    d_fin DATE;
    d_obs DATE;
    res NUMERIC;
    BEGIN
      IF inclusif = 1 THEN
        d_obs := TRUNC( COALESCE( d_obs     , SYSDATE ) );
        d_deb := TRUNC( COALESCE( date_debut, d_obs   ) );
        d_fin := TRUNC( COALESCE( date_fin  , d_obs   ) );
        IF d_obs BETWEEN d_deb AND d_fin THEN
          RETURN 1;
        ELSE
          RETURN 0;
        END IF;
      ELSE
        d_obs := TRUNC( COALESCE( d_obs, SYSDATE ) );
        d_deb := TRUNC( date_debut );
        d_fin := TRUNC( date_fin   );

        IF d_deb IS NOT NULL AND NOT d_deb <= d_obs THEN
          RETURN 0;
        END IF;
        IF d_fin IS NOT NULL AND NOT d_obs < d_fin THEN
          RETURN 0;
        END IF;
        RETURN 1;
      END IF;
    END;

END UNICAEN_ORACLE;
/
  CREATE OR REPLACE TRIGGER /*"SYGAL".*/"INDIVIDU_RECH_UPDATE" 
  after insert or update of NOM_USUEL,NOM_PATRONYMIQUE,PRENOM1,PRENOM2,PRENOM3,SOURCE_CODE or delete
  on 	INDIVIDU
  for each row
  DECLARE
    v_haystack CLOB := individu_haystack(:new.NOM_USUEL, :new.NOM_PATRONYMIQUE, :new.PRENOM1, :new.EMAIL, :new.SOURCE_CODE);
  BEGIN
    IF INSERTING THEN
      insert into INDIVIDU_RECH(ID, HAYSTACK) values (:new.ID, v_haystack);
    END IF;
    IF UPDATING THEN
      UPDATE INDIVIDU_RECH SET HAYSTACK = v_haystack where ID = :new.ID;
    END IF;
    IF DELETING THEN
      delete from INDIVIDU_RECH where id = :old.ID;
    END IF;
  END;
/
ALTER TRIGGER /*"SYGAL".*/"INDIVIDU_RECH_UPDATE" ENABLE;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_1" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  WITH PRIMARY KEY USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT "THESE"."ID" "ID","THESE"."ETABLISSEMENT_ID" "ETABLISSEMENT_ID","THESE"."DOCTORANT_ID" "DOCTORANT_ID","THESE"."ECOLE_DOCT_ID" "ECOLE_DOCT_ID","THESE"."UNITE_RECH_ID" "UNITE_RECH_ID","THESE"."BESOIN_EXPURGE" "BESOIN_EXPURGE","THESE"."COD_UNIT_RECH" "COD_UNIT_RECH","THESE"."CORREC_AUTORISEE" "CORREC_AUTORISEE","THESE"."DATE_AUTORIS_SOUTENANCE" "DATE_AUTORIS_SOUTENANCE","THESE"."DATE_FIN_CONFID" "DATE_FIN_CONFID","THESE"."DATE_PREM_INSC" "DATE_PREM_INSC","THESE"."DATE_PREV_SOUTENANCE" "DATE_PREV_SOUTENANCE","THESE"."DATE_SOUTENANCE" "DATE_SOUTENANCE","THESE"."ETAT_THESE" "ETAT_THESE","THESE"."LIB_DISC" "LIB_DISC","THESE"."LIB_ETAB_COTUT" "LIB_ETAB_COTUT","THESE"."LIB_PAYS_COTUT" "LIB_PAYS_COTUT","THESE"."LIB_UNIT_RECH" "LIB_UNIT_RECH","THESE"."RESULTAT" "RESULTAT","THESE"."SOUTENANCE_AUTORIS" "SOUTENANCE_AUTORIS","THESE"."TEM_AVENANT_COTUT" "TEM_AVENANT_COTUT","THESE"."TITRE" "TITRE","THESE"."SOURCE_CODE" "SOURCE_CODE","THESE"."SOURCE_ID" "SOURCE_ID","THESE"."HISTO_CREATEUR_ID" "HISTO_CREATEUR_ID","THESE"."HISTO_CREATION" "HISTO_CREATION","THESE"."HISTO_MODIFICATEUR_ID" "HISTO_MODIFICATEUR_ID","THESE"."HISTO_MODIFICATION" "HISTO_MODIFICATION","THESE"."HISTO_DESTRUCTEUR_ID" "HISTO_DESTRUCTEUR_ID","THESE"."HISTO_DESTRUCTION" "HISTO_DESTRUCTION" FROM "THESE" "THESE";
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_101" ("ID", "TYPE", "CIVILITE", "NOM_USUEL", "NOM_PATRONYMIQUE", "PRENOM1", "PRENOM2", "PRENOM3", "EMAIL", "DATE_NAISSANCE", "NATIONALITE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION", "SUPANN_ID")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS select i.*
from DOCTORANT d
join INDIVIDU i ON d.INDIVIDU_ID = i.ID
left join THESE t ON d.ID = t.DOCTORANT_ID
where t.ETAT_THESE = 'E'and t.DATE_PREM_INSC < ADD_MONTHS(SYSDATE,60)and t.ID IN (  SELECT THESE_ID  FROM THESE_ANNEE_UNIV         JOIN THESE T on THESE_ANNEE_UNIV.THESE_ID = T.ID  WHERE T.ETAT_THESE = 'E'  GROUP BY (THESE_ID)  HAVING MAX(ANNEE_UNIV) < TO_CHAR(ADD_MONTHS(SYSDATE, -12), 'yyyy')) ;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_2" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT t.*
FROM THESE T
       LEFT JOIN VALIDATION V ON T.ID = V.THESE_ID
       LEFT JOIN TYPE_VALIDATION N on V.TYPE_VALIDATION_ID = N.ID
WHERE T.DATE_SOUTENANCE > ADD_MONTHS(SYSDATE,-2)  AND T.ETAT_THESE = 'E'  AND N.CODE = 'PAGE_DE_COUVERTURE'  AND V.ID IS NULL;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_21" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT * FROM THESE WHERE ECOLE_DOCT_ID=(SELECT ID FROM ECOLE_DOCT WHERE SOURCE_CODE='UCN::497') AND ETAT_THESE='E';
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_3" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT t.*
  FROM THESE T
  LEFT JOIN FICHIER F on T.ID = F.THESE_ID
  LEFT JOIN NATURE_FICHIER N on F.NATURE_ID = N.ID
  WHERE T.DATE_SOUTENANCE > ADD_MONTHS(SYSDATE,-1)    AND T.ETAT_THESE = 'E'    AND N.CODE = 'THESE_PDF'    AND F.ID IS NULL;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_4" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT *
FROM THESE t
WHERE t.ETAT_THESE = 'E'      AND t.DATE_SOUTENANCE < SYSDATE;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_5" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT * 
FROM THESE t 
WHERE t.ETAT_THESE = 'E'       AND t.DATE_SOUTENANCE > SYSDATE;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_6" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT *
FROM THESE t
WHERE t.ETAT_THESE = 'E'       AND t.DATE_PREM_INSC < ADD_MONTHS(SYSDATE,-72);
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_61" ("ID", "SIGLE", "LIBELLE", "CHEMIN_LOGO", "TYPE_STRUCTURE_ID", "HISTO_CREATION", "HISTO_CREATEUR_ID", "HISTO_MODIFICATION", "HISTO_MODIFICATEUR_ID", "HISTO_DESTRUCTION", "HISTO_DESTRUCTEUR_ID", "SOURCE_ID", "SOURCE_CODE", "CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT *
FROM STRUCTURE
WHERE ID IN (
  SELECT UNITE_RECH.STRUCTURE_ID
  FROM THESE
   LEFT JOIN UNITE_RECH ON THESE.UNITE_RECH_ID = UNITE_RECH.ID
  WHERE THESE.ETAT_THESE='E'    AND UNITE_RECH.STRUCTURE_ID IS NOT NULL  GROUP BY UNITE_RECH.STRUCTURE_ID)  AND CHEMIN_LOGO IS NULL ;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_62" ("ID", "SIGLE", "LIBELLE", "CHEMIN_LOGO", "TYPE_STRUCTURE_ID", "HISTO_CREATION", "HISTO_CREATEUR_ID", "HISTO_MODIFICATION", "HISTO_MODIFICATEUR_ID", "HISTO_DESTRUCTION", "HISTO_DESTRUCTEUR_ID", "SOURCE_ID", "SOURCE_CODE", "CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT *
FROM STRUCTURE
WHERE ID IN (
  SELECT ECOLE_DOCT.STRUCTURE_ID
  FROM THESE
  LEFT JOIN ECOLE_DOCT ON THESE.ECOLE_DOCT_ID = ECOLE_DOCT.ID
  WHERE THESE.ETAT_THESE='E'  AND ECOLE_DOCT.STRUCTURE_ID IS NOT NULL  GROUP BY ECOLE_DOCT.STRUCTURE_ID)AND CHEMIN_LOGO IS NULL ;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_7" ("ID", "TYPE", "CIVILITE", "NOM_USUEL", "NOM_PATRONYMIQUE", "PRENOM1", "PRENOM2", "PRENOM3", "EMAIL", "DATE_NAISSANCE", "NATIONALITE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT i.*
FROM THESE t
JOIN DOCTORANT d ON d.ID = t.DOCTORANT_ID
JOIN INDIVIDU I on d.INDIVIDU_ID = I.ID
WHERE i.TYPE='doctorant'  AND t.ETAT_THESE = 'E'  AND i.EMAIL is NULL;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_INDICATEUR_81" ("ID", "ETABLISSEMENT_ID", "DOCTORANT_ID", "ECOLE_DOCT_ID", "UNITE_RECH_ID", "BESOIN_EXPURGE", "COD_UNIT_RECH", "CORREC_AUTORISEE", "DATE_AUTORIS_SOUTENANCE", "DATE_FIN_CONFID", "DATE_PREM_INSC", "DATE_PREV_SOUTENANCE", "DATE_SOUTENANCE", "ETAT_THESE", "LIB_DISC", "LIB_ETAB_COTUT", "LIB_PAYS_COTUT", "LIB_UNIT_RECH", "RESULTAT", "SOUTENANCE_AUTORIS", "TEM_AVENANT_COTUT", "TITRE", "SOURCE_CODE", "SOURCE_ID", "HISTO_CREATEUR_ID", "HISTO_CREATION", "HISTO_MODIFICATEUR_ID", "HISTO_MODIFICATION", "HISTO_DESTRUCTEUR_ID", "HISTO_DESTRUCTION", "CORREC_AUTORISEE_FORCEE", "ANNEE_UNIV_1ERE_INSC")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND START WITH sysdate+0 NEXT SYSDATE + 1
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT *
FROM THESE t
WHERE t.DATE_PREM_INSC <= ADD_MONTHS(SYSDATE, -60)AND T.ETAT_THESE = 'E'AND ID IN (  SELECT THESE_ID  FROM THESE_ANNEE_UNIV         JOIN THESE T on THESE_ANNEE_UNIV.THESE_ID = T.ID  WHERE T.ETAT_THESE = 'E'  GROUP BY (THESE_ID)  HAVING MAX(ANNEE_UNIV) <= TO_CHAR(ADD_MONTHS(SYSDATE, -12), 'yyyy')) ;
  CREATE MATERIALIZED VIEW /*"SYGAL".*/"MV_RECHERCHE_THESE" ("CODE_THESE", "CODE_DOCTORANT", "CODE_ECOLE_DOCT", "HAYSTACK")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
 LOB ("HAYSTACK") STORE AS BASICFILE (ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS with acteurs as (
  select a.these_id, i.nom_usuel, INDIVIDU_ID
  from individu i
         join acteur a on i.id = a.individu_id
         join these t on t.id = a.these_id
         join role r on a.role_id = r.id and r.CODE in ('D', 'K') -- (co)directeur de thèse
  )
  select
    t.source_code code_these,
    d.source_code code_doctorant,
    ed.source_code code_ecole_doct,
    trim(UNICAEN_ORACLE.str_reduce(
          t.COD_UNIT_RECH || ' ' || t.TITRE || ' ' ||
          d.SOURCE_CODE || ' ' || id.NOM_PATRONYMIQUE || ' ' || id.NOM_USUEL || ' ' || id.PRENOM1 || ' ' ||
          a.nom_usuel)) as haystack
  from these t
         join doctorant d on d.id = t.doctorant_id
         join individu id on id.id = d.INDIVIDU_ID
         join these th on th.source_code = t.source_code
    --join mv_thesard mvd on mvd.source_code = d.source_code
         left join ecole_doct ed on t.ecole_doct_id = ed.id
         left join acteurs a on a.these_id = t.id
         left join individu ia on ia.id = a.INDIVIDU_ID;