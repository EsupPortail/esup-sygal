<?php

namespace These\Fieldset\Generalites;

use Application\Service\Discipline\DisciplineServiceAwareTrait;
use DoctrineModule\Form\Element\ObjectSelect;
use Laminas\Form\Element\Date;
use Laminas\Form\Element\Hidden;
use Laminas\Form\Element\Radio;
use Laminas\Form\Element\Select;
use Laminas\Form\Element\Textarea;
use Laminas\Form\Fieldset;
use Laminas\Form\FormInterface;
use Laminas\InputFilter\InputFilterProviderInterface;
use Laminas\Validator\Callback;
use Structure\Entity\Db\Etablissement;
use Structure\Service\Etablissement\EtablissementServiceAwareTrait;
use These\Entity\Db\These;
use These\Fieldset\TitreAcces\TitreAccesFieldset;
use These\Form\DomaineHalSaisie\Fieldset\DomaineHalFieldset;
use UnicaenApp\Form\Element\SearchAndSelect;

class GeneralitesFieldset extends Fieldset implements InputFilterProviderInterface
{
    use DisciplineServiceAwareTrait;
    use EtablissementServiceAwareTrait;

    private string $urlAutocompleteIndividu;
    private array $pays;

    public function setUrlAutocompleteIndividu(string $urlAutocompleteIndividu): void
    {
        $this->urlAutocompleteIndividu = $urlAutocompleteIndividu;
    }

    public function setPays(array $paysAsOptions): void
    {
        $this->pays = $paysAsOptions;
    }

    public function prepareElement(FormInterface $form): void
    {
        $this->get('paysCoTutelle')->setEmptyOption('Sélectionnez une option');
        $this->get('paysCoTutelle')->setValueOptions($this->pays);

        /** @var These $these */
        $these = $this->getObject();
        $estModifiable = !$these->getSource()->getImportable();
        
        $this->get('doctorant')->setAttribute('readonly', !$estModifiable || $these->getDoctorant());
        $this->get('titre')->setAttribute('readonly', !$estModifiable);
        $this->get('discipline')->setAttribute('disabled', !$estModifiable);
        $this->get('confidentialite')->setAttribute('disabled', !$estModifiable);
        $this->get('dateFinConfidentialite')->setAttribute('disabled', !$estModifiable);
        $this->get('datePremiereInscription')->setAttribute('disabled', !$estModifiable);
        $this->get('dateAbandon')->setAttribute('readonly', !$estModifiable);
        $this->get('dateTransfert')->setAttribute('readonly', !$estModifiable);
        $this->get('resultat')->setAttribute('disabled', !$estModifiable);
        $this->get('cotutelle')->setAttribute('disabled', !$estModifiable);
        $this->get('etablissementCoTutelle')->setAttribute('disabled', !$estModifiable);
        $this->get('paysCoTutelle')->setAttribute('disabled', !$estModifiable);

        parent::prepareElement($form); // TODO: Change the autogenerated stub
    }

    public function init()
    {
        $this->add([
            'type' => Hidden::class,
            'name' => 'id',
        ]);

        $this->add([
            'type' => Textarea::class,
            'name' => 'titre',
            'options' => [
                'label' => "Titre de la thèse <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
                'label_options' => [ 'disable_html_escape' => true, ],
            ],
        ]);

        $doctorant = new SearchAndSelect('doctorant', [
            'label' => "Doctorant·e <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
            'label_options' => [ 'disable_html_escape' => true, ],
            ]);
        $doctorant
            ->setAutocompleteSource($this->urlAutocompleteIndividu)
            ->setRequired()
            ->setSelectionRequired(true)
            ->setAttributes([
                'id' => 'doctorant',
                'placeholder' => "Rechercher un·e doctorant·e ...",
            ]);
        $this->add($doctorant);

        $this->add([
            'type' => Select::class,
            'name' => 'discipline',
            'options' => [
                'label' => "Discipline :",
                'value_options' => $this->disciplineService->getDisciplinesAsOptions("code", "ASC", "code"),
                'empty_option' => "Sélectionner une discipline",
            ],
            'attributes' => [
                'id' => 'discipline',
                'class' => 'selectpicker show-menu-arrow',
                'data-live-search' => 'true',
                'data-bs-html' => 'true',
            ]
        ]);

        $domainesHalFieldset = $this->getFormFactory()->getFormElementManager()->get(DomaineHalFieldset::class);
        $this->add($domainesHalFieldset, ['name' => 'domaineHal']);

        $this->add([
            'type' => Radio::class,
            'name' => 'confidentialite',
            'options' => [
                'value_options' => [
                    0 => "Non confidentielle ",
                    1 => "Confidentielle ",
                ],
            ],
            'attributes' => [
                'id' => 'confidentialite',
            ],
        ]);

        $this->add([
            'type' => Date::class,
            'name' => 'dateFinConfidentialite',
            'options' => [
                'label' => "Date de fin de confidentialité <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> : ",
                'label_options' => [ 'disable_html_escape' => true, ],
            ],
            'attributes' => [
                'id' => 'fin-confidentialite',
            ],
        ]);

        $this->add(
            (new Date("datePremiereInscription"))
                ->setLabel("Date de première inscription :")
        );

        $titreAccesTheseFieldset = $this->getFormFactory()->getFormElementManager()->get(TitreAccesFieldset::class);
        $this->add($titreAccesTheseFieldset, ['name' => 'titreAcces']);

        $this->add(
            (new Radio('cotutelle'))
                ->setValueOptions([
                    0 => "Non",
                    1 => "Oui"
                ])
        );

        $this->add([
            'type' => ObjectSelect::class,
            'name' => 'etablissementCoTutelle',
            'options' => [
                'label' => "Établissement de cotutelle <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
                'label_options' => [ 'disable_html_escape' => true, ],
                'empty_option' => "Sélectionnez une option",
                'target_class' => Etablissement::class,
                'disable_inarray_validator' => true,
            ],
            'attributes' => [
                'id' => 'etablissement-cotutelle',
                'class' => 'selectpicker show-menu-arrow',
                'title' => "Sélectionner l'établissement",
                'data-live-search' => 'true',
            ],
        ]);

        $this->add(
            (new Select("paysCoTutelle"))
                ->setLabel("Pays de la cotutelle <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> : ")
                ->setLabelOptions(['disable_html_escape' => true])
                ->setOptions(['emptyOption' => 'Choisissez un élément',])
                ->setAttributes([
                    'class' => 'selectpicker show-tick',
                    'data-live-search' => 'true',
                    'id' => "pays-cotutelle"
                ])
        );

        $this->add([
            'type' => Date::class,
            'name' => 'dateAbandon',
            'options' => [
                'label' => "Date d'abandon : ",
            ],
            'attributes' => [
                'id' => 'date-abandon',
            ],
        ]);

        $this->add([
            'type' => Date::class,
            'name' => 'dateTransfert',
            'options' => [
                'label' => "Date de transfert : ",
            ],
            'attributes' => [
                'id' => 'date-transfert',
            ],
        ]);

        $this->add(
            (new Select("resultat"))
                ->setEmptyOption("Sélectionnez une option")
                ->setValueOptions([
                    These::RESULTAT_AJOURNE => These::$resultatsLibellesLongs[These::RESULTAT_AJOURNE],
                    These::RESULTAT_ADMIS => These::$resultatsLibellesLongs[These::RESULTAT_ADMIS],
                ])
                ->setLabel("Résultat : ")
                ->setAttributes([
                    'class' => 'selectpicker show-tick',
                    'id' => "resultat"
                ])
        );
    }

    /**
     * @inheritDoc
     */
    public function getInputFilterSpecification()
    {
        /** @var These $these */
        $these = $this->getObject();
        $estModifiable = !$these->getSource()->getImportable();
        return [
            'titre' => [
                'required' => $estModifiable,
                'filters'  => [
                    ['name' => 'StringTrim'],
                    ['name' => 'StripTags'],
                    ['name' => 'StripNewlines'],
                ],
                'validators' => [
                    [
                        'name' => 'StringLength',
                        'options' => [
                            'min' => 1,
                            'max' => 4096
                        ],
                    ],
                ],
            ],
            'datePremiereInscription' => [
                'required' => false,
            ],
            // NB : ne pas déclarer le SearchAndSelect ici, sinon pas de validation correcte !
//            'doctorant' => [
//                'required' => true,
//            ],
            'discipline' => [
                'required' => false,
            ],
            'domaineHal' => [
                'name' => 'domaineHal',
                'required' => false,
            ],
            'confidentialite' => [
                'name' => 'confidentialite',
                'required' => false,
                'validators' => [
                    [
                        'name' => Callback::class,
                        'options' => [
                            'messages' => [
                                Callback::INVALID_VALUE => "La date de fin de confidentialité est requise",
                            ],
                            'callback' => function ($value, $context = []) {
                                if ((isset($context['confidentialite']) && $context['confidentialite'] === "1") && empty($context['dateFinConfidentialite'])) {
                                    return false;
                                }
                                return true;
                            },
                            'break_chain_on_failure' => true,
                        ],
                    ],
                ],
            ],
            'dateFinConfidentialite' => [
                'required' => false,
            ],
            'cotutelle' => [
                'required' => false,
                'validators' => [
                    [
                        'name' => Callback::class,
                        'options' => [
                            'messages' => [
                                Callback::INVALID_VALUE => "Il faut renseigner l'établissement ainsi que le pays de cotutelle",
                            ],
                            'callback' => function ($value, $context = []) {
                                if ((isset($context['cotutelle']) && $context['cotutelle'] === "1") && (empty($context['etablissementCoTutelle']) || empty($context['paysCoTutelle']))) {
                                    return false;
                                }
                                return true;
                            },
                            'break_chain_on_failure' => true,
                        ],
                    ],
                ],
            ],
            'etablissementCoTutelle' => [
                'required' => false,
            ],
            'paysCoTutelle' => [
                'required' => false,
            ],
            'dateAbandon' => [
                'required' => false,
            ],
            'dateTransfert' => [
                'required' => false,
            ],
            'resultat' => [
                'required' => false,
            ],
        ];
    }
}