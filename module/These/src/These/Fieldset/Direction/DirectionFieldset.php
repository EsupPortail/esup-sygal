<?php

namespace These\Fieldset\Direction;

use DoctrineModule\Form\Element\ObjectSelect;
use Laminas\Filter\ToNull;
use Laminas\Form\Element\Checkbox;
use Laminas\Form\Element\Hidden;
use Laminas\Form\Element\Select;
use Laminas\Form\Fieldset;
use Laminas\Form\FormInterface;
use Laminas\InputFilter\InputFilterProviderInterface;
use Soutenance\Service\Qualite\QualiteServiceAwareTrait;
use Structure\Entity\Db\EcoleDoctorale;
use Structure\Entity\Db\Etablissement;
use Structure\Entity\Db\UniteRecherche;
use Structure\Service\Etablissement\EtablissementServiceAwareTrait;
use Structure\Service\Structure\StructureServiceAwareTrait;
use These\Entity\Db\These;
use UnicaenApp\Filter\SearchAndSelectFilter;
use UnicaenApp\Form\Element\SearchAndSelect;
use Webmozart\Assert\Assert;

class DirectionFieldset extends Fieldset implements InputFilterProviderInterface
{
    use EtablissementServiceAwareTrait;
    use QualiteServiceAwareTrait;
    use StructureServiceAwareTrait;

    const NBCODIR = 2;

    private string $urlAutocompleteIndividu;
    private array $etablissements;
    private array $ecolesDoctorales;
    private array $unitesRecherche;

    public function setEtablissements(array $etablissements): void
    {
        $options = [];
        foreach ($etablissements as $etablissement) {
            $sigle = $etablissement->getStructure()?->getSigle() ? " (".$etablissement->getStructure()->getSigle().")" : null;
            $options[$etablissement->getId()] = $etablissement->getStructure()?->getLibelle() . $sigle;
        }
        $this->etablissements = $options;
    }

    public function setEcolesDoctorales(array $ecolesDoctorales): void
    {
        $options = [];

        foreach ($ecolesDoctorales as $ecole) {
            $sigle = $ecole->getStructure()?->getCode() ? " (".$ecole->getStructure()->getCode().")" : null;
            $options[$ecole->getId()] = $ecole->getStructure()?->getLibelle() . $sigle;
        }
        $this->ecolesDoctorales = $options;
    }

    /**
     * @param array $unitesRecherche
     */
    public function setUnitesRecherche(array $unitesRecherche): void
    {
        Assert::allIsInstanceOf($unitesRecherche, UniteRecherche::class);
        $this->unitesRecherche = $unitesRecherche;
    }

    public function prepareElement(FormInterface $form): void
    {
        /** @var These $these */
        $these = $this->getObject();
        $estModifiable = !$these->getSource()->getImportable();

        $this->get('directeur-individu')->setAttribute('disabled', !$estModifiable);
        $this->get('directeur-etablissement')->setAttribute('disabled', !$estModifiable);
        $this->get('directeur-ecoleDoctorale')->setAttribute('disabled', !$estModifiable);
        $this->get('directeur-uniteRecherche')->setAttribute('disabled', !$estModifiable);
        $this->get('directeur-qualite')->setAttribute('disabled', !$estModifiable);

        for ($i = 1; $i <= DirectionFieldset::NBCODIR; $i++) {
            $this->get('codirecteur' . $i . '-enabled')->setAttribute('disabled', !$estModifiable);
            $this->get('codirecteur' . $i . '-individu')->setAttribute('disabled', !$estModifiable);
            $this->get('codirecteur' . $i . '-etablissement')->setAttribute('disabled', !$estModifiable);
            $this->get('codirecteur' . $i . '-ecoleDoctorale')->setAttribute('disabled', !$estModifiable);
            $this->get('codirecteur' . $i . '-uniteRecherche')->setAttribute('disabled', !$estModifiable);
            $this->get('codirecteur' . $i . '-qualite')->setAttribute('disabled', !$estModifiable);
            $this->get('codirecteur' . $i . '-principal')->setAttribute('disabled', !$estModifiable);
            $this->get('codirecteur2-exterieur')->setAttribute('disabled', !$estModifiable);
        }

        parent::prepareElement($form); // TODO: Change the autogenerated stub
    }

    public function setUrlAutocompleteIndividu(string $urlAutocompleteIndividu): void
    {
        $this->urlAutocompleteIndividu = $urlAutocompleteIndividu;
    }

    public function init()
    {
        $this->add([
            'type' => Hidden::class,
            'name' => 'id',
        ]);

        /**  DIRECTION  ***********************************************************************************************/

        $this->_addCommuns('directeur');

        /** CODIRECTION **********************************************************************************************/

        for ($i = 1; $i <= self::NBCODIR; $i++) {
            $this->_addCommuns('codirecteur' . $i);

            $this->add([
                'type' => Checkbox::class,
                'name' => $name = 'codirecteur' . $i . '-enabled',
                'options' => [
                    'label' => "Inclure ce·tte codirecteur·trice",
                ],
                'attributes' => [
                    'id' => $name,
                    'class' => 'codirecteur-enabler',
                    'data-codirecteur-id' => $i,
                    'title' => "Cochez cette case pour déclarer le·la codirecteur·trice n°$i"
                ]
            ]);

            $this->add([
                'type' => Checkbox::class,
                'name' => $name = 'codirecteur' . $i . '-principal',
                'options' => [
                    'label' => "Principal·e ?",
                ],
                'attributes' => [
                    'id' => $name,
                    'title' => "Est-il(elle) le co-directeur·trice principal·e ?",
                    'class' => "codirecteur-principal",
                    'data-bs-toggle' => 'tooltip',
                ]
            ]);

            if ($i >= 2) {
                $this->add([
                    'type' => Checkbox::class,
                    'name' => $name = 'codirecteur' . $i . '-exterieur',
                    'options' => [
                        'label' => "Extérieur·e",
                    ],
                    'attributes' => [
                        'id' => $name,
                        'title' => "Est-il(elle) extérieur·e ?",
                        'class' => "codirecteur-exterieur",
                        'data-bs-toggle' => 'tooltip',
                    ]
                ]);
            }
        }
    }

    private function _addCommuns(string $prefixe)
    {
        $individu = new SearchAndSelect($prefixe . '-individu', [
            'label' => "Individu <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
            'label_options' => [ 'disable_html_escape' => true, ]
        ]);
        $individu
            ->setAutocompleteSource($this->urlAutocompleteIndividu)
            ->setSelectionRequired()
            ->setAttributes([
                'id' => $prefixe . '-individu',
                'placeholder' => "Recherchez l'individu...",
            ]);
        $this->add($individu);

        $this->add([
            'type' => ObjectSelect::class,
            'name' => $prefixe . '-etablissement',
            'options' => [
                'label' => "Établissement <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
                'label_options' => [ 'disable_html_escape' => true, ],
                'target_class' => Etablissement::class,
                'value_options' => $this->etablissements,
                'disable_inarray_validator' => true,
            ],
            'attributes' => [
                'id' => $prefixe . '-etablissement',
                'class' => 'selectpicker show-menu-arrow',
                'title' => "Sélectionner l'établissement",
                'data-live-search' => 'true',
            ],
        ]);

        $this->add([
            'type' => ObjectSelect::class,
            'name' => $prefixe . '-uniteRecherche',
            'options' => [
                'label' => "Unité de recherche <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
                'label_options' => [ 'disable_html_escape' => true, ],
                'target_class' => UniteRecherche::class,
                'value_options' => UniteRecherche::toValueOptions($this->unitesRecherche),
                'disable_inarray_validator' => true,
            ],
            'attributes' => [
                'id' => $prefixe . '-uniteRecherche',
                'class' => 'selectpicker show-menu-arrow',
                'title' => "Sélectionner l'unité de recherche",
                'data-live-search' => 'true',
            ],
        ]);

        $this->add([
            'type' => ObjectSelect::class,
            'name' => $prefixe . '-ecoleDoctorale',
            'options' => [
                'label' => "École doctorale <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
                'label_options' => [ 'disable_html_escape' => true, ],
                'target_class' => EcoleDoctorale::class,
                'value_options' => $this->ecolesDoctorales,
                'disable_inarray_validator' => true,
            ],
            'attributes' => [
                'id' => $prefixe . '-ecoleDoctorale',
                'class' => 'selectpicker show-menu-arrow',
                'title' => "Sélectionner l'école doctorale",
                'data-live-search' => 'true',
            ],
        ]);

        $this->add([
            'type' => Select::class,
            'name' => $prefixe . '-qualite',
            'options' => [
                'label' => "Qualité <span class='icon icon-obligatoire' style='color: darkred;font-size: 0.8em;' data-bs-toggle='tooltip' title='Obligatoire'></span> :",
                'label_options' => [ 'disable_html_escape' => true, ],
                'value_options' => $this->qualiteService->getQualitesAsGroupOptions(),
                'empty_option' => "Sélectionner une qualité...",
            ],
            'attributes' => [
                'id' => $prefixe . '-qualite',
                'class' => 'selectpicker show-menu-arrow',
                'data-live-search' => 'true',
            ]
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getInputFilterSpecification()
    {
        /** @var These $these */
        $these = $this->getObject();
        $estModifiable = !$these->getSource()->getImportable();
        $spec = [
            $name = 'directeur-individu' => [
                'name' => $name,
                'required' => $estModifiable,
                'filters' => [
                    ['name' => SearchAndSelectFilter::class],
                ],
            ],
            $name = 'directeur-etablissement' => [
                'name' => $name,
                'required' => $estModifiable,
            ],
            $name = 'directeur-ecoleDoctorale' => [
                'name' => $name,
                'required' => $estModifiable,
            ],
            $name = 'directeur-uniteRecherche' => [
                'name' => $name,
                'required' => $estModifiable,
            ],
            $name = 'directeur-qualite' => [
                'name' => $name,
                'required' => $estModifiable,
            ],
        ];

        for ($i = 1; $i <= self::NBCODIR; $i++) {
            $codirEnabled = (bool) $this->get('codirecteur' . $i . '-enabled')->getValue();

            $spec[$name = 'codirecteur' . $i . '-enabled'] = [
                'name' => $name,
                'required' => false,
            ];
            $spec[$name = 'codirecteur' . $i . '-individu'] = [
                'name' => $name,
                'required' => $codirEnabled && $estModifiable,
                'filters' => [
                    ['name' => SearchAndSelectFilter::class],
                ],
            ];
            $spec[$name = 'codirecteur' . $i . '-etablissement'] = [
                'name' => $name,
                'required' => $codirEnabled && $estModifiable,
            ];
            $spec[$name = 'codirecteur' . $i . '-ecoleDoctorale'] = [
                'name' => $name,
                'required' => $codirEnabled && $estModifiable,
            ];
            $spec[$name = 'codirecteur' . $i . '-uniteRecherche'] = [
                'name' => $name,
                'required' => $codirEnabled && $estModifiable,
            ];
            $spec[$name = 'codirecteur' . $i . '-qualite'] = [
                'name' => $name,
                'required' => $codirEnabled && $estModifiable,
            ];
            $spec[$name = 'codirecteur' . $i . '-principal'] = [
                'name' => $name,
                'required' => false,
            ];
            $spec[$name = 'codirecteur' . $i . '-exterieur'] = [
                'name' => $name,
                'required' => false,
            ];
        }

        return $spec;
    }
}