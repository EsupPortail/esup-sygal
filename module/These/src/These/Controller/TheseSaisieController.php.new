<?php

namespace These\Controller;

use Application\Controller\AbstractController;
use Laminas\Form\Form;
use Laminas\View\Model\ViewModel;
use These\Entity\Db\These;
use These\Form\Direction\DirectionForm;
use These\Form\Encadrement\EncadrementForm;
use These\Form\Generalites\GeneralitesForm;
use These\Form\Structures\StructuresForm;
use These\Form\TheseFormsManagerAwareTrait;
use These\Service\These\TheseServiceAwareTrait;

class TheseSaisieController extends AbstractController
{
    use TheseServiceAwareTrait;
    use TheseFormsManagerAwareTrait;

    private ?GeneralitesForm $generalitesForm = null;
    private ?DirectionForm $directionForm = null;
    private ?StructuresForm $structuresForm = null;
    private ?EncadrementForm $encadrementForm = null;

    public function ajouterAction()
    {
        $request = $this->getRequest();
        $form = $this->getGeneralitesForm();
        $viewModel = new ViewModel([
            'form' => $form,
        ]);

        $form->bind($this->theseService->new());

        if (!$request->isPost()) {
            return $viewModel;
        }

        $form->setData($request->getPost());
        if (!$form->isValid()) {
            return $viewModel;
        }

        /** @var These $these */
        $these = $form->getData();
        $this->theseService->create($these);

        $this->flashMessenger()->addSuccessMessage("Thèse créée avec succès.");

        return $this->redirect()->toRoute('these/identite', ['these' => $these->getId()], [], true);
    }

    public function generalitesAction()
    {
        return $this->modifier($this->getGeneralitesForm(), 'generalites');
    }

    public function directionAction()
    {
        return $this->modifier($this->getDirectionForm(), 'direction');
    }

    public function structuresAction()
    {
        return $this->modifier($this->getStructuresForm(), 'structures');
    }

    public function encadrementAction()
    {
        return $this->modifier($this->getEncadrementForm(), 'encadrement');
    }

    private function modifier(Form $form, string $domaine)
    {
        $request = $this->getRequest();
        $these = $this->requestedThese();

        $viewModel = new ViewModel([
            'these' => $these,
            'form' => $form,
            'formPartial' => "these/these-saisie/partial/$domaine",
        ]);
        $viewModel->setTemplate('these/these-saisie/modifier');

        $form->bind($these);

        if (!$request->isPost()) {
            return $viewModel;
        }

        $form->setData($request->getPost());
        if (!$form->isValid()) {
            return $viewModel;
        }

        /** @var These $these */
        $these = $form->getData();
        $this->theseService->update($these);

        $this->flashMessenger()->addSuccessMessage("Thèse modifiée avec succès.");

        return $this->redirect()->toRoute('these/identite', ['these' => $these->getId()], ['fragment' => $domaine], true);
    }

    public function getGeneralitesForm(): GeneralitesForm
    {
        if ($this->generalitesForm === null) {
            $this->generalitesForm = $this->theseFormsManager->get(GeneralitesForm::class);
        }

        return $this->generalitesForm;
    }

    public function getDirectionForm(): DirectionForm
    {
        if ($this->directionForm === null) {
            $this->directionForm = $this->theseFormsManager->get(DirectionForm::class);
        }

        return $this->directionForm;
    }

    public function getStructuresForm(): StructuresForm
    {
        if ($this->structuresForm === null) {
            $this->structuresForm = $this->theseFormsManager->get(StructuresForm::class);
        }

        return $this->structuresForm;
    }

    public function getEncadrementForm(): EncadrementForm
    {
        if ($this->encadrementForm === null) {
            $this->encadrementForm = $this->theseFormsManager->get(EncadrementForm::class);
        }

        return $this->encadrementForm;
    }
}
