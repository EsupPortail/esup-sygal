drop table WF_ETAPE;
drop table WF_ETAPE_DEP;

CREATE TABLE WF_ETAPE
(
  ID                 NUMBER(*, 0) NOT NULL,
  --   PARENT_ID          NUMBER(*) NULL,
  CODE               VARCHAR2(64 CHAR) NOT NULL,
  ORDRE              NUMBER(*, 0) DEFAULT 1 NOT NULL,
  CHEMIN             NUMBER(*, 0) DEFAULT 1 NOT NULL,
  OBLIGATOIRE        NUMBER(1, 0) DEFAULT 1 NOT NULL,
  ROUTE              VARCHAR2(200 CHAR) NOT NULL,
  LIBELLE_ACTEUR     VARCHAR2(150 CHAR) NOT NULL,
  LIBELLE_AUTRES     VARCHAR2(150 CHAR) NOT NULL,
  DESC_NON_FRANCHIE  VARCHAR2(250 CHAR) NOT NULL,
  DESC_SANS_OBJECTIF VARCHAR2(250 CHAR)
);


--drop table WF_ETAPE_DEP;
CREATE TABLE WF_ETAPE_DEP
(
  ID            NUMBER(*, 0) NOT NULL,
  ETAPE_PREC_ID NUMBER(*, 0) NOT NULL,
  ETAPE_SUIV_ID NUMBER(*, 0) NOT NULL
);

drop sequence WF_ETAPE_DEP_id_seq;

create sequence WF_ETAPE_DEP_id_seq;

CREATE UNIQUE INDEX WFED_PK ON WF_ETAPE_DEP (ETAPE_PREC_ID, ETAPE_SUIV_ID);
CREATE UNIQUE INDEX WFED_UN ON WF_ETAPE_DEP (ETAPE_SUIV_ID, ETAPE_PREC_ID);
CREATE INDEX WFED_ETAPE_SUIV_FK ON WF_ETAPE_DEP (ETAPE_SUIV_ID);
CREATE INDEX WFED_ETAPE_PREC_FK ON WF_ETAPE_DEP (ETAPE_PREC_ID);

ALTER TABLE WF_ETAPE_DEP ADD CONSTRAINT WE_PREC_WE_FK FOREIGN KEY (ETAPE_PREC_ID) REFERENCES WF_ETAPE (ID) ON DELETE CASCADE ENABLE;
ALTER TABLE WF_ETAPE_DEP ADD CONSTRAINT WE_SUIV_WE_FK FOREIGN KEY (ETAPE_SUIV_ID) REFERENCES WF_ETAPE (ID) ON DELETE CASCADE ENABLE;

/**
 * Dépendances entre étapes.
 */

delete from WF_ETAPE_DEP;

INSERT INTO WF_ETAPE_DEP (ID, ETAPE_PREC_ID, ETAPE_SUIV_ID)
  WITH d AS (
    --
    -- Dépôt version initiale // Chemin 1
    --
    SELECT
      'DEPOT_VERSION_ORIGINALE' prec,
      'ATTESTATIONS' suiv FROM dual UNION
    SELECT
      'ATTESTATIONS' prec,
      'AUTORISATION_DIFFUSION_THESE' suiv FROM dual UNION
    SELECT
      'AUTORISATION_DIFFUSION_THESE' prec,
      'SIGNALEMENT_THESE' suiv FROM dual UNION
    SELECT
      'SIGNALEMENT_THESE' prec,
      'ARCHIVABILITE_VERSION_ORIGINALE' suiv FROM dual UNION
    SELECT
      'ARCHIVABILITE_VERSION_ORIGINALE' prec,
      'DEPOT_VERSION_ARCHIVAGE' suiv FROM dual UNION
    SELECT
      'DEPOT_VERSION_ARCHIVAGE' prec,
      'ARCHIVABILITE_VERSION_ARCHIVAGE' suiv FROM dual UNION
    SELECT
      'ARCHIVABILITE_VERSION_ARCHIVAGE' prec,
      'VERIFICATION_VERSION_ARCHIVAGE' suiv FROM dual UNION
    SELECT
      'VERIFICATION_VERSION_ARCHIVAGE' prec,
      'RDV_BU_SAISIE_DOCTORANT' suiv FROM dual UNION
    SELECT
      'RDV_BU_SAISIE_DOCTORANT' prec,
      'RDV_BU_VALIDATION_BU' suiv FROM dual UNION
    --
    -- Dépôt version corigée // Chemin 1
    --
    SELECT
      'RDV_BU_VALIDATION_BU' prec,
      'DEPOT_VERSION_ORIGINALE_CORRIGEE' suiv FROM dual UNION
    SELECT
      'DEPOT_VERSION_ORIGINALE_CORRIGEE' prec,
      'ATTESTATIONS_VERSION_CORRIGEE' suiv FROM dual UNION
    SELECT
      'ATTESTATIONS_VERSION_CORRIGEE' prec,
      'AUTORISATION_DIFFUSION_THESE_VERSION_CORRIGEE' suiv FROM dual UNION
    SELECT
      'AUTORISATION_DIFFUSION_THESE_VERSION_CORRIGEE' prec,
      'ARCHIVABILITE_VERSION_ORIGINALE_CORRIGEE' suiv FROM dual UNION
    SELECT
      'ARCHIVABILITE_VERSION_ORIGINALE_CORRIGEE' prec,
      'DEPOT_VERSION_ARCHIVAGE_CORRIGEE' suiv FROM dual UNION
    SELECT
      'DEPOT_VERSION_ARCHIVAGE_CORRIGEE' prec,
      'ARCHIVABILITE_VERSION_ARCHIVAGE_CORRIGEE' suiv FROM dual UNION
    SELECT
      'ARCHIVABILITE_VERSION_ARCHIVAGE_CORRIGEE' prec,
      'VERIFICATION_VERSION_ARCHIVAGE_CORRIGEE' suiv FROM dual UNION
    SELECT
      'VERIFICATION_VERSION_ARCHIVAGE_CORRIGEE' prec,
      'DEPOT_VERSION_CORRIGEE_VALIDATION_DOCTORANT' suiv FROM dual UNION
    SELECT
      'DEPOT_VERSION_CORRIGEE_VALIDATION_DOCTORANT' prec,
      'DEPOT_VERSION_CORRIGEE_VALIDATION_DIRECTEUR' suiv FROM dual UNION
    SELECT
      'DEPOT_VERSION_CORRIGEE_VALIDATION_DIRECTEUR' prec,
      'REMISE_EXEMPLAIRE_PAPIER_THESE_CORRIGEE' suiv FROM dual UNION
    --
    -- Dépôt version initiale // Chemin 2
    --
    SELECT
      'DEPOT_VERSION_ORIGINALE' prec,
      'RDV_BU_SAISIE_DOCTORANT' suiv FROM dual
  )
  SELECT WF_ETAPE_DEP_id_seq.nextval, ep.id, es.id
  FROM wf_etape ep, wf_etape es, d
  where ep.CODE = d.prec and es.CODE = d.suiv
;



select rpad(prec.CODE, 50, ' ') || ' --> ' || suiv.CODE str
FROM WF_ETAPE_DEP d
JOIN WF_ETAPE prec ON d.ETAPE_PREC_ID = prec.id
JOIN WF_ETAPE suiv ON d.ETAPE_SUIV_ID = suiv.id
ORDER BY prec.ORDRE
;








SELECT
  prec.id etape_id,
  level || ' ' || lpad(' ', 2 * level, ' ') || prec.CODE lib,
  sys_connect_by_path(prec.CODE, ' > ') path
FROM
  WF_ETAPE_DEP d
  JOIN WF_ETAPE prec ON d.ETAPE_PREC_ID = prec.id
  JOIN WF_ETAPE suiv ON d.ETAPE_SUIV_ID = suiv.id
CONNECT BY
  ETAPE_SUIV_ID = PRIOR ETAPE_PREC_ID
START WITH
  --   suiv.id = (SELECT id FROM WF_ETAPE WHERE ordre = (SELECT max(ordre) FROM WF_ETAPE))
  --   suiv.id = (SELECT id FROM WF_ETAPE WHERE code = 'VERIFICATION_VERSION_ARCHIVAGE')
  suiv.id = (SELECT id FROM WF_ETAPE WHERE code = 'RDV_BU_SAISIE_BU')
ORDER SIBLINGS BY
  prec.ordre
;





with p as (
    select etape_id
    from V_WF_ETAPE_PERTIN
    where these_id = 26614
)
SELECT
  level||' '||lpad(' ',2*level,' ') || prec.CODE, sys_connect_by_path(prec.CODE, ' > ')
FROM
  WF_ETAPE_DEP d
  join WF_ETAPE prec on d.ETAPE_PREC_ID = prec.id
  join WF_ETAPE suiv on d.ETAPE_SUIV_ID = suiv.id
  join p pp on pp.etape_id = d.ETAPE_PREC_ID
  join p ps on ps.etape_id = d.ETAPE_SUIV_ID
CONNECT BY
  PRIOR ETAPE_SUIV_ID = ETAPE_PREC_ID
start with prec.id = (select id from WF_ETAPE where ordre = (select min(ordre) from WF_ETAPE))
ORDER SIBLINGS BY
  suiv.ordre
;
