#!/usr/bin/env php
<?php

use Application\Assertion\Loader\AssertionCsvLoader;
use Application\Assertion\Generator\AssertionGenerator;
use Composer\Autoload\ClassLoader;
use Laminas\Console;

/** @var ClassLoader $autoloader */
$autoloader = require_once __DIR__ . '/../../vendor/autoload.php';

$rules = [
    'help|h'    => 'Get usage message',
    'file|f=s'  => 'CSV file containing assertion rules to parse; required.',
];
try {
    $opts = new Console\Getopt($rules);
    $opts->parse();
} catch (Console\Exception\RuntimeException $e) {
    echo $e->getUsageMessage();
    exit(2);
}
if ($opts->getOption('h')) {
    echo $opts->getUsageMessage();
    exit();
}

if (! ($file = $opts->getOption('f'))) {
    echo $opts->getUsageMessage();
    exit();
}

if (! is_readable($file)) {
    throw new \UnicaenApp\Exception\RuntimeException("This file is not readable: " . $file);
}

// CSV loading
$loader = new AssertionCsvLoader();
$loader->setRuleFilePath($file);
$result = $loader->loadFile();
$class = $result->getAssertionClass();
$classFilePath = $autoloader->findFile($class);

// Class generating
$generator = new AssertionGenerator();
$generator->setAssertionCsvLoader($loader);
$code = $generator->generate();
$content = '<?php' . PHP_EOL . PHP_EOL . $code;
file_put_contents($classFilePath, $content);
echo sprintf("%s ==> %s (%s).", $file, $class, realpath($classFilePath)) . PHP_EOL;
