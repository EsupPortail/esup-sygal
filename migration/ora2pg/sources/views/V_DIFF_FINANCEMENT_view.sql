-- Generated by Ora2Pg, the Oracle database Schema converter, version 20.0
-- Copyright 2000-2019 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=sygaldb.unicaen.fr;sid=SYGLPROD;port=1523

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

CREATE OR REPLACE VIEW v_diff_financement (source_code, source_id, operation, u_these_id, u_annee, u_origine_financement_id, u_complement_financement, u_quotite_financement, u_date_debut, u_date_fin, u_code_type_financement, u_libelle_type_financement, s_these_id, s_annee, s_origine_financement_id, s_complement_financement, s_quotite_financement, s_date_debut, s_date_fin, s_code_type_financement, s_libelle_type_financement, d_these_id, d_annee, d_origine_financement_id, d_complement_financement, d_quotite_financement, d_date_debut, d_date_fin, d_code_type_financement, d_libelle_type_financement) AS with diff as (
        SELECT 
            coalesce(s.SOURCE_CODE, d.SOURCE_CODE) SOURCE_CODE,
            coalesce(s.source_id, d.source_id) source_id,

            case 
            when (s.SOURCE_CODE IS NOT NULL AND d.SOURCE_CODE IS NULL) then 'insert'
            when (s.SOURCE_CODE IS NOT NULL AND d.SOURCE_CODE IS NOT NULL and (d.HISTO_DESTRUCTION IS NULL or d.HISTO_DESTRUCTION > SYSDATE)) then 'update'
            when (s.SOURCE_CODE IS NOT NULL AND d.SOURCE_CODE IS NOT NULL and (d.HISTO_DESTRUCTION IS NOT NULL and d.HISTO_DESTRUCTION <= SYSDATE)) then 'undelete'
            when (s.SOURCE_CODE IS NULL AND d.SOURCE_CODE IS NOT NULL and (d.HISTO_DESTRUCTION IS NULL or d.HISTO_DESTRUCTION > SYSDATE)) then 'delete' end as operation,

            CASE WHEN d.THESE_ID <> s.THESE_ID OR (d.THESE_ID IS NULL AND s.THESE_ID IS NOT NULL) OR (d.THESE_ID IS NOT NULL AND s.THESE_ID IS NULL) THEN 1 ELSE 0 END as U_THESE_ID,
    CASE WHEN d.ANNEE <> s.ANNEE OR (d.ANNEE IS NULL AND s.ANNEE IS NOT NULL) OR (d.ANNEE IS NOT NULL AND s.ANNEE IS NULL) THEN 1 ELSE 0 END as U_ANNEE,
    CASE WHEN d.ORIGINE_FINANCEMENT_ID <> s.ORIGINE_FINANCEMENT_ID OR (d.ORIGINE_FINANCEMENT_ID IS NULL AND s.ORIGINE_FINANCEMENT_ID IS NOT NULL) OR (d.ORIGINE_FINANCEMENT_ID IS NOT NULL AND s.ORIGINE_FINANCEMENT_ID IS NULL) THEN 1 ELSE 0 END as U_ORIGINE_FINANCEMENT_ID,
    CASE WHEN d.COMPLEMENT_FINANCEMENT <> s.COMPLEMENT_FINANCEMENT OR (d.COMPLEMENT_FINANCEMENT IS NULL AND s.COMPLEMENT_FINANCEMENT IS NOT NULL) OR (d.COMPLEMENT_FINANCEMENT IS NOT NULL AND s.COMPLEMENT_FINANCEMENT IS NULL) THEN 1 ELSE 0 END as U_COMPLEMENT_FINANCEMENT,
    CASE WHEN d.QUOTITE_FINANCEMENT <> s.QUOTITE_FINANCEMENT OR (d.QUOTITE_FINANCEMENT IS NULL AND s.QUOTITE_FINANCEMENT IS NOT NULL) OR (d.QUOTITE_FINANCEMENT IS NOT NULL AND s.QUOTITE_FINANCEMENT IS NULL) THEN 1 ELSE 0 END as U_QUOTITE_FINANCEMENT,
    CASE WHEN d.DATE_DEBUT <> s.DATE_DEBUT OR (d.DATE_DEBUT IS NULL AND s.DATE_DEBUT IS NOT NULL) OR (d.DATE_DEBUT IS NOT NULL AND s.DATE_DEBUT IS NULL) THEN 1 ELSE 0 END as U_DATE_DEBUT,
    CASE WHEN d.DATE_FIN <> s.DATE_FIN OR (d.DATE_FIN IS NULL AND s.DATE_FIN IS NOT NULL) OR (d.DATE_FIN IS NOT NULL AND s.DATE_FIN IS NULL) THEN 1 ELSE 0 END as U_DATE_FIN,
    CASE WHEN d.CODE_TYPE_FINANCEMENT <> s.CODE_TYPE_FINANCEMENT OR (d.CODE_TYPE_FINANCEMENT IS NULL AND s.CODE_TYPE_FINANCEMENT IS NOT NULL) OR (d.CODE_TYPE_FINANCEMENT IS NOT NULL AND s.CODE_TYPE_FINANCEMENT IS NULL) THEN 1 ELSE 0 END as U_CODE_TYPE_FINANCEMENT,
    CASE WHEN d.LIBELLE_TYPE_FINANCEMENT <> s.LIBELLE_TYPE_FINANCEMENT OR (d.LIBELLE_TYPE_FINANCEMENT IS NULL AND s.LIBELLE_TYPE_FINANCEMENT IS NOT NULL) OR (d.LIBELLE_TYPE_FINANCEMENT IS NOT NULL AND s.LIBELLE_TYPE_FINANCEMENT IS NULL) THEN 1 ELSE 0 END as U_LIBELLE_TYPE_FINANCEMENT,

            s.THESE_ID AS S_THESE_ID,
    s.ANNEE AS S_ANNEE,
    s.ORIGINE_FINANCEMENT_ID AS S_ORIGINE_FINANCEMENT_ID,
    s.COMPLEMENT_FINANCEMENT AS S_COMPLEMENT_FINANCEMENT,
    s.QUOTITE_FINANCEMENT AS S_QUOTITE_FINANCEMENT,
    s.DATE_DEBUT AS S_DATE_DEBUT,
    s.DATE_FIN AS S_DATE_FIN,
    s.CODE_TYPE_FINANCEMENT AS S_CODE_TYPE_FINANCEMENT,
    s.LIBELLE_TYPE_FINANCEMENT AS S_LIBELLE_TYPE_FINANCEMENT,

            d.THESE_ID AS D_THESE_ID,
    d.ANNEE AS D_ANNEE,
    d.ORIGINE_FINANCEMENT_ID AS D_ORIGINE_FINANCEMENT_ID,
    d.COMPLEMENT_FINANCEMENT AS D_COMPLEMENT_FINANCEMENT,
    d.QUOTITE_FINANCEMENT AS D_QUOTITE_FINANCEMENT,
    d.DATE_DEBUT AS D_DATE_DEBUT,
    d.DATE_FIN AS D_DATE_FIN,
    d.CODE_TYPE_FINANCEMENT AS D_CODE_TYPE_FINANCEMENT,
    d.LIBELLE_TYPE_FINANCEMENT AS D_LIBELLE_TYPE_FINANCEMENT

         FROM FINANCEMENT d
        JOIN source src ON src.id = d.source_id AND src.importable = 1
        FULL OUTER JOIN SRC_FINANCEMENT s ON s.source_id = d.source_id AND s.SOURCE_CODE = d.SOURCE_CODE
    )
    select "SOURCE_CODE","SOURCE_ID","OPERATION","U_THESE_ID","U_ANNEE","U_ORIGINE_FINANCEMENT_ID","U_COMPLEMENT_FINANCEMENT","U_QUOTITE_FINANCEMENT","U_DATE_DEBUT","U_DATE_FIN","U_CODE_TYPE_FINANCEMENT","U_LIBELLE_TYPE_FINANCEMENT","S_THESE_ID","S_ANNEE","S_ORIGINE_FINANCEMENT_ID","S_COMPLEMENT_FINANCEMENT","S_QUOTITE_FINANCEMENT","S_DATE_DEBUT","S_DATE_FIN","S_CODE_TYPE_FINANCEMENT","S_LIBELLE_TYPE_FINANCEMENT","D_THESE_ID","D_ANNEE","D_ORIGINE_FINANCEMENT_ID","D_COMPLEMENT_FINANCEMENT","D_QUOTITE_FINANCEMENT","D_DATE_DEBUT","D_DATE_FIN","D_CODE_TYPE_FINANCEMENT","D_LIBELLE_TYPE_FINANCEMENT" from diff
    where operation is not null
    and (operation = 'undelete' or 0 < U_THESE_ID+U_ANNEE+U_ORIGINE_FINANCEMENT_ID+U_COMPLEMENT_FINANCEMENT+U_QUOTITE_FINANCEMENT+U_DATE_DEBUT+U_DATE_FIN+U_CODE_TYPE_FINANCEMENT+U_LIBELLE_TYPE_FINANCEMENT);

