-- Generated by Ora2Pg, the Oracle database Schema converter, version 20.0
-- Copyright 2000-2019 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=sygaldb.unicaen.fr;sid=SYGLPROD;port=1523

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

CREATE OR REPLACE VIEW v_diff_these (source_code, source_id, operation, u_etablissement_id, u_doctorant_id, u_ecole_doct_id, u_unite_rech_id, u_titre, u_etat_these, u_resultat, u_lib_disc, u_date_prem_insc, u_date_prev_soutenance, u_date_soutenance, u_date_fin_confid, u_lib_etab_cotut, u_lib_pays_cotut, u_correc_autorisee, u_correc_effectuee, u_soutenance_autoris, u_date_autoris_soutenance, u_tem_avenant_cotut, u_date_abandon, u_date_transfert, s_etablissement_id, s_doctorant_id, s_ecole_doct_id, s_unite_rech_id, s_titre, s_etat_these, s_resultat, s_lib_disc, s_date_prem_insc, s_date_prev_soutenance, s_date_soutenance, s_date_fin_confid, s_lib_etab_cotut, s_lib_pays_cotut, s_correc_autorisee, s_correc_effectuee, s_soutenance_autoris, s_date_autoris_soutenance, s_tem_avenant_cotut, s_date_abandon, s_date_transfert, d_etablissement_id, d_doctorant_id, d_ecole_doct_id, d_unite_rech_id, d_titre, d_etat_these, d_resultat, d_lib_disc, d_date_prem_insc, d_date_prev_soutenance, d_date_soutenance, d_date_fin_confid, d_lib_etab_cotut, d_lib_pays_cotut, d_correc_autorisee, d_correc_effectuee, d_soutenance_autoris, d_date_autoris_soutenance, d_tem_avenant_cotut, d_date_abandon, d_date_transfert) AS with diff as (
        SELECT 
            coalesce(s.SOURCE_CODE, d.SOURCE_CODE) SOURCE_CODE,
            coalesce(s.source_id, d.source_id) source_id,

            case
            when(s.SOURCE_CODE IS NOT NULL AND d.SOURCE_CODE IS NULL) then 'insert'
            when(s.SOURCE_CODE IS NOT NULL AND d.SOURCE_CODE IS NOT NULL and (d.HISTO_DESTRUCTION IS NULL or d.HISTO_DESTRUCTION > LOCALTIMESTAMP)) then 'update'
            when(s.SOURCE_CODE IS NOT NULL AND d.SOURCE_CODE IS NOT NULL and (d.HISTO_DESTRUCTION IS NOT NULL and d.HISTO_DESTRUCTION <= LOCALTIMESTAMP)) then 'undelete'
            when(s.SOURCE_CODE IS NULL AND d.SOURCE_CODE IS NOT NULL and (d.HISTO_DESTRUCTION IS NULL or d.HISTO_DESTRUCTION > LOCALTIMESTAMP)) then 'delete' end as operation,

            CASE WHEN d.ETABLISSEMENT_ID <> s.ETABLISSEMENT_ID OR (d.ETABLISSEMENT_ID IS NULL AND s.ETABLISSEMENT_ID IS NOT NULL) OR (d.ETABLISSEMENT_ID IS NOT NULL AND s.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END as U_ETABLISSEMENT_ID,
    CASE WHEN d.DOCTORANT_ID <> s.DOCTORANT_ID OR (d.DOCTORANT_ID IS NULL AND s.DOCTORANT_ID IS NOT NULL) OR (d.DOCTORANT_ID IS NOT NULL AND s.DOCTORANT_ID IS NULL) THEN 1 ELSE 0 END as U_DOCTORANT_ID,
    CASE WHEN d.ECOLE_DOCT_ID <> s.ECOLE_DOCT_ID OR (d.ECOLE_DOCT_ID IS NULL AND s.ECOLE_DOCT_ID IS NOT NULL) OR (d.ECOLE_DOCT_ID IS NOT NULL AND s.ECOLE_DOCT_ID IS NULL) THEN 1 ELSE 0 END as U_ECOLE_DOCT_ID,
    CASE WHEN d.UNITE_RECH_ID <> s.UNITE_RECH_ID OR (d.UNITE_RECH_ID IS NULL AND s.UNITE_RECH_ID IS NOT NULL) OR (d.UNITE_RECH_ID IS NOT NULL AND s.UNITE_RECH_ID IS NULL) THEN 1 ELSE 0 END as U_UNITE_RECH_ID,
    CASE WHEN d.TITRE <> s.TITRE OR (d.TITRE IS NULL AND s.TITRE IS NOT NULL) OR (d.TITRE IS NOT NULL AND s.TITRE IS NULL) THEN 1 ELSE 0 END as U_TITRE,
    CASE WHEN d.ETAT_THESE <> s.ETAT_THESE OR (d.ETAT_THESE IS NULL AND s.ETAT_THESE IS NOT NULL) OR (d.ETAT_THESE IS NOT NULL AND s.ETAT_THESE IS NULL) THEN 1 ELSE 0 END as U_ETAT_THESE,
    CASE WHEN d.RESULTAT <> s.RESULTAT OR (d.RESULTAT IS NULL AND s.RESULTAT IS NOT NULL) OR (d.RESULTAT IS NOT NULL AND s.RESULTAT IS NULL) THEN 1 ELSE 0 END as U_RESULTAT,
    CASE WHEN d.LIB_DISC <> s.LIB_DISC OR (d.LIB_DISC IS NULL AND s.LIB_DISC IS NOT NULL) OR (d.LIB_DISC IS NOT NULL AND s.LIB_DISC IS NULL) THEN 1 ELSE 0 END as U_LIB_DISC,
    CASE WHEN d.DATE_PREM_INSC <> s.DATE_PREM_INSC OR (d.DATE_PREM_INSC IS NULL AND s.DATE_PREM_INSC IS NOT NULL) OR (d.DATE_PREM_INSC IS NOT NULL AND s.DATE_PREM_INSC IS NULL) THEN 1 ELSE 0 END as U_DATE_PREM_INSC,
    CASE WHEN d.DATE_PREV_SOUTENANCE <> s.DATE_PREV_SOUTENANCE OR (d.DATE_PREV_SOUTENANCE IS NULL AND s.DATE_PREV_SOUTENANCE IS NOT NULL) OR (d.DATE_PREV_SOUTENANCE IS NOT NULL AND s.DATE_PREV_SOUTENANCE IS NULL) THEN 1 ELSE 0 END as U_DATE_PREV_SOUTENANCE,
    CASE WHEN d.DATE_SOUTENANCE <> s.DATE_SOUTENANCE OR (d.DATE_SOUTENANCE IS NULL AND s.DATE_SOUTENANCE IS NOT NULL) OR (d.DATE_SOUTENANCE IS NOT NULL AND s.DATE_SOUTENANCE IS NULL) THEN 1 ELSE 0 END as U_DATE_SOUTENANCE,
    CASE WHEN d.DATE_FIN_CONFID <> s.DATE_FIN_CONFID OR (d.DATE_FIN_CONFID IS NULL AND s.DATE_FIN_CONFID IS NOT NULL) OR (d.DATE_FIN_CONFID IS NOT NULL AND s.DATE_FIN_CONFID IS NULL) THEN 1 ELSE 0 END as U_DATE_FIN_CONFID,
    CASE WHEN d.LIB_ETAB_COTUT <> s.LIB_ETAB_COTUT OR (d.LIB_ETAB_COTUT IS NULL AND s.LIB_ETAB_COTUT IS NOT NULL) OR (d.LIB_ETAB_COTUT IS NOT NULL AND s.LIB_ETAB_COTUT IS NULL) THEN 1 ELSE 0 END as U_LIB_ETAB_COTUT,
    CASE WHEN d.LIB_PAYS_COTUT <> s.LIB_PAYS_COTUT OR (d.LIB_PAYS_COTUT IS NULL AND s.LIB_PAYS_COTUT IS NOT NULL) OR (d.LIB_PAYS_COTUT IS NOT NULL AND s.LIB_PAYS_COTUT IS NULL) THEN 1 ELSE 0 END as U_LIB_PAYS_COTUT,
    CASE WHEN d.CORREC_AUTORISEE <> s.CORREC_AUTORISEE OR (d.CORREC_AUTORISEE IS NULL AND s.CORREC_AUTORISEE IS NOT NULL) OR (d.CORREC_AUTORISEE IS NOT NULL AND s.CORREC_AUTORISEE IS NULL) THEN 1 ELSE 0 END as U_CORREC_AUTORISEE,
    CASE WHEN d.CORREC_EFFECTUEE <> s.CORREC_EFFECTUEE OR (d.CORREC_EFFECTUEE IS NULL AND s.CORREC_EFFECTUEE IS NOT NULL) OR (d.CORREC_EFFECTUEE IS NOT NULL AND s.CORREC_EFFECTUEE IS NULL) THEN 1 ELSE 0 END as U_CORREC_EFFECTUEE,
    CASE WHEN d.SOUTENANCE_AUTORIS <> s.SOUTENANCE_AUTORIS OR (d.SOUTENANCE_AUTORIS IS NULL AND s.SOUTENANCE_AUTORIS IS NOT NULL) OR (d.SOUTENANCE_AUTORIS IS NOT NULL AND s.SOUTENANCE_AUTORIS IS NULL) THEN 1 ELSE 0 END as U_SOUTENANCE_AUTORIS,
    CASE WHEN d.DATE_AUTORIS_SOUTENANCE <> s.DATE_AUTORIS_SOUTENANCE OR (d.DATE_AUTORIS_SOUTENANCE IS NULL AND s.DATE_AUTORIS_SOUTENANCE IS NOT NULL) OR (d.DATE_AUTORIS_SOUTENANCE IS NOT NULL AND s.DATE_AUTORIS_SOUTENANCE IS NULL) THEN 1 ELSE 0 END as U_DATE_AUTORIS_SOUTENANCE,
    CASE WHEN d.TEM_AVENANT_COTUT <> s.TEM_AVENANT_COTUT OR (d.TEM_AVENANT_COTUT IS NULL AND s.TEM_AVENANT_COTUT IS NOT NULL) OR (d.TEM_AVENANT_COTUT IS NOT NULL AND s.TEM_AVENANT_COTUT IS NULL) THEN 1 ELSE 0 END as U_TEM_AVENANT_COTUT,
    CASE WHEN d.DATE_ABANDON <> s.DATE_ABANDON OR (d.DATE_ABANDON IS NULL AND s.DATE_ABANDON IS NOT NULL) OR (d.DATE_ABANDON IS NOT NULL AND s.DATE_ABANDON IS NULL) THEN 1 ELSE 0 END as U_DATE_ABANDON,
    CASE WHEN d.DATE_TRANSFERT <> s.DATE_TRANSFERT OR (d.DATE_TRANSFERT IS NULL AND s.DATE_TRANSFERT IS NOT NULL) OR (d.DATE_TRANSFERT IS NOT NULL AND s.DATE_TRANSFERT IS NULL) THEN 1 ELSE 0 END as U_DATE_TRANSFERT,

            s.ETABLISSEMENT_ID AS S_ETABLISSEMENT_ID,
    s.DOCTORANT_ID AS S_DOCTORANT_ID,
    s.ECOLE_DOCT_ID AS S_ECOLE_DOCT_ID,
    s.UNITE_RECH_ID AS S_UNITE_RECH_ID,
    s.TITRE AS S_TITRE,
    s.ETAT_THESE AS S_ETAT_THESE,
    s.RESULTAT AS S_RESULTAT,
    s.LIB_DISC AS S_LIB_DISC,
    s.DATE_PREM_INSC AS S_DATE_PREM_INSC,
    s.DATE_PREV_SOUTENANCE AS S_DATE_PREV_SOUTENANCE,
    s.DATE_SOUTENANCE AS S_DATE_SOUTENANCE,
    s.DATE_FIN_CONFID AS S_DATE_FIN_CONFID,
    s.LIB_ETAB_COTUT AS S_LIB_ETAB_COTUT,
    s.LIB_PAYS_COTUT AS S_LIB_PAYS_COTUT,
    s.CORREC_AUTORISEE AS S_CORREC_AUTORISEE,
    s.CORREC_EFFECTUEE AS S_CORREC_EFFECTUEE,
    s.SOUTENANCE_AUTORIS AS S_SOUTENANCE_AUTORIS,
    s.DATE_AUTORIS_SOUTENANCE AS S_DATE_AUTORIS_SOUTENANCE,
    s.TEM_AVENANT_COTUT AS S_TEM_AVENANT_COTUT,
    s.DATE_ABANDON AS S_DATE_ABANDON,
    s.DATE_TRANSFERT AS S_DATE_TRANSFERT,

            d.ETABLISSEMENT_ID AS D_ETABLISSEMENT_ID,
    d.DOCTORANT_ID AS D_DOCTORANT_ID,
    d.ECOLE_DOCT_ID AS D_ECOLE_DOCT_ID,
    d.UNITE_RECH_ID AS D_UNITE_RECH_ID,
    d.TITRE AS D_TITRE,
    d.ETAT_THESE AS D_ETAT_THESE,
    d.RESULTAT AS D_RESULTAT,
    d.LIB_DISC AS D_LIB_DISC,
    d.DATE_PREM_INSC AS D_DATE_PREM_INSC,
    d.DATE_PREV_SOUTENANCE AS D_DATE_PREV_SOUTENANCE,
    d.DATE_SOUTENANCE AS D_DATE_SOUTENANCE,
    d.DATE_FIN_CONFID AS D_DATE_FIN_CONFID,
    d.LIB_ETAB_COTUT AS D_LIB_ETAB_COTUT,
    d.LIB_PAYS_COTUT AS D_LIB_PAYS_COTUT,
    d.CORREC_AUTORISEE AS D_CORREC_AUTORISEE,
    d.CORREC_EFFECTUEE AS D_CORREC_EFFECTUEE,
    d.SOUTENANCE_AUTORIS AS D_SOUTENANCE_AUTORIS,
    d.DATE_AUTORIS_SOUTENANCE AS D_DATE_AUTORIS_SOUTENANCE,
    d.TEM_AVENANT_COTUT AS D_TEM_AVENANT_COTUT,
    d.DATE_ABANDON AS D_DATE_ABANDON,
    d.DATE_TRANSFERT AS D_DATE_TRANSFERT

         FROM THESE d
        JOIN source src ON src.id = d.source_id AND src.importable = 1
        FULL OUTER JOIN SRC_THESE s ON s.source_id = d.source_id AND s.SOURCE_CODE = d.SOURCE_CODE
    )
    select SOURCE_CODE,SOURCE_ID,OPERATION,U_ETABLISSEMENT_ID,U_DOCTORANT_ID,U_ECOLE_DOCT_ID,U_UNITE_RECH_ID,U_TITRE,U_ETAT_THESE,U_RESULTAT,U_LIB_DISC,U_DATE_PREM_INSC,U_DATE_PREV_SOUTENANCE,U_DATE_SOUTENANCE,U_DATE_FIN_CONFID,U_LIB_ETAB_COTUT,U_LIB_PAYS_COTUT,U_CORREC_AUTORISEE,U_CORREC_EFFECTUEE,U_SOUTENANCE_AUTORIS,U_DATE_AUTORIS_SOUTENANCE,U_TEM_AVENANT_COTUT,U_DATE_ABANDON,U_DATE_TRANSFERT,S_ETABLISSEMENT_ID,S_DOCTORANT_ID,S_ECOLE_DOCT_ID,S_UNITE_RECH_ID,S_TITRE,S_ETAT_THESE,S_RESULTAT,S_LIB_DISC,S_DATE_PREM_INSC,S_DATE_PREV_SOUTENANCE,S_DATE_SOUTENANCE,S_DATE_FIN_CONFID,S_LIB_ETAB_COTUT,S_LIB_PAYS_COTUT,S_CORREC_AUTORISEE,S_CORREC_EFFECTUEE,S_SOUTENANCE_AUTORIS,S_DATE_AUTORIS_SOUTENANCE,S_TEM_AVENANT_COTUT,S_DATE_ABANDON,S_DATE_TRANSFERT,D_ETABLISSEMENT_ID,D_DOCTORANT_ID,D_ECOLE_DOCT_ID,D_UNITE_RECH_ID,D_TITRE,D_ETAT_THESE,D_RESULTAT,D_LIB_DISC,D_DATE_PREM_INSC,D_DATE_PREV_SOUTENANCE,D_DATE_SOUTENANCE,D_DATE_FIN_CONFID,D_LIB_ETAB_COTUT,D_LIB_PAYS_COTUT,D_CORREC_AUTORISEE,D_CORREC_EFFECTUEE,D_SOUTENANCE_AUTORIS,D_DATE_AUTORIS_SOUTENANCE,D_TEM_AVENANT_COTUT,D_DATE_ABANDON,D_DATE_TRANSFERT from diff
    where operation is not null
    and (operation = 'undelete' or 0 < U_ETABLISSEMENT_ID+U_DOCTORANT_ID+U_ECOLE_DOCT_ID+U_UNITE_RECH_ID+U_TITRE+U_ETAT_THESE+U_RESULTAT+U_LIB_DISC+U_DATE_PREM_INSC+U_DATE_PREV_SOUTENANCE+U_DATE_SOUTENANCE+U_DATE_FIN_CONFID+U_LIB_ETAB_COTUT+U_LIB_PAYS_COTUT+U_CORREC_AUTORISEE+U_CORREC_EFFECTUEE+U_SOUTENANCE_AUTORIS+U_DATE_AUTORIS_SOUTENANCE+U_TEM_AVENANT_COTUT+U_DATE_ABANDON+U_DATE_TRANSFERT);

